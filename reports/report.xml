<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="218" hostname="ake-PC" name="pytest" skipped="46" tests="636" time="4511.354" timestamp="2020-04-08T11:58:12.208467"><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_checkVIPCarRecord.TestCheckVIPCarRecord" file="test_suite\centerMonitorRoom\carInOutHandle\test_checkVIPCarRecord.py" line="20" name="test_createMonthTicketConfig[send_data0-expect0]" time="16.245"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_checkVIPCarRecord.TestCheckVIPCarRecord" file="test_suite\centerMonitorRoom\carInOutHandle\test_checkVIPCarRecord.py" line="26" name="test_openMonthTicketBill[send_data0-expect0]" time="8.898"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_checkVIPCarRecord.TestCheckVIPCarRecord" file="test_suite\centerMonitorRoom\carInOutHandle\test_checkVIPCarRecord.py" line="32" name="test_checkMonthTicketListRecord[send_data0-expect0]" time="8.331"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_dutyRoomAdjustCarNum.TestDutyRoomAdjustCarNum" file="test_suite\centerMonitorRoom\carInOutHandle\test_dutyRoomAdjustCarNum.py" line="21" name="test_mockCarIn[send_data0-expect0]" time="10.913"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_dutyRoomAdjustCarNum.TestDutyRoomAdjustCarNum" file="test_suite\centerMonitorRoom\carInOutHandle\test_dutyRoomAdjustCarNum.py" line="27" name="test_dutyRoomAdjustCarNum[send_data0-expect0]" time="14.531"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_dutyRoomAdjustCarNum.TestDutyRoomAdjustCarNum" file="test_suite\centerMonitorRoom\carInOutHandle\test_dutyRoomAdjustCarNum.py" line="33" name="test_dutyRoomCheckCarIn[send_data0-expect0]" time="13.769"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_dutyRoomAdjustCarNum.TestDutyRoomAdjustCarNum" file="test_suite\centerMonitorRoom\carInOutHandle\test_dutyRoomAdjustCarNum.py" line="39" name="test_cendutyCarInRecord[send_data0-expect0]" time="0.701"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_dutyRoomHandleCarInOut.TestDutyRoomHandleCarInOut" file="test_suite\centerMonitorRoom\carInOutHandle\test_dutyRoomHandleCarInOut.py" line="20" name="test_mockCarIn[send_data0-expect0]" time="10.269"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_dutyRoomHandleCarInOut.TestDutyRoomHandleCarInOut" file="test_suite\centerMonitorRoom\carInOutHandle\test_dutyRoomHandleCarInOut.py" line="26" name="test_dutyRoomCheckCarIn[send_data0-expect0]" time="13.819"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_dutyRoomHandleCarInOut.TestDutyRoomHandleCarInOut" file="test_suite\centerMonitorRoom\carInOutHandle\test_dutyRoomHandleCarInOut.py" line="32" name="test_cendutyCarInRecord[send_data0-expect0]" time="0.756"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_dutyRoomHandleCarInOut.TestDutyRoomHandleCarInOut" file="test_suite\centerMonitorRoom\carInOutHandle\test_dutyRoomHandleCarInOut.py" line="38" name="test_presentCar[send_data0-expect0]" time="3.248"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_dutyRoomHandleCarInOut.TestDutyRoomHandleCarInOut" file="test_suite\centerMonitorRoom\carInOutHandle\test_dutyRoomHandleCarInOut.py" line="44" name="test_mockCarOut[send_data0-expect0]" time="7.441"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_dutyRoomHandleCarInOut.TestDutyRoomHandleCarInOut" file="test_suite\centerMonitorRoom\carInOutHandle\test_dutyRoomHandleCarInOut.py" line="50" name="test_dutyRoomCheckCarOut[send_data0-expect0]" time="13.648"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_dutyRoomHandleCarInOut.TestDutyRoomHandleCarInOut" file="test_suite\centerMonitorRoom\carInOutHandle\test_dutyRoomHandleCarInOut.py" line="56" name="test_cendutyCarOutRecord[send_data0-expect0]" time="0.764"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_dutyRoomHandleCarInOut.TestDutyRoomHandleCarInOut" file="test_suite\centerMonitorRoom\carInOutHandle\test_dutyRoomHandleCarInOut.py" line="62" name="test_carLeaveHistory[send_data0-expect0]" time="9.366"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_sendVoiceMsg.TestSendVoiceMsg" file="test_suite\centerMonitorRoom\carInOutHandle\test_sendVoiceMsg.py" line="19" name="test_mockCarIn[send_data0-expect0]" time="6.200"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_sendVoiceMsg.TestSendVoiceMsg" file="test_suite\centerMonitorRoom\carInOutHandle\test_sendVoiceMsg.py" line="25" name="test_mockCarOut[send_data0-expect0]" time="11.841"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_sendVoiceMsg.TestSendVoiceMsg" file="test_suite\centerMonitorRoom\carInOutHandle\test_sendVoiceMsg.py" line="31" name="test_sendVoiceMsg[send_data0-expect0]" time="13.499"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_sendVoiceMsg.TestSendVoiceMsg" file="test_suite\centerMonitorRoom\carInOutHandle\test_sendVoiceMsg.py" line="37" name="test_checkCarMsgYtj[send_data0-expect0]" time="5.075"></testcase><testcase classname="test_suite.centerMonitorRoom.carInOutHandle.test_sendVoiceMsg.TestSendVoiceMsg" file="test_suite\centerMonitorRoom\carInOutHandle\test_sendVoiceMsg.py" line="44" name="test_dutyRoomCheckCarOut[send_data0-expect0]" time="14.041"></testcase><testcase classname="test_suite.centerMonitorRoom.personalInfo.test_operatorLog.TestOperatorLog" file="test_suite\centerMonitorRoom\personalInfo\test_operatorLog.py" line="19" name="test_mockCarIn[send_data0-expect0]" time="5.774"></testcase><testcase classname="test_suite.centerMonitorRoom.personalInfo.test_operatorLog.TestOperatorLog" file="test_suite\centerMonitorRoom\personalInfo\test_operatorLog.py" line="25" name="test_mockCarOut[send_data0-expect0]" time="11.642"></testcase><testcase classname="test_suite.centerMonitorRoom.personalInfo.test_operatorLog.TestOperatorLog" file="test_suite\centerMonitorRoom\personalInfo\test_operatorLog.py" line="31" name="test_sendVoiceMsg[send_data0-expect0]" time="13.377"></testcase><testcase classname="test_suite.centerMonitorRoom.personalInfo.test_operatorLog.TestOperatorLog" file="test_suite\centerMonitorRoom\personalInfo\test_operatorLog.py" line="37" name="test_operatorLog[send_data0-expect0]" time="5.119"></testcase><testcase classname="test_suite.centerMonitorRoom.personalInfo.test_operatorOnLineStatus.TestOperatorOnLineStatus" file="test_suite\centerMonitorRoom\personalInfo\test_operatorOnLineStatus.py" line="20" name="test_operatorStatusLeave[send_data0-expect0]" time="9.966"></testcase><testcase classname="test_suite.centerMonitorRoom.personalInfo.test_operatorOnLineStatus.TestOperatorOnLineStatus" file="test_suite\centerMonitorRoom\personalInfo\test_operatorOnLineStatus.py" line="26" name="test_mockCarIn[send_data0-expect0]" time="6.016"></testcase><testcase classname="test_suite.centerMonitorRoom.personalInfo.test_operatorOnLineStatus.TestOperatorOnLineStatus" file="test_suite\centerMonitorRoom\personalInfo\test_operatorOnLineStatus.py" line="32" name="test_getCarInHandleInfo[send_data0-expect0]" time="5.050"></testcase><testcase classname="test_suite.centerMonitorRoom.personalInfo.test_operatorOnLineStatus.TestOperatorOnLineStatus" file="test_suite\centerMonitorRoom\personalInfo\test_operatorOnLineStatus.py" line="38" name="test_operatorStatusOn[send_data0-expect0]" time="5.272"></testcase><testcase classname="test_suite.centerMonitorRoom.personalInfo.test_operatorOnLineStatus.TestOperatorOnLineStatus" file="test_suite\centerMonitorRoom\personalInfo\test_operatorOnLineStatus.py" line="44" name="test_operatorStatusOff[send_data0-expect0]" time="5.305"></testcase><testcase classname="test_suite.centralTollCollectionRoom.personalInfo.test_centralHandOverCentralDuty.TestCentralHandOverCentralDuty" file="test_suite\centralTollCollectionRoom\personalInfo\test_centralHandOverCentralDuty.py" line="19" name="test_handOverCentralDuty[send_data0-expect0]" time="6.353"></testcase><testcase classname="test_suite.centralTollCollectionRoom.personalInfo.test_centryOffDuty.TestCentryOffDuty" file="test_suite\centralTollCollectionRoom\personalInfo\test_centryOffDuty.py" line="19" name="test_centralOffDuty[None-expect0]" time="5.721"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdditionalRecord.TestCentralAdditionalRecord" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdditionalRecord.py" line="20" name="test_centralAdditionalRecord[send_data0-expect0]" time="11.061"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdditionalRecord.TestCentralAdditionalRecord" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdditionalRecord.py" line="26" name="test_centryPay[send_data0-expect0]" time="8.771"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdditionalRecord.TestCentralAdditionalRecord" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdditionalRecord.py" line="32" name="test_checkCentralChargeRecord[send_data0-expect0]" time="0.759"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdditionalRecord.TestCentralAdditionalRecord" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdditionalRecord.py" line="38" name="test_checkParkingBillDetail[send_data0-expect0]" time="11.183"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdditionalRecord.TestCentralAdditionalRecord" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdditionalRecord.py" line="44" name="test_mockCarOut[send_data0-expect0]" time="6.616"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdditionalRecord.TestCentralAdditionalRecord" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdditionalRecord.py" line="50" name="test_checkCarLeaveHistory[send_data0-expect0]" time="8.621"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarNum.TestCentralAdjustCarNum" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarNum.py" line="20" name="test_mockCarIn[send_data0-expect0]" time="5.841"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarNum.TestCentralAdjustCarNum" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarNum.py" line="26" name="test_centralAdjustCarNum[send_data0-expect0]" time="7.864"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarNum.TestCentralAdjustCarNum" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarNum.py" line="32" name="test_centryPay[send_data0-expect0]" time="8.348"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarNum.TestCentralAdjustCarNum" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarNum.py" line="38" name="test_mockCarOut[send_data0-expect0]" time="6.572"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarNum.TestCentralAdjustCarNum" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarNum.py" line="44" name="test_checkCarLeaveHistory[send_data0-expect0]" time="7.719"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarNumAndType.TestCentralAdjustCarNumAndType" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarNumAndType.py" line="20" name="test_mockCarIn[send_data0-expect0]" time="5.779"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarNumAndType.TestCentralAdjustCarNumAndType" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarNumAndType.py" line="26" name="test_centralAdjustCarNum[send_data0-expect0]" time="7.703"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarNumAndType.TestCentralAdjustCarNumAndType" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarNumAndType.py" line="32" name="test_centralPresentCarType[send_data0-expect0]" time="0.801"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarNumAndType.TestCentralAdjustCarNumAndType" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarNumAndType.py" line="38" name="test_centryPay[send_data0-expect0]" time="8.567"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarNumAndType.TestCentralAdjustCarNumAndType" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarNumAndType.py" line="44" name="test_mockCarOut[send_data0-expect0]" time="6.596"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarNumAndType.TestCentralAdjustCarNumAndType" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarNumAndType.py" line="50" name="test_checkCarLeaveHistory[send_data0-expect0]" time="8.603"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarType.TestCentralAdjustCarType" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarType.py" line="20" name="test_mockCarIn[send_data0-expect0]" time="5.869"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarType.TestCentralAdjustCarType" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarType.py" line="26" name="test_centralAdjustCarType[send_data0-expect0]" time="6.472"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarType.TestCentralAdjustCarType" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarType.py" line="33" name="test_centralPresentCarType[send_data0-expect0]" time="0.955"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarType.TestCentralAdjustCarType" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarType.py" line="39" name="test_centryPay[send_data0-expect0]" time="8.729"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarType.TestCentralAdjustCarType" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarType.py" line="45" name="test_mockCarOut[send_data0-expect0]" time="6.677"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralAdjustCarType.TestCentralAdjustCarType" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralAdjustCarType.py" line="51" name="test_checkCarLeaveHistory[send_data0-expect0]" time="8.722"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralPay.TestCentralPay" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralPay.py" line="20" name="test_mockCarIn[send_data0-expect0]" time="5.835"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralPay.TestCentralPay" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralPay.py" line="26" name="test_centryPay[send_data0-expect0]" time="8.484"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralPay.TestCentralPay" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralPay.py" line="32" name="test_checkChargeDetail[send_data0-expect0]" time="1.353"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralPay.TestCentralPay" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralPay.py" line="38" name="test_centralTicket[send_data0-expect0]" time="5.906"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralPay.TestCentralPay" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralPay.py" line="44" name="test_checkCentralChargeRecord[send_data0-expect0]" time="0.663"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralPay.TestCentralPay" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralPay.py" line="51" name="test_checkParkingBillDetail[send_data0-expect0]" time="7.911"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralPay.TestCentralPay" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralPay.py" line="57" name="test_mockCarOut[send_data0-expect0]" time="6.471"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralPay.TestCentralPay" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralPay.py" line="63" name="test_checkCarLeaveHistory[send_data0-expect0]" time="8.275"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralPayWithCoupon.TestCentralPayWithCoupon" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralPayWithCoupon.py" line="21" name="test_mockCarIn[send_data0-expect0]" time="5.806"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralPayWithCoupon.TestCentralPayWithCoupon" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralPayWithCoupon.py" line="27" name="test_sendCoupon[send_data0-expect0]" time="17.148"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralPayWithCoupon.TestCentralPayWithCoupon" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralPayWithCoupon.py" line="33" name="test_centryPay[send_data0-expect0]" time="9.819"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralPayWithCoupon.TestCentralPayWithCoupon" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralPayWithCoupon.py" line="39" name="test_checkCentralChargeRecord[send_data0-expect0]" time="0.577"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralPayWithCoupon.TestCentralPayWithCoupon" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralPayWithCoupon.py" line="46" name="test_checkParkingBillDetail[send_data0-expect0]" time="9.002"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralPayWithCoupon.TestCentralPayWithCoupon" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralPayWithCoupon.py" line="52" name="test_mockCarOut[send_data0-expect0]" time="6.895"></testcase><testcase classname="test_suite.centralTollCollectionRoom.presentCarHandle.test_centralPayWithCoupon.TestCentralPayWithCoupon" file="test_suite\centralTollCollectionRoom\presentCarHandle\test_centralPayWithCoupon.py" line="58" name="test_checkCarLeaveHistory[send_data0-expect0]" time="8.136"></testcase><testcase classname="test_suite.informationSearch.carNumSearch.test_clearCarNumCheckOut.TestClearCarNumCheckOut" file="test_suite\informationSearch\carNumSearch\test_clearCarNumCheckOut.py" line="20" name="test_mockCarIn[send_data0-expect0]" time="5.943"></testcase><testcase classname="test_suite.informationSearch.carNumSearch.test_clearCarNumCheckOut.TestClearCarNumCheckOut" file="test_suite\informationSearch\carNumSearch\test_clearCarNumCheckOut.py" line="26" name="test_cleanCarCheckOut[send_data0-expect0]" time="9.513"></testcase><testcase classname="test_suite.informationSearch.carNumSearch.test_clearCarNumCheckOut.TestClearCarNumCheckOut" file="test_suite\informationSearch\carNumSearch\test_clearCarNumCheckOut.py" line="32" name="test_checkPresentCar[send_data0-expect0]" time="2.845"></testcase><testcase classname="test_suite.informationSearch.carNumSearch.test_clearCarNumCheckOut.TestClearCarNumCheckOut" file="test_suite\informationSearch\carNumSearch\test_clearCarNumCheckOut.py" line="38" name="test_checkAbnormalInCar[send_data0-expect0]" time="2.876"></testcase><testcase classname="test_suite.informationSearch.carNumSearch.test_intelligenceCleanCarByFile.TestIntelligenceCleanCarByFile" file="test_suite\informationSearch\carNumSearch\test_intelligenceCleanCarByFile.py" line="22" name="test_mockCarInA[send_data0-expect0]" time="6.092"></testcase><testcase classname="test_suite.informationSearch.carNumSearch.test_intelligenceCleanCarByFile.TestIntelligenceCleanCarByFile" file="test_suite\informationSearch\carNumSearch\test_intelligenceCleanCarByFile.py" line="28" name="test_mockCarInB[send_data0-expect0]" time="5.853"></testcase><testcase classname="test_suite.informationSearch.carNumSearch.test_intelligenceCleanCarByFile.TestIntelligenceCleanCarByFile" file="test_suite\informationSearch\carNumSearch\test_intelligenceCleanCarByFile.py" line="34" name="test_intelligenceUploadFile[send_data0-expect0]" time="16.960"></testcase><testcase classname="test_suite.informationSearch.carNumSearch.test_intelligenceCleanCarByFile.TestIntelligenceCleanCarByFile" file="test_suite\informationSearch\carNumSearch\test_intelligenceCleanCarByFile.py" line="40" name="test_checkPresentCar[send_data0-expect0]" time="3.044"></testcase><testcase classname="test_suite.informationSearch.carNumSearch.test_intelligenceCleanCarByFile.TestIntelligenceCleanCarByFile" file="test_suite\informationSearch\carNumSearch\test_intelligenceCleanCarByFile.py" line="47" name="test_checkPresentCarC[send_data0-expect0]" time="4.279"></testcase><testcase classname="test_suite.informationSearch.carNumSearch.test_intelligenceCleanCarByFile.TestIntelligenceCleanCarByFile" file="test_suite\informationSearch\carNumSearch\test_intelligenceCleanCarByFile.py" line="53" name="test_checkAbnormalInCar[send_data0-expect0]" time="4.555"></testcase><testcase classname="test_suite.informationSearch.carNumSearch.test_intelligenceCleanCarByTime.TestIntelligenceCleanCarByTime" file="test_suite\informationSearch\carNumSearch\test_intelligenceCleanCarByTime.py" line="23" name="test_mockCarIn[send_data0-expect0]" time="6.146"></testcase><testcase classname="test_suite.informationSearch.carNumSearch.test_intelligenceCleanCarByTime.TestIntelligenceCleanCarByTime" file="test_suite\informationSearch\carNumSearch\test_intelligenceCleanCarByTime.py" line="29" name="test_intelligenceCheckCarOut[send_data0-expect0]" time="15.028"></testcase><testcase classname="test_suite.informationSearch.carNumSearch.test_intelligenceCleanCarByTime.TestIntelligenceCleanCarByTime" file="test_suite\informationSearch\carNumSearch\test_intelligenceCleanCarByTime.py" line="35" name="test_checkPresentCar[send_data0-expect0]" time="2.665"></testcase><testcase classname="test_suite.informationSearch.carNumSearch.test_intelligenceCleanCarByTime.TestIntelligenceCleanCarByTime" file="test_suite\informationSearch\carNumSearch\test_intelligenceCleanCarByTime.py" line="41" name="test_checkAbnormalInCar[send_data0-expect0]" time="2.963"></testcase><testcase classname="test_suite.informationSearch.technicalSupport.test_abnormalPicCar.TestabnormalPicCar" file="test_suite\informationSearch\technicalSupport\test_abnormalPicCar.py" line="24" name="test_mockCarIn[send_data0-expect0]" time="0.001"><skipped message="尚未成功处理" type="pytest.skip">test_suite\informationSearch\technicalSupport\test_abnormalPicCar.py:25: 尚未成功处理</skipped></testcase><testcase classname="test_suite.informationSearch.technicalSupport.test_abnormalPicCar.TestabnormalPicCar" file="test_suite\informationSearch\technicalSupport\test_abnormalPicCar.py" line="30" name="test_mockCarIn2[send_data0-expect0]" time="0.000"><skipped message="尚未成功处理" type="pytest.skip">test_suite\informationSearch\technicalSupport\test_abnormalPicCar.py:31: 尚未成功处理</skipped></testcase><testcase classname="test_suite.informationSearch.technicalSupport.test_abnormalPicCar.TestabnormalPicCar" file="test_suite\informationSearch\technicalSupport\test_abnormalPicCar.py" line="36" name="test_getAbnormalPicCar[send_data0-expect0]" time="0.001"><skipped message="尚未成功处理" type="pytest.skip">test_suite\informationSearch\technicalSupport\test_abnormalPicCar.py:37: 尚未成功处理</skipped></testcase><testcase classname="test_suite.informationSearch.technicalSupport.test_carAbnormalIn.TestCarAbnormalIn" file="test_suite\informationSearch\technicalSupport\test_carAbnormalIn.py" line="22" name="test_mockCarIn[send_data0-expect0]" time="5.833"></testcase><testcase classname="test_suite.informationSearch.technicalSupport.test_carAbnormalIn.TestCarAbnormalIn" file="test_suite\informationSearch\technicalSupport\test_carAbnormalIn.py" line="29" name="test_presentCar[send_data0-expect0]" time="3.041"></testcase><testcase classname="test_suite.informationSearch.technicalSupport.test_carAbnormalIn.TestCarAbnormalIn" file="test_suite\informationSearch\technicalSupport\test_carAbnormalIn.py" line="35" name="test_mockCarIn2[send_data0-expect0]" time="5.876"></testcase><testcase classname="test_suite.informationSearch.technicalSupport.test_carAbnormalIn.TestCarAbnormalIn" file="test_suite\informationSearch\technicalSupport\test_carAbnormalIn.py" line="42" name="test_presentCar2[send_data0-expect0]" time="2.434"></testcase><testcase classname="test_suite.informationSearch.technicalSupport.test_carAbnormalIn.TestCarAbnormalIn" file="test_suite\informationSearch\technicalSupport\test_carAbnormalIn.py" line="48" name="test_getAbnormalInCar[send_data0-expect0]" time="5.140"></testcase><testcase classname="test_suite.informationSearch.technicalSupport.test_carAbnormalIn.TestCarAbnormalIn" file="test_suite\informationSearch\technicalSupport\test_carAbnormalIn.py" line="55" name="test_mockCarOut[send_data0-expect0]" time="7.203"></testcase><testcase classname="test_suite.informationSearch.technicalSupport.test_carAbnormalIn.TestCarAbnormalIn" file="test_suite\informationSearch\technicalSupport\test_carAbnormalIn.py" line="61" name="test_sentryPay[send_data0-expect0]" time="15.947"></testcase><testcase classname="test_suite.informationSearch.technicalSupport.test_carAbnormalIn.TestCarAbnormalIn" file="test_suite\informationSearch\technicalSupport\test_carAbnormalIn.py" line="69" name="test_parkingBillDetail[send_data0-expect0]" time="11.432"></testcase><testcase classname="test_suite.informationSearch.technicalSupport.test_carAbnormalIn.TestCarAbnormalIn" file="test_suite\informationSearch\technicalSupport\test_carAbnormalIn.py" line="75" name="test_carLeaveHistory[send_data0-expect0]" time="10.539"></testcase><testcase classname="test_suite.parkingConfig.test_registerParking.TestRegisterParking" file="test_suite\parkingConfig\test_registerParking.py" line="21" name="test_getActivationCode[send_data0-expect0]" time="2.255"></testcase><testcase classname="test_suite.parkingConfig.test_registerParking.TestRegisterParking" file="test_suite\parkingConfig\test_registerParking.py" line="27" name="test_registerUser[send_data0-expect0]" time="13.130"></testcase><testcase classname="test_suite.parkingConfig.test_registerParking.TestRegisterParking" file="test_suite\parkingConfig\test_registerParking.py" line="35" name="test_addOperatorPark[userLogin0-send_data0-expect0]" time="10.726"></testcase><testcase classname="test_suite.parkingConfig.test_registerParking.TestRegisterParking" file="test_suite\parkingConfig\test_registerParking.py" line="42" name="test_saveParkAuditing[send_data0-expect0]" time="8.096"></testcase><testcase classname="test_suite.parkingConfig.test_registerParking.TestRegisterParking" file="test_suite\parkingConfig\test_registerParking.py" line="48" name="test_checkParkingOnLine[userLogin0-send_data0-expect0]" time="8.101"></testcase><testcase classname="test_suite.parkingConfig.test_registerParkingFail.TestRegisterParkingFail" file="test_suite\parkingConfig\test_registerParkingFail.py" line="21" name="test_getActivationCode[send_data0-expect0]" time="3.313"></testcase><testcase classname="test_suite.parkingConfig.test_registerParkingFail.TestRegisterParkingFail" file="test_suite\parkingConfig\test_registerParkingFail.py" line="27" name="test_registerUser[send_data0-expect0]" time="7.710"><failure message="TypeError: &apos;bool&apos; object is not subscriptable">self = &lt;test_registerParkingFail.TestRegisterParkingFail object at 0x00000000075A6978&gt;
userLogin = &lt;common.Req.Req object at 0x00000000070E6A58&gt;
send_data = {&apos;activationCode&apos;: &apos;${mytest.activationCode}&apos;, &apos;cooperativeName&apos;: &apos;叶永彬&apos;, &apos;managerName&apos;: &apos;py管理方20200408115813&apos;, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, ...}
expect = {&apos;addOperatorParkMsg&apos;: &apos;车场名称重复&apos;, &apos;getActivationCodeMsg&apos;: &apos;-&apos;, &apos;registerUserMsg&apos;: &apos;注册成功&apos;}

    def test_registerUser(self, userLogin, send_data, expect):
        &quot;&quot;&quot;注册用户&quot;&quot;&quot;
        re = RegisterParking(userLogin).registerUser(send_data[&apos;activationCode&apos;],send_data[&apos;managerName&apos;],send_data[&apos;userAccount&apos;],send_data[&apos;pwd&apos;])
        self.save_data(&apos;userAccount&apos;,send_data[&apos;userAccount&apos;])
        self.save_data(&apos;pwd&apos;,send_data[&apos;pwd&apos;])
        result = re.json()
&gt;       Assertions().assert_text(result[&apos;message&apos;], expect[&apos;registerUserMsg&apos;])
E       TypeError: &apos;bool&apos; object is not subscriptable

..\test_suite\parkingConfig\test_registerParkingFail.py:34: TypeError</failure></testcase><testcase classname="test_suite.parkingConfig.test_registerParkingFail.TestRegisterParkingFail" file="test_suite\parkingConfig\test_registerParkingFail.py" line="35" name="test_addOperatorPark[userLogin0-send_data0-expect0]" time="2.847"></testcase><testcase classname="test_suite.parkingConfig.freeParking.lightRuleChannel.test_carLightRuleInOut_noPay.TestCarLightRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\lightRuleChannel\test_carLightRuleInOut_noPay.py" line="21" name="test_mockCarIn[send_data0-expect0]" time="6.140"></testcase><testcase classname="test_suite.parkingConfig.freeParking.lightRuleChannel.test_carLightRuleInOut_noPay.TestCarLightRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\lightRuleChannel\test_carLightRuleInOut_noPay.py" line="28" name="test_presentCar[send_data0-expect0]" time="3.359"></testcase><testcase classname="test_suite.parkingConfig.freeParking.lightRuleChannel.test_carLightRuleInOut_noPay.TestCarLightRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\lightRuleChannel\test_carLightRuleInOut_noPay.py" line="34" name="test_mockCarOut[send_data0-expect0]" time="7.231"></testcase><testcase classname="test_suite.parkingConfig.freeParking.lightRuleChannel.test_carLightRuleInOut_noPay.TestCarLightRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\lightRuleChannel\test_carLightRuleInOut_noPay.py" line="40" name="test_carLeaveHistory[send_data0-expect0]" time="8.666"></testcase><testcase classname="test_suite.parkingConfig.freeParking.lightRuleChannel.test_carLightRuleOut_noInside.TestCarLightRuleOutNoInside" file="test_suite\parkingConfig\freeParking\lightRuleChannel\test_carLightRuleOut_noInside.py" line="21" name="test_mockCarOut[send_data0-expect0]" time="6.253"></testcase><testcase classname="test_suite.parkingConfig.freeParking.lightRuleChannel.test_carLightRuleOut_noInside.TestCarLightRuleOutNoInside" file="test_suite\parkingConfig\freeParking\lightRuleChannel\test_carLightRuleOut_noInside.py" line="26" name="test_carLeaveHistory[send_data0-expect0]" time="7.913"></testcase><testcase classname="test_suite.parkingConfig.freeParking.strictRuleChannel.test_carStrictRuleInOut_noPay.TestCarStrictRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\strictRuleChannel\test_carStrictRuleInOut_noPay.py" line="22" name="test_mockCarIn[send_data0-expect0]" time="5.925"></testcase><testcase classname="test_suite.parkingConfig.freeParking.strictRuleChannel.test_carStrictRuleInOut_noPay.TestCarStrictRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\strictRuleChannel\test_carStrictRuleInOut_noPay.py" line="28" name="test_checkCarIn[send_data0-expect0]" time="14.966"></testcase><testcase classname="test_suite.parkingConfig.freeParking.strictRuleChannel.test_carStrictRuleInOut_noPay.TestCarStrictRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\strictRuleChannel\test_carStrictRuleInOut_noPay.py" line="36" name="test_presentCar[send_data0-expect0]" time="3.759"></testcase><testcase classname="test_suite.parkingConfig.freeParking.strictRuleChannel.test_carStrictRuleInOut_noPay.TestCarStrictRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\strictRuleChannel\test_carStrictRuleInOut_noPay.py" line="42" name="test_mockCarOut[send_data0-expect0]" time="7.355"></testcase><testcase classname="test_suite.parkingConfig.freeParking.strictRuleChannel.test_carStrictRuleInOut_noPay.TestCarStrictRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\strictRuleChannel\test_carStrictRuleInOut_noPay.py" line="49" name="test_checkCarOut[send_data0-expect0]" time="14.815"></testcase><testcase classname="test_suite.parkingConfig.freeParking.strictRuleChannel.test_carStrictRuleInOut_noPay.TestCarStrictRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\strictRuleChannel\test_carStrictRuleInOut_noPay.py" line="57" name="test_carLeaveHistory[send_data0-expect0]" time="9.624"></testcase><testcase classname="test_suite.parkingConfig.freeParking.strictRuleChannel.test_carStrictRuleOut_noInside.TestCarLightRuleOutNoInside" file="test_suite\parkingConfig\freeParking\strictRuleChannel\test_carStrictRuleOut_noInside.py" line="22" name="test_mockCarOut[send_data0-expect0]" time="6.125"></testcase><testcase classname="test_suite.parkingConfig.freeParking.strictRuleChannel.test_carStrictRuleOut_noInside.TestCarLightRuleOutNoInside" file="test_suite\parkingConfig\freeParking\strictRuleChannel\test_carStrictRuleOut_noInside.py" line="29" name="test_checkCarOut[send_data0-expect0]" time="14.505"></testcase><testcase classname="test_suite.parkingConfig.freeParking.strictRuleChannel.test_carStrictRuleOut_noInside.TestCarLightRuleOutNoInside" file="test_suite\parkingConfig\freeParking\strictRuleChannel\test_carStrictRuleOut_noInside.py" line="37" name="test_carLeaveHistory[send_data0-expect0]" time="8.587"></testcase><testcase classname="test_suite.parkingConfig.freeParking.strictRuleChannel.test_greenCarStrictRuleInOutNoPay.TestGreenCarStrictRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\strictRuleChannel\test_greenCarStrictRuleInOutNoPay.py" line="21" name="test_mockCarIn[send_data0-expect0]" time="6.019"></testcase><testcase classname="test_suite.parkingConfig.freeParking.strictRuleChannel.test_greenCarStrictRuleInOutNoPay.TestGreenCarStrictRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\strictRuleChannel\test_greenCarStrictRuleInOutNoPay.py" line="27" name="test_checkCarIn[send_data0-expect0]" time="15.039"></testcase><testcase classname="test_suite.parkingConfig.freeParking.strictRuleChannel.test_greenCarStrictRuleInOutNoPay.TestGreenCarStrictRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\strictRuleChannel\test_greenCarStrictRuleInOutNoPay.py" line="35" name="test_presentCar[send_data0-expect0]" time="3.503"></testcase><testcase classname="test_suite.parkingConfig.freeParking.strictRuleChannel.test_greenCarStrictRuleInOutNoPay.TestGreenCarStrictRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\strictRuleChannel\test_greenCarStrictRuleInOutNoPay.py" line="41" name="test_mockCarOut[send_data0-expect0]" time="7.007"></testcase><testcase classname="test_suite.parkingConfig.freeParking.strictRuleChannel.test_greenCarStrictRuleInOutNoPay.TestGreenCarStrictRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\strictRuleChannel\test_greenCarStrictRuleInOutNoPay.py" line="48" name="test_checkCarOut[send_data0-expect0]" time="14.603"></testcase><testcase classname="test_suite.parkingConfig.freeParking.strictRuleChannel.test_greenCarStrictRuleInOutNoPay.TestGreenCarStrictRuleInOutNoPay" file="test_suite\parkingConfig\freeParking\strictRuleChannel\test_greenCarStrictRuleInOutNoPay.py" line="56" name="test_carLeaveHistory[send_data0-expect0]" time="7.782"></testcase><testcase classname="test_suite.parkingConfig.settingParking.alarmSetting.test_adjustCarNumByConfidence.TestAdjustCarNumByConfidence" file="test_suite\parkingConfig\settingParking\alarmSetting\test_adjustCarNumByConfidence.py" line="22" name="test_enableConfidenceAlarm[send_data0-expect0]" time="13.503"></testcase><testcase classname="test_suite.parkingConfig.settingParking.alarmSetting.test_adjustCarNumByConfidence.TestAdjustCarNumByConfidence" file="test_suite\parkingConfig\settingParking\alarmSetting\test_adjustCarNumByConfidence.py" line="28" name="test_mockCarIn[send_data0-expect0]" time="10.342"></testcase><testcase classname="test_suite.parkingConfig.settingParking.alarmSetting.test_adjustCarNumByConfidence.TestAdjustCarNumByConfidence" file="test_suite\parkingConfig\settingParking\alarmSetting\test_adjustCarNumByConfidence.py" line="34" name="test_adjustCarNumByConfidenceAlarm[send_data0-expect0]" time="15.599"></testcase><testcase classname="test_suite.parkingConfig.settingParking.alarmSetting.test_adjustCarNumByConfidence.TestAdjustCarNumByConfidence" file="test_suite\parkingConfig\settingParking\alarmSetting\test_adjustCarNumByConfidence.py" line="40" name="test_cendutyCarInRecord[send_data0-expect0]" time="0.580"></testcase><testcase classname="test_suite.parkingConfig.settingParking.alarmSetting.test_adjustCarNumByConfidence.TestAdjustCarNumByConfidence" file="test_suite\parkingConfig\settingParking\alarmSetting\test_adjustCarNumByConfidence.py" line="46" name="test_presentCar[send_data0-expect0]" time="3.148"></testcase><testcase classname="test_suite.parkingConfig.settingParking.alarmSetting.test_adjustCarNumByConfidence.TestAdjustCarNumByConfidence" file="test_suite\parkingConfig\settingParking\alarmSetting\test_adjustCarNumByConfidence.py" line="52" name="test_disableConfidenceAlarm[send_data0-expect0]" time="13.538"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carInOutCastNum.TestCarInOutCastNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carInOutCastNum.py" line="23" name="test_enableCastNum[send_data0-expect0]" time="20.586"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carInOutCastNum.TestCarInOutCastNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carInOutCastNum.py" line="29" name="test_mockCarIn[send_data0-expect0]" time="5.970"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carInOutCastNum.TestCarInOutCastNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carInOutCastNum.py" line="35" name="test_presentCar[send_data0-expect0]" time="2.379"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carInOutCastNum.TestCarInOutCastNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carInOutCastNum.py" line="41" name="test_mockCarOut[send_data0-expect0]" time="7.674"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carInOutCastNum.TestCarInOutCastNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carInOutCastNum.py" line="47" name="test_sentryPay[send_data0-expect0]" time="15.306"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carInOutCastNum.TestCarInOutCastNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carInOutCastNum.py" line="53" name="test_parkingBillDetail[send_data0-expect0]" time="7.730"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carInOutCastNum.TestCarInOutCastNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carInOutCastNum.py" line="59" name="test_carLeaveHistory[send_data0-expect0]" time="7.744"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carInOutCastNum.TestCarInOutCastNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carInOutCastNum.py" line="65" name="test_disableCastNum[send_data0-expect0]" time="22.063"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carInOutCastNum.TestCarInOutCastNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carInOutCastNum.py" line="71" name="test_isCastNumConfig[send_data0-expect0]" time="9.430"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarInNum.TestCarOutMatchByCarInNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarInNum.py" line="23" name="test_enableMatchCarNum[send_data0-expect0]" time="21.051"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarInNum.TestCarOutMatchByCarInNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarInNum.py" line="29" name="test_mockCarIn[send_data0-expect0]" time="5.908"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarInNum.TestCarOutMatchByCarInNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarInNum.py" line="35" name="test_presentCar[send_data0-expect0]" time="3.801"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarInNum.TestCarOutMatchByCarInNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarInNum.py" line="41" name="test_mockCarOut[send_data0-expect0]" time="8.086"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarInNum.TestCarOutMatchByCarInNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarInNum.py" line="47" name="test_sentryPay[send_data0-expect0]" time="15.450"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarInNum.TestCarOutMatchByCarInNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarInNum.py" line="53" name="test_parkingBillDetail[send_data0-expect0]" time="7.801"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarInNum.TestCarOutMatchByCarInNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarInNum.py" line="59" name="test_carLeaveHistory[send_data0-expect0]" time="7.788"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarInNum.TestCarOutMatchByCarInNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarInNum.py" line="65" name="test_disableMatchCarNum[send_data0-expect0]" time="20.706"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarInNum.TestCarOutMatchByCarInNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarInNum.py" line="71" name="test_isMatchCarNumConfig[send_data0-expect0]" time="8.221"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarOutNum.TestCarOutMatchByCarOutNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarOutNum.py" line="22" name="test_enableMatchCarNum[send_data0-expect0]" time="20.632"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarOutNum.TestCarOutMatchByCarOutNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarOutNum.py" line="28" name="test_mockCarIn[send_data0-expect0]" time="5.835"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarOutNum.TestCarOutMatchByCarOutNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarOutNum.py" line="33" name="test_presentCar[send_data0-expect0]" time="3.488"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarOutNum.TestCarOutMatchByCarOutNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarOutNum.py" line="39" name="test_mockCarOut[send_data0-expect0]" time="9.059"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarOutNum.TestCarOutMatchByCarOutNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarOutNum.py" line="45" name="test_sentryPay[send_data0-expect0]" time="15.057"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarOutNum.TestCarOutMatchByCarOutNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarOutNum.py" line="51" name="test_parkingBillDetail[send_data0-expect0]" time="7.609"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarOutNum.TestCarOutMatchByCarOutNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarOutNum.py" line="57" name="test_carLeaveHistory[send_data0-expect0]" time="8.256"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarOutNum.TestCarOutMatchByCarOutNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarOutNum.py" line="63" name="test_disableMatchCarNum[send_data0-expect0]" time="20.096"></testcase><testcase classname="test_suite.parkingConfig.settingParking.parkSetting.test_carOutMatchByCarOutNum.TestCarOutMatchByCarOutNum" file="test_suite\parkingConfig\settingParking\parkSetting\test_carOutMatchByCarOutNum.py" line="69" name="test_isMatchCarNumConfig[send_data0-expect0]" time="8.655"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_carInOutDetail.TestCarInOutDetail" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_carInOutDetail.py" line="22" name="test_mockCarIn[send_data0-expect0]" time="5.885"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_carInOutDetail.TestCarInOutDetail" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_carInOutDetail.py" line="28" name="test_presentCar[send_data0-expect0]" time="2.523"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_carInOutDetail.TestCarInOutDetail" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_carInOutDetail.py" line="34" name="test_mockCarOut[send_data0-expect0]" time="7.441"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_carInOutDetail.TestCarInOutDetail" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_carInOutDetail.py" line="40" name="test_sentryPay[send_data0-expect0]" time="14.991"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_carInOutDetail.TestCarInOutDetail" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_carInOutDetail.py" line="46" name="test_parkingBillDetail[send_data0-expect0]" time="8.824"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_carInOutDetail.TestCarInOutDetail" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_carInOutDetail.py" line="52" name="test_carLeaveHistory[send_data0-expect0]" time="7.944"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_carInOutSentryPay.TestCarInOutSentryPay" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_carInOutSentryPay.py" line="23" name="test_mockCarIn[send_data0-expect0]" time="5.887"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_carInOutSentryPay.TestCarInOutSentryPay" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_carInOutSentryPay.py" line="30" name="test_presentCar[send_data0-expect0]" time="2.721"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_carInOutSentryPay.TestCarInOutSentryPay" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_carInOutSentryPay.py" line="36" name="test_mockCarOut[send_data0-expect0]" time="7.429"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_carInOutSentryPay.TestCarInOutSentryPay" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_carInOutSentryPay.py" line="43" name="test_sentryPay[send_data0-expect0]" time="15.151"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_carInOutSentryPay.TestCarInOutSentryPay" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_carInOutSentryPay.py" line="51" name="test_carLeaveHistory[send_data0-expect0]" time="7.492"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_newEnergyCarInOutSentryPay.TestNewEnergyCarInOutSentryPay" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_newEnergyCarInOutSentryPay.py" line="23" name="test_mockCarIn[send_data0-expect0]" time="5.757"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_newEnergyCarInOutSentryPay.TestNewEnergyCarInOutSentryPay" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_newEnergyCarInOutSentryPay.py" line="30" name="test_presentCar[send_data0-expect0]" time="2.966"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_newEnergyCarInOutSentryPay.TestNewEnergyCarInOutSentryPay" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_newEnergyCarInOutSentryPay.py" line="36" name="test_mockCarOut[send_data0-expect0]" time="7.163"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_newEnergyCarInOutSentryPay.TestNewEnergyCarInOutSentryPay" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_newEnergyCarInOutSentryPay.py" line="42" name="test_sentryPay[send_data0-expect0]" time="15.634"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_newEnergyCarInOutSentryPay.TestNewEnergyCarInOutSentryPay" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_newEnergyCarInOutSentryPay.py" line="51" name="test_carLeaveHistory[send_data0-expect0]" time="7.606"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_whitelistWideInOutProcess.TestWhitelistWideInOutProcess" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_whitelistWideInOutProcess.py" line="20" name="test_mockCarIn[send_data0-expect0]" time="5.871"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_whitelistWideInOutProcess.TestWhitelistWideInOutProcess" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_whitelistWideInOutProcess.py" line="28" name="test_presentCar[send_data0-expect0]" time="3.158"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_whitelistWideInOutProcess.TestWhitelistWideInOutProcess" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_whitelistWideInOutProcess.py" line="36" name="test_mockCarOut[send_data0-expect0]" time="6.055"></testcase><testcase classname="test_suite.parkingConfig.useParking.lightRuleChannel.test_whitelistWideInOutProcess.TestWhitelistWideInOutProcess" file="test_suite\parkingConfig\useParking\lightRuleChannel\test_whitelistWideInOutProcess.py" line="44" name="test_CarLeaveHistory[send_data0-expect0]" time="7.577"></testcase><testcase classname="test_suite.parkingConfig.useParking.strictRuleChannel.test_blacklistStrictRuleInOutPay.TestBlacklistStrictRuleInOutPay" file="test_suite\parkingConfig\useParking\strictRuleChannel\test_blacklistStrictRuleInOutPay.py" line="23" name="test_addBlacklistSpecialType[send_data0-expect0]" time="14.093"></testcase><testcase classname="test_suite.parkingConfig.useParking.strictRuleChannel.test_blacklistStrictRuleInOutPay.TestBlacklistStrictRuleInOutPay" file="test_suite\parkingConfig\useParking\strictRuleChannel\test_blacklistStrictRuleInOutPay.py" line="29" name="test_createBlacklistCarNum[send_data0-expect0]" time="7.437"></testcase><testcase classname="test_suite.parkingConfig.useParking.strictRuleChannel.test_blacklistStrictRuleInOutPay.TestBlacklistStrictRuleInOutPay" file="test_suite\parkingConfig\useParking\strictRuleChannel\test_blacklistStrictRuleInOutPay.py" line="35" name="test_mockCarIn[send_data0-expect0]" time="5.872"></testcase><testcase classname="test_suite.parkingConfig.useParking.strictRuleChannel.test_blacklistStrictRuleInOutPay.TestBlacklistStrictRuleInOutPay" file="test_suite\parkingConfig\useParking\strictRuleChannel\test_blacklistStrictRuleInOutPay.py" line="41" name="test_checkCarIn[send_data0-expect0]" time="74.640"><failure message="KeyError: &apos;result&apos;">self = &lt;test_blacklistStrictRuleInOutPay.TestBlacklistStrictRuleInOutPay object at 0x000000000750E1D0&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007114E48&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNum&apos;: &apos;粤B27438&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171502, ...}
expect = {&apos;addBlacklistSpecialTypeMsg&apos;: 1, &apos;checkCarInIsOpenGate&apos;: 0, &apos;checkCarInScreen&apos;: &apos;粤B27438\\\\api黑名单7194&apos;, &apos;checkCarInVoice&apos;: &apos;$粤B27438$\\\\api黑名单7194&apos;, ...}

    def test_checkCarIn(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端登记放入&quot;&quot;&quot;
        re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;],send_data[&apos;carInHandleType&apos;],&apos;mytest.carIn_jobId&apos;)
&gt;       result = re.json()[&apos;biz_content&apos;][&apos;result&apos;]
E       KeyError: &apos;result&apos;

..\test_suite\parkingConfig\useParking\strictRuleChannel\test_blacklistStrictRuleInOutPay.py:45: KeyError</failure></testcase><testcase classname="test_suite.parkingConfig.useParking.strictRuleChannel.test_blacklistStrictRuleInOutPay.TestBlacklistStrictRuleInOutPay" file="test_suite\parkingConfig\useParking\strictRuleChannel\test_blacklistStrictRuleInOutPay.py" line="49" name="test_presentCar[send_data0-expect0]" time="3.433"><failure message="KeyError: &apos;presentCarMessage&apos;">self = &lt;test_blacklistStrictRuleInOutPay.TestBlacklistStrictRuleInOutPay object at 0x0000000007266978&gt;
userLogin = &lt;common.Req.Req object at 0x000000000750ECC0&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNum&apos;: &apos;粤B27438&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171502, ...}
expect = {&apos;addBlacklistSpecialTypeMsg&apos;: 1, &apos;checkCarInIsOpenGate&apos;: 0, &apos;checkCarInScreen&apos;: &apos;粤B27438\\\\api黑名单7194&apos;, &apos;checkCarInVoice&apos;: &apos;$粤B27438$\\\\api黑名单7194&apos;, ...}

    def test_presentCar(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看在场记录&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;][0]
&gt;       Assertions().assert_in_text(result,expect[&quot;presentCarMessage&quot;])
E       KeyError: &apos;presentCarMessage&apos;

..\test_suite\parkingConfig\useParking\strictRuleChannel\test_blacklistStrictRuleInOutPay.py:54: KeyError</failure></testcase><testcase classname="test_suite.parkingConfig.useParking.strictRuleChannel.test_blacklistStrictRuleInOutPay.TestBlacklistStrictRuleInOutPay" file="test_suite\parkingConfig\useParking\strictRuleChannel\test_blacklistStrictRuleInOutPay.py" line="56" name="test_mockCarOut[send_data0-expect0]" time="7.331"><failure message="AssertionError">self = &lt;test_blacklistStrictRuleInOutPay.TestBlacklistStrictRuleInOutPay object at 0x00000000074FFC88&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNum&apos;: &apos;粤B27438&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171502, ...}
expect = {&apos;addBlacklistSpecialTypeMsg&apos;: 1, &apos;checkCarInIsOpenGate&apos;: 0, &apos;checkCarInScreen&apos;: &apos;粤B27438\\\\api黑名单7194&apos;, &apos;checkCarInVoice&apos;: &apos;$粤B27438$\\\\api黑名单7194&apos;, ...}

    def test_mockCarOut(self,send_data,expect):
        &quot;&quot;&quot;模拟车辆离场&quot;&quot;&quot;
        re = cloudparking_service().mockCarInOut(send_data[&apos;carNum&apos;],1,send_data[&apos;outClientID&apos;])
        result = re.json()[&apos;biz_content&apos;][&apos;result&apos;]
&gt;       Assertions().assert_in_text(result, expect[&quot;mockCarOutMessage&quot;])

..\test_suite\parkingConfig\useParking\strictRuleChannel\test_blacklistStrictRuleInOutPay.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x00000000075136D8&gt;
body = {&apos;open_gate&apos;: 0, &apos;screen&apos;: &apos;粤B27438\\api黑名单7194请稍候&apos;, &apos;voice&apos;: &apos;$粤B27438$api黑名单7194请稍候&apos;, &apos;volume&apos;: 50}
expected_msg = &apos;$粤b27438$api黑名单37561请稍候&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingConfig.useParking.strictRuleChannel.test_blacklistStrictRuleInOutPay.TestBlacklistStrictRuleInOutPay" file="test_suite\parkingConfig\useParking\strictRuleChannel\test_blacklistStrictRuleInOutPay.py" line="62" name="test_sentryPay[send_data0-expect0]" time="74.629"><failure message="KeyError: &apos;result&apos;">self = &lt;test_blacklistStrictRuleInOutPay.TestBlacklistStrictRuleInOutPay object at 0x00000000075D4B70&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000069FA550&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNum&apos;: &apos;粤B27438&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171502, ...}
expect = {&apos;addBlacklistSpecialTypeMsg&apos;: 1, &apos;checkCarInIsOpenGate&apos;: 0, &apos;checkCarInScreen&apos;: &apos;粤B27438\\\\api黑名单7194&apos;, &apos;checkCarInVoice&apos;: &apos;$粤B27438$\\\\api黑名单7194&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端收费放出&quot;&quot;&quot;
        re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;],send_data[&apos;carOutHandleType&apos;],&apos;mytest.carOut_jobId&apos;)
&gt;       result = re.json()[&apos;biz_content&apos;][&apos;result&apos;]
E       KeyError: &apos;result&apos;

..\test_suite\parkingConfig\useParking\strictRuleChannel\test_blacklistStrictRuleInOutPay.py:66: KeyError</failure></testcase><testcase classname="test_suite.parkingConfig.useParking.strictRuleChannel.test_blacklistStrictRuleInOutPay.TestBlacklistStrictRuleInOutPay" file="test_suite\parkingConfig\useParking\strictRuleChannel\test_blacklistStrictRuleInOutPay.py" line="68" name="test_carLeaveHistory[send_data0-expect0]" time="8.620"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_allPriceCoupon.TestAllPriceCoupon" file="test_suite\parkingManage\businessCoupon\test_allPriceCoupon.py" line="23" name="test_addCoupon[send_data0-expect0]" time="8.266"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_allPriceCoupon.TestAllPriceCoupon" file="test_suite\parkingManage\businessCoupon\test_allPriceCoupon.py" line="29" name="test_addSell[send_data0-expect0]" time="8.275"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_allPriceCoupon.TestAllPriceCoupon" file="test_suite\parkingManage\businessCoupon\test_allPriceCoupon.py" line="35" name="test_sendCoupon[send_data0-expect0]" time="11.382"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_allPriceCoupon.TestAllPriceCoupon" file="test_suite\parkingManage\businessCoupon\test_allPriceCoupon.py" line="41" name="test_mockCarIn[send_data0-expect0]" time="6.247"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_allPriceCoupon.TestAllPriceCoupon" file="test_suite\parkingManage\businessCoupon\test_allPriceCoupon.py" line="47" name="test_mockCarOut[send_data0-expect0]" time="7.680"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_allPriceCoupon.TestAllPriceCoupon" file="test_suite\parkingManage\businessCoupon\test_allPriceCoupon.py" line="53" name="test_sentryPay[send_data0-expect0]" time="16.140"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_allPriceCoupon.TestAllPriceCoupon" file="test_suite\parkingManage\businessCoupon\test_allPriceCoupon.py" line="59" name="test_checkParkingBillDetail[send_data0-expect0]" time="8.315"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_allPriceCoupon.TestAllPriceCoupon" file="test_suite\parkingManage\businessCoupon\test_allPriceCoupon.py" line="65" name="test_checkCouponSendList[send_data0-expect0]" time="2.555"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_allPriceCoupon.TestAllPriceCoupon" file="test_suite\parkingManage\businessCoupon\test_allPriceCoupon.py" line="71" name="test_checkCouponUsedList[send_data0-expect0]" time="7.820"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_couponRefund.TestCouponRefund" file="test_suite\parkingManage\businessCoupon\test_couponRefund.py" line="21" name="test_addCoupon[send_data0-expect0]" time="8.145"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_couponRefund.TestCouponRefund" file="test_suite\parkingManage\businessCoupon\test_couponRefund.py" line="27" name="test_addSell[send_data0-expect0]" time="8.648"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_couponRefund.TestCouponRefund" file="test_suite\parkingManage\businessCoupon\test_couponRefund.py" line="33" name="test_checkCouponOnTrader[send_data0-expect0]" time="5.309"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_couponRefund.TestCouponRefund" file="test_suite\parkingManage\businessCoupon\test_couponRefund.py" line="39" name="test_refundCoupon[send_data0-expect0]" time="11.251"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_couponRefund.TestCouponRefund" file="test_suite\parkingManage\businessCoupon\test_couponRefund.py" line="45" name="test_checkCouponAgain[send_data0-expect0]" time="5.271"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_createGrantUser.TestCreateGrantUser" file="test_suite\parkingManage\businessCoupon\test_createGrantUser.py" line="22" name="test_addCoupon[send_data0-expect0]" time="8.336"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_createGrantUser.TestCreateGrantUser" file="test_suite\parkingManage\businessCoupon\test_createGrantUser.py" line="28" name="test_addSell[send_data0-expect0]" time="8.472"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_createGrantUser.TestCreateGrantUser" file="test_suite\parkingManage\businessCoupon\test_createGrantUser.py" line="34" name="test_createGrantUser[send_data0-expect0]" time="5.529"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_createGrantUser.TestCreateGrantUser" file="test_suite\parkingManage\businessCoupon\test_createGrantUser.py" line="42" name="test_grantUserSendCouponToCar[weiXinLogin0-send_data0-expect0]" time="11.413"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_createGrantUser.TestCreateGrantUser" file="test_suite\parkingManage\businessCoupon\test_createGrantUser.py" line="49" name="test_checkCouponSendList[send_data0-expect0]" time="2.528"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_createGrantUser.TestCreateGrantUser" file="test_suite\parkingManage\businessCoupon\test_createGrantUser.py" line="55" name="test_delGrantUser[send_data0-expect0]" time="10.690"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_createGrantUser.TestCreateGrantUser" file="test_suite\parkingManage\businessCoupon\test_createGrantUser.py" line="61" name="test_isDelGrantUser[send_data0-expect0]" time="5.363"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_discountAmountCoupon.TestDiscountAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_discountAmountCoupon.py" line="23" name="test_addCoupon[send_data0-expect0]" time="8.070"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_discountAmountCoupon.TestDiscountAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_discountAmountCoupon.py" line="29" name="test_addSell[send_data0-expect0]" time="8.556"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_discountAmountCoupon.TestDiscountAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_discountAmountCoupon.py" line="35" name="test_sendCoupon[send_data0-expect0]" time="11.200"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_discountAmountCoupon.TestDiscountAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_discountAmountCoupon.py" line="41" name="test_mockCarIn[send_data0-expect0]" time="5.900"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_discountAmountCoupon.TestDiscountAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_discountAmountCoupon.py" line="47" name="test_mockCarOut[send_data0-expect0]" time="7.335"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_discountAmountCoupon.TestDiscountAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_discountAmountCoupon.py" line="53" name="test_sentryPay[send_data0-expect0]" time="15.707"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_discountAmountCoupon.TestDiscountAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_discountAmountCoupon.py" line="59" name="test_checkParkingBillDetail[send_data0-expect0]" time="8.012"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_discountAmountCoupon.TestDiscountAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_discountAmountCoupon.py" line="65" name="test_checkCouponSendList[send_data0-expect0]" time="2.569"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_discountAmountCoupon.TestDiscountAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_discountAmountCoupon.py" line="71" name="test_checkCouponUsedList[send_data0-expect0]" time="7.715"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_editTraderPassword.TestEditTraderPassword" file="test_suite\parkingManage\businessCoupon\test_editTraderPassword.py" line="20" name="test_addTrader[send_data0-expect0]" time="18.748"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_editTraderPassword.TestEditTraderPassword" file="test_suite\parkingManage\businessCoupon\test_editTraderPassword.py" line="28" name="test_editTraderPwd[send_data0-expect0]" time="18.176"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_editTraderPassword.TestEditTraderPassword" file="test_suite\parkingManage\businessCoupon\test_editTraderPassword.py" line="35" name="test_disAbleLoginWeiXin[weiXinLogin0-send_data0-expect0]" time="0.429"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_editTraderPassword.TestEditTraderPassword" file="test_suite\parkingManage\businessCoupon\test_editTraderPassword.py" line="42" name="test_enAbleLoginWeiXin[weiXinLogin0-send_data0-expect0]" time="5.429"><failure message="json.decoder.JSONDecodeError: Expecting value: line 8 column 1 (char 7)">self = &lt;test_editTraderPassword.TestEditTraderPassword object at 0x00000000075132E8&gt;
weiXinLogin = &lt;common.Req.Req object at 0x000000000727C908&gt;
send_data = {&apos;account&apos;: 13596570283, &apos;couponName&apos;: &apos;时间扣减&apos;, &apos;editPwd&apos;: 456789, &apos;name&apos;: &apos;pytest4603&apos;, ...}
expect = {&apos;addTraderMessage&apos;: &apos;新增商家成功&apos;, &apos;deleteTraderMessage&apos;: &apos;删除商家成功&apos;, &apos;disAbleLoginWeiXinAfterDelMsg&apos;: 2, &apos;disAbleLoginWeiXinMsg&apos;: 3, ...}

    @pytest.mark.parametrize(&apos;weiXinLogin&apos;, [{&apos;user&apos;: &apos;${mytest.account}&apos;, &apos;pwd&apos;: &apos;${mytest.editPwd}&apos;}], indirect=True)
    def test_enAbleLoginWeiXin(self,weiXinLogin,send_data,expect):
        &quot;&quot;&quot;新密码商户能登录微信商户端&quot;&quot;&quot;
        re = WeiXin(weiXinLogin).checkTraderCouponPay()
&gt;       result = re.json()

..\test_suite\parkingManage\businessCoupon\test_editTraderPassword.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\requests\models.py:898: in json
    return complexjson.loads(self.text, **kwargs)
D:\Python35\lib\json\__init__.py:319: in loads
    return _default_decoder.decode(s)
D:\Python35\lib\json\decoder.py:339: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;json.decoder.JSONDecoder object at 0x00000000043876D8&gt;
s = &apos;\n\n\n\n\n\n\n&lt;script&gt;\nvar appContext = \&apos;/mgr-weixin\&apos;;\nvar appVersion = \&apos;v3.7.1.1\&apos;;\n&lt;/script&gt;\n&lt;!DOCTYPE html&gt;...&apos;请输入密码\&apos;, 1500);\n            return false;\n        }\n\n        return true;\n    }\n\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;&apos;
idx = 7

    def raw_decode(self, s, idx=0):
        &quot;&quot;&quot;Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        &quot;&quot;&quot;
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError(&quot;Expecting value&quot;, s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 8 column 1 (char 7)

D:\Python35\lib\json\decoder.py:357: JSONDecodeError</failure></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_editTraderPassword.TestEditTraderPassword" file="test_suite\parkingManage\businessCoupon\test_editTraderPassword.py" line="49" name="test_deleteTrader[send_data0-expect0]" time="8.170"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_editTraderPassword.TestEditTraderPassword" file="test_suite\parkingManage\businessCoupon\test_editTraderPassword.py" line="55" name="test_disAbleLoginWeiXinAfterDel[weiXinLogin0-send_data0-expect0]" time="0.469"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_fixedAmountCoupon.TestFixedAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_fixedAmountCoupon.py" line="23" name="test_addCoupon[send_data0-expect0]" time="8.296"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_fixedAmountCoupon.TestFixedAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_fixedAmountCoupon.py" line="29" name="test_addSell[send_data0-expect0]" time="9.047"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_fixedAmountCoupon.TestFixedAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_fixedAmountCoupon.py" line="35" name="test_sendCoupon[send_data0-expect0]" time="12.219"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_fixedAmountCoupon.TestFixedAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_fixedAmountCoupon.py" line="41" name="test_mockCarIn[send_data0-expect0]" time="6.035"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_fixedAmountCoupon.TestFixedAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_fixedAmountCoupon.py" line="47" name="test_mockCarOut[send_data0-expect0]" time="7.466"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_fixedAmountCoupon.TestFixedAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_fixedAmountCoupon.py" line="53" name="test_sentryPay[send_data0-expect0]" time="15.821"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_fixedAmountCoupon.TestFixedAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_fixedAmountCoupon.py" line="59" name="test_checkParkingBillDetail[send_data0-expect0]" time="8.877"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_fixedAmountCoupon.TestFixedAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_fixedAmountCoupon.py" line="65" name="test_checkCouponSendList[send_data0-expect0]" time="2.550"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_fixedAmountCoupon.TestFixedAmountCoupon" file="test_suite\parkingManage\businessCoupon\test_fixedAmountCoupon.py" line="71" name="test_checkCouponUsedList[send_data0-expect0]" time="8.049"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_freeCoupon.TestFreeCoupon" file="test_suite\parkingManage\businessCoupon\test_freeCoupon.py" line="21" name="test_addCoupon[send_data0-expect0]" time="8.114"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_freeCoupon.TestFreeCoupon" file="test_suite\parkingManage\businessCoupon\test_freeCoupon.py" line="27" name="test_addSell[send_data0-expect0]" time="8.369"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_freeCoupon.TestFreeCoupon" file="test_suite\parkingManage\businessCoupon\test_freeCoupon.py" line="33" name="test_sendCoupon[send_data0-expect0]" time="12.687"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_freeCoupon.TestFreeCoupon" file="test_suite\parkingManage\businessCoupon\test_freeCoupon.py" line="39" name="test_mockCarIn[send_data0-expect0]" time="6.023"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_freeCoupon.TestFreeCoupon" file="test_suite\parkingManage\businessCoupon\test_freeCoupon.py" line="45" name="test_mockCarOut[send_data0-expect0]" time="7.494"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_freeCoupon.TestFreeCoupon" file="test_suite\parkingManage\businessCoupon\test_freeCoupon.py" line="51" name="test_checkParkingBillDetail[send_data0-expect0]" time="7.984"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_freeCoupon.TestFreeCoupon" file="test_suite\parkingManage\businessCoupon\test_freeCoupon.py" line="57" name="test_checkCouponSendList[send_data0-expect0]" time="3.862"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_freeCoupon.TestFreeCoupon" file="test_suite\parkingManage\businessCoupon\test_freeCoupon.py" line="63" name="test_checkCouponUsedList[send_data0-expect0]" time="7.624"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverCouponUsed.TestMoreCoverCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverCouponUsed.py" line="24" name="test_mockCarIn[send_data0-expect0]" time="5.889"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverCouponUsed.TestMoreCoverCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverCouponUsed.py" line="30" name="test_sendCouponA[send_data0-expect0]" time="12.852"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverCouponUsed.TestMoreCoverCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverCouponUsed.py" line="36" name="test_sendCouponB[send_data0-expect0]" time="11.851"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverCouponUsed.TestMoreCoverCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverCouponUsed.py" line="41" name="test_sendCouponC[send_data0-expect0]" time="11.937"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverCouponUsed.TestMoreCoverCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverCouponUsed.py" line="46" name="test_sendCouponD[send_data0-expect0]" time="13.057"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverCouponUsed.TestMoreCoverCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverCouponUsed.py" line="51" name="test_sendCouponEE[send_data0-expect0]" time="12.062"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverCouponUsed.TestMoreCoverCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverCouponUsed.py" line="57" name="test_mockCarOut[send_data0-expect0]" time="7.564"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverCouponUsed.TestMoreCoverCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverCouponUsed.py" line="63" name="test_sentryPay[send_data0-expect0]" time="17.758"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverCouponUsed.TestMoreCoverCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverCouponUsed.py" line="69" name="test_checkParkingBillDetail[send_data0-expect0]" time="7.665"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverCouponUsed.TestMoreCoverCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverCouponUsed.py" line="75" name="test_checkCouponSendList[send_data0-expect0]" time="3.329"><failure message="KeyError: &apos;rows&apos;">self = &lt;test_moreCoverCouponUsed.TestMoreCoverCouponUsed object at 0x0000000007604898&gt;
userLogin = &lt;common.Req.Req object at 0x000000000727A9B0&gt;
send_data = {&apos;carNum&apos;: &apos;粤H73850&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;couponNameA&apos;: &apos;金额扣减0.3元&apos;, &apos;couponNameB&apos;: &apos;金额扣减0.5元&apos;, ...}
expect = {&apos;checkCouponGrantListCount&apos;: 5, &apos;checkCouponGrantListMessage&apos;: &apos;金额扣减0.7元&apos;, &apos;checkParkingBillDetailMessage&apos;: &apos;粤H73850&apos;, &apos;checkSerialListAMessage&apos;: &apos;金额扣减0.3元&apos;, ...}

    def test_checkCouponSendList(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看发放流水&quot;&quot;&quot;
        re = Coupon(userLogin).getCouponGrantList(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
        result = re.json()
&gt;       Assertions().assert_in_text(result[&apos;rows&apos;], expect[&quot;checkCouponGrantListMessage&quot;])
E       KeyError: &apos;rows&apos;

..\test_suite\parkingManage\businessCoupon\test_moreCoverCouponUsed.py:80: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverCouponUsed.TestMoreCoverCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverCouponUsed.py" line="82" name="test_checkCouponUsedList[send_data0-expect0]" time="7.401"><failure message="AssertionError">self = &lt;test_moreCoverCouponUsed.TestMoreCoverCouponUsed object at 0x0000000007283BE0&gt;
userLogin = &lt;common.Req.Req object at 0x00000000075F5860&gt;
send_data = {&apos;carNum&apos;: &apos;粤H73850&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;couponNameA&apos;: &apos;金额扣减0.3元&apos;, &apos;couponNameB&apos;: &apos;金额扣减0.5元&apos;, ...}
expect = {&apos;checkCouponGrantListCount&apos;: 5, &apos;checkCouponGrantListMessage&apos;: &apos;金额扣减0.7元&apos;, &apos;checkParkingBillDetailMessage&apos;: &apos;粤H73850&apos;, &apos;checkSerialListAMessage&apos;: &apos;金额扣减0.3元&apos;, ...}

    def test_checkCouponUsedList(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看使用流水&quot;&quot;&quot;
        re = Coupon(userLogin).getCouponSerialList(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
        result = re.json()[&apos;data&apos;][&apos;rows&apos;]
&gt;       Assertions().assert_in_text(result, expect[&quot;checkSerialListAMessage&quot;])

..\test_suite\parkingManage\businessCoupon\test_moreCoverCouponUsed.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x0000000007624A90&gt;
body = [{&apos;carCode&apos;: &apos;粤H73850&apos;, &apos;cardCode&apos;: &apos;&apos;, &apos;code&apos;: &apos;GEBUZDL7EIL7&apos;, &apos;couponType&apos;: &apos;金额扣减券&apos;, ...}]
expected_msg = &apos;金额扣减0.3元&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverTimeCouponUsed.TestMoreCoverTimeCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverTimeCouponUsed.py" line="24" name="test_additionalRecording[send_data0-expect0]" time="11.153"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverTimeCouponUsed.TestMoreCoverTimeCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverTimeCouponUsed.py" line="30" name="test_sendCouponA[send_data0-expect0]" time="12.120"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverTimeCouponUsed.TestMoreCoverTimeCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverTimeCouponUsed.py" line="36" name="test_sendCouponB[send_data0-expect0]" time="12.100"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverTimeCouponUsed.TestMoreCoverTimeCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverTimeCouponUsed.py" line="41" name="test_sendCouponC[send_data0-expect0]" time="12.175"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverTimeCouponUsed.TestMoreCoverTimeCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverTimeCouponUsed.py" line="46" name="test_sendCouponD[send_data0-expect0]" time="12.707"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverTimeCouponUsed.TestMoreCoverTimeCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverTimeCouponUsed.py" line="51" name="test_sendCouponEE[send_data0-expect0]" time="12.138"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverTimeCouponUsed.TestMoreCoverTimeCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverTimeCouponUsed.py" line="57" name="test_mockCarOut[send_data0-expect0]" time="8.629"><failure message="AssertionError">self = &lt;test_moreCoverTimeCouponUsed.TestMoreCoverTimeCouponUsed object at 0x0000000007505BE0&gt;
send_data = {&apos;carNum&apos;: &apos;粤K15396&apos;, &apos;carNumA&apos;: &apos;粤K15396,粤B53896&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;couponNameA&apos;: &apos;时间扣减1分钟&apos;, ...}
expect = {&apos;additionalRecordingMsg&apos;: 0, &apos;checkCouponGrantListCount&apos;: 5, &apos;checkCouponGrantListMessage&apos;: &apos;粤K15396&apos;, &apos;checkParkingBillDetailMessage&apos;: &apos;粤K15396&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟车辆出场&quot;&quot;&quot;
        re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])
        result = re.json()
&gt;       Assertions().assert_in_text(result, expect[&quot;mockCarOutMessage&quot;])

..\test_suite\parkingManage\businessCoupon\test_moreCoverTimeCouponUsed.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x00000000076168D0&gt;
body = {&apos;biz_content&apos;: {&apos;cmd&apos;: &apos;PRE_CAR_OUT&apos;, &apos;job_id&apos;: &apos;795211ea9bd07427eac14803&apos;, &apos;job_msg&apos;: &apos;ok&apos;, &apos;jod_code&apos;: 0, ...}, &apos;code&apos;: 0, &apos;message_id&apos;: &apos;795211eaa9387427eac14803&apos;, &apos;msg&apos;: &apos;ok&apos;, ...}
expected_msg = &apos;粤k15396\\\\扫码缴费8元&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverTimeCouponUsed.TestMoreCoverTimeCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverTimeCouponUsed.py" line="63" name="test_sentryPay[send_data0-expect0]" time="17.360"><failure message="AssertionError">self = &lt;test_moreCoverTimeCouponUsed.TestMoreCoverTimeCouponUsed object at 0x00000000072944A8&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000070E6C50&gt;
send_data = {&apos;carNum&apos;: &apos;粤K15396&apos;, &apos;carNumA&apos;: &apos;粤K15396,粤B53896&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;couponNameA&apos;: &apos;时间扣减1分钟&apos;, ...}
expect = {&apos;additionalRecordingMsg&apos;: 0, &apos;checkCouponGrantListCount&apos;: 5, &apos;checkCouponGrantListMessage&apos;: &apos;粤K15396&apos;, &apos;checkParkingBillDetailMessage&apos;: &apos;粤K15396&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端缴费&quot;&quot;&quot;
        re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&quot;carNum&quot;],send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)
        result = re.json()
&gt;       Assertions().assert_in_text(result, expect[&quot;sentryPayMessage&quot;])

..\test_suite\parkingManage\businessCoupon\test_moreCoverTimeCouponUsed.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000750EE80&gt;
body = {&apos;biz_content&apos;: {&apos;cmd&apos;: &apos;OPEN_GATE&apos;, &apos;job_id&apos;: &apos;795211ea9bd07427eac14803&apos;, &apos;job_msg&apos;: &apos;ok&apos;, &apos;jod_code&apos;: 0, ...}, &apos;code&apos;: 0, &apos;message_id&apos;: &apos;795211ea85367427eac14803&apos;, &apos;msg&apos;: &apos;ok&apos;, ...}
expected_msg = &apos;已收费8元\\\\一路顺风&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverTimeCouponUsed.TestMoreCoverTimeCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverTimeCouponUsed.py" line="69" name="test_checkParkingBillDetail[send_data0-expect0]" time="7.663"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverTimeCouponUsed.TestMoreCoverTimeCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverTimeCouponUsed.py" line="75" name="test_checkCouponSendList[send_data0-expect0]" time="3.436"><failure message="KeyError: &apos;rows&apos;">self = &lt;test_moreCoverTimeCouponUsed.TestMoreCoverTimeCouponUsed object at 0x00000000074EF4A8&gt;
userLogin = &lt;common.Req.Req object at 0x000000000764BE48&gt;
send_data = {&apos;carNum&apos;: &apos;粤K15396&apos;, &apos;carNumA&apos;: &apos;粤K15396,粤B53896&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;couponNameA&apos;: &apos;时间扣减1分钟&apos;, ...}
expect = {&apos;additionalRecordingMsg&apos;: 0, &apos;checkCouponGrantListCount&apos;: 5, &apos;checkCouponGrantListMessage&apos;: &apos;粤K15396&apos;, &apos;checkParkingBillDetailMessage&apos;: &apos;粤K15396&apos;, ...}

    def test_checkCouponSendList(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看发放流水&quot;&quot;&quot;
        re = Coupon(userLogin).getCouponGrantList(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
        result = re.json()
&gt;       Assertions().assert_in_text(result[&apos;rows&apos;], expect[&quot;checkCouponGrantListMessage&quot;])
E       KeyError: &apos;rows&apos;

..\test_suite\parkingManage\businessCoupon\test_moreCoverTimeCouponUsed.py:80: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_moreCoverTimeCouponUsed.TestMoreCoverTimeCouponUsed" file="test_suite\parkingManage\businessCoupon\test_moreCoverTimeCouponUsed.py" line="82" name="test_checkCouponUsedList[send_data0-expect0]" time="7.741"><failure message="AssertionError">self = &lt;test_moreCoverTimeCouponUsed.TestMoreCoverTimeCouponUsed object at 0x00000000074E4160&gt;
userLogin = &lt;common.Req.Req object at 0x00000000070D9DA0&gt;
send_data = {&apos;carNum&apos;: &apos;粤K15396&apos;, &apos;carNumA&apos;: &apos;粤K15396,粤B53896&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;couponNameA&apos;: &apos;时间扣减1分钟&apos;, ...}
expect = {&apos;additionalRecordingMsg&apos;: 0, &apos;checkCouponGrantListCount&apos;: 5, &apos;checkCouponGrantListMessage&apos;: &apos;粤K15396&apos;, &apos;checkParkingBillDetailMessage&apos;: &apos;粤K15396&apos;, ...}

    def test_checkCouponUsedList(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看使用流水&quot;&quot;&quot;
        re = Coupon(userLogin).getCouponSerialList(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
        result = re.json()[&apos;data&apos;][&apos;rows&apos;]
&gt;       Assertions().assert_in_text(result, expect[&quot;checkSerialListAMessage&quot;])

..\test_suite\parkingManage\businessCoupon\test_moreCoverTimeCouponUsed.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x0000000007669160&gt;
body = [{&apos;carCode&apos;: &apos;粤K15396&apos;, &apos;cardCode&apos;: None, &apos;code&apos;: &apos;GECT8IFSFKZC&apos;, &apos;couponType&apos;: &apos;时间券&apos;, ...}]
expected_msg = &apos;时间扣减1分钟&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponCover.TestReduceAmountCouponCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponCover.py" line="22" name="test_addCoupon[send_data0-expect0]" time="9.079"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponCover.TestReduceAmountCouponCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponCover.py" line="28" name="test_addSell[send_data0-expect0]" time="8.379"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponCover.TestReduceAmountCouponCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponCover.py" line="34" name="test_sendCoupon[send_data0-expect0]" time="13.568"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponCover.TestReduceAmountCouponCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponCover.py" line="40" name="test_mockCarIn[send_data0-expect0]" time="5.950"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponCover.TestReduceAmountCouponCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponCover.py" line="46" name="test_mockCarOut[send_data0-expect0]" time="13.916"><failure message="AssertionError">self = &lt;test_reduceAmountCouponCover.TestReduceAmountCouponCover object at 0x000000000764BF98&gt;
send_data = {&apos;carNum&apos;: &apos;粤P37516&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;couponName&apos;: &apos;api金额扣减可叠加券9036&apos;, &apos;couponType&apos;: &apos;金额扣减券&apos;, ...}
expect = {&apos;addCouponMessage&apos;: &apos;ok&apos;, &apos;addSellMessage&apos;: &apos;操作成功&apos;, &apos;checkCouponGrantListMessage&apos;: &apos;api金额扣减可叠加券9036&apos;, &apos;checkParkingBillDetailMessage&apos;: &apos;粤P37516&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟车辆出场&quot;&quot;&quot;
        re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])
        result = re.json()
&gt;       Assertions().assert_in_text(result, expect[&quot;mockCarOutMessage&quot;])

..\test_suite\parkingManage\businessCoupon\test_reduceAmountCouponCover.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000727FA20&gt;
body = {&apos;biz_content&apos;: {&apos;cmd&apos;: &apos;PRE_CAR_OUT&apos;, &apos;job_id&apos;: &apos;795211ea9f8d7427eac14803&apos;, &apos;job_msg&apos;: &quot;解析平台响应数据出错，任务--&gt;795211ea9f8d7.../in-out/out&apos;},报错--&gt;&apos;data&apos;&quot;, &apos;jod_code&apos;: 1, ...}, &apos;code&apos;: 0, &apos;message_id&apos;: &apos;795211ea91097427eac14803&apos;, &apos;msg&apos;: &apos;ok&apos;, ...}
expected_msg = &apos;粤p37516\\\\扫码缴费2.7元&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponCover.TestReduceAmountCouponCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponCover.py" line="52" name="test_sentryPay[send_data0-expect0]" time="0.921"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_reduceAmountCouponCover.TestReduceAmountCouponCover object at 0x00000000070F6EB8&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007682748&gt;
send_data = {&apos;carNum&apos;: &apos;粤P37516&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;couponName&apos;: &apos;api金额扣减可叠加券9036&apos;, &apos;couponType&apos;: &apos;金额扣减券&apos;, ...}
expect = {&apos;addCouponMessage&apos;: &apos;ok&apos;, &apos;addSellMessage&apos;: &apos;操作成功&apos;, &apos;checkCouponGrantListMessage&apos;: &apos;api金额扣减可叠加券9036&apos;, &apos;checkParkingBillDetailMessage&apos;: &apos;粤P37516&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端缴费&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&quot;carNum&quot;],send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\businessCoupon\test_reduceAmountCouponCover.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x000000000791DBA8&gt;
carNum = &apos;粤P37516&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponCover.TestReduceAmountCouponCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponCover.py" line="58" name="test_checkParkingBillDetail[send_data0-expect0]" time="8.459"><failure message="AssertionError">self = &lt;test_reduceAmountCouponCover.TestReduceAmountCouponCover object at 0x00000000070D9DA0&gt;
userLogin = &lt;common.Req.Req object at 0x00000000073D7F60&gt;
send_data = {&apos;carNum&apos;: &apos;粤P37516&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;couponName&apos;: &apos;api金额扣减可叠加券9036&apos;, &apos;couponType&apos;: &apos;金额扣减券&apos;, ...}
expect = {&apos;addCouponMessage&apos;: &apos;ok&apos;, &apos;addSellMessage&apos;: &apos;操作成功&apos;, &apos;checkCouponGrantListMessage&apos;: &apos;api金额扣减可叠加券9036&apos;, &apos;checkParkingBillDetailMessage&apos;: &apos;粤P37516&apos;, ...}

    def test_checkParkingBillDetail(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看收费流水&quot;&quot;&quot;
        re = Information(userLogin).getParkingBillDetail(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
        result = re.json()[&apos;data&apos;][&apos;rows&apos;]
&gt;       Assertions().assert_in_text(result, expect[&quot;checkParkingBillDetailMessage&quot;])

..\test_suite\parkingManage\businessCoupon\test_reduceAmountCouponCover.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x00000000069DAB38&gt;, body = []
expected_msg = &apos;粤p37516&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponCover.TestReduceAmountCouponCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponCover.py" line="64" name="test_checkCouponSendList[send_data0-expect0]" time="2.906"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponCover.TestReduceAmountCouponCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponCover.py" line="70" name="test_checkCouponUsedList[send_data0-expect0]" time="10.254"><failure message="AssertionError">self = &lt;test_reduceAmountCouponCover.TestReduceAmountCouponCover object at 0x0000000007687BA8&gt;
userLogin = &lt;common.Req.Req object at 0x000000000794ABA8&gt;
send_data = {&apos;carNum&apos;: &apos;粤P37516&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;couponName&apos;: &apos;api金额扣减可叠加券9036&apos;, &apos;couponType&apos;: &apos;金额扣减券&apos;, ...}
expect = {&apos;addCouponMessage&apos;: &apos;ok&apos;, &apos;addSellMessage&apos;: &apos;操作成功&apos;, &apos;checkCouponGrantListMessage&apos;: &apos;api金额扣减可叠加券9036&apos;, &apos;checkParkingBillDetailMessage&apos;: &apos;粤P37516&apos;, ...}

    def test_checkCouponUsedList(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看使用流水&quot;&quot;&quot;
        re = Coupon(userLogin).getCouponSerialList(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
        result = re.json()[&apos;data&apos;][&apos;rows&apos;]
&gt;       Assertions().assert_in_text(result, expect[&quot;checkSerialListMessage&quot;])

..\test_suite\parkingManage\businessCoupon\test_reduceAmountCouponCover.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000792D0B8&gt;, body = []
expected_msg = &apos;api金额扣减可叠加券9036&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponNoCover.TestReduceAmountCouponNoCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponNoCover.py" line="24" name="test_addCoupon[send_data0-expect0]" time="9.139"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponNoCover.TestReduceAmountCouponNoCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponNoCover.py" line="30" name="test_addSell[send_data0-expect0]" time="9.898"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponNoCover.TestReduceAmountCouponNoCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponNoCover.py" line="36" name="test_sendCoupon[send_data0-expect0]" time="11.760"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponNoCover.TestReduceAmountCouponNoCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponNoCover.py" line="42" name="test_mockCarIn[send_data0-expect0]" time="9.607"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponNoCover.TestReduceAmountCouponNoCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponNoCover.py" line="48" name="test_mockCarOut[send_data0-expect0]" time="8.917"><failure message="AssertionError">self = &lt;test_reduceAmountCouponNoCover.TestReduceAmountCouponNoCover object at 0x0000000006AD5278&gt;
send_data = {&apos;carNum&apos;: &apos;粤Q61924&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;couponName&apos;: &apos;api金额扣减可叠加6598&apos;, &apos;couponType&apos;: &apos;金额扣减券&apos;, ...}
expect = {&apos;addCouponMessage&apos;: &apos;ok&apos;, &apos;addSellMessage&apos;: &apos;操作成功&apos;, &apos;checkCouponGrantListMessage&apos;: &apos;api金额扣减可叠加6598&apos;, &apos;checkParkingBillDetailMessage&apos;: &apos;粤Q61924&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟车辆出场&quot;&quot;&quot;
        re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])
        result = re.json()
&gt;       Assertions().assert_in_text(result, expect[&quot;mockCarOutMessage&quot;])

..\test_suite\parkingManage\businessCoupon\test_reduceAmountCouponNoCover.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x0000000007911C50&gt;
body = {&apos;biz_content&apos;: {&apos;cmd&apos;: &apos;PRE_CAR_OUT&apos;, &apos;job_id&apos;: &apos;795211eaae357427eac14803&apos;, &apos;job_msg&apos;: &apos;ok&apos;, &apos;jod_code&apos;: 0, ...}, &apos;code&apos;: 0, &apos;message_id&apos;: &apos;795211eabfa67427eac14803&apos;, &apos;msg&apos;: &apos;ok&apos;, ...}
expected_msg = &apos;粤q61924\\\\扫码缴费3元&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponNoCover.TestReduceAmountCouponNoCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponNoCover.py" line="54" name="test_sentryPay[send_data0-expect0]" time="0.581"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_reduceAmountCouponNoCover.TestReduceAmountCouponNoCover object at 0x0000000006ADAD68&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007682160&gt;
send_data = {&apos;carNum&apos;: &apos;粤Q61924&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;couponName&apos;: &apos;api金额扣减可叠加6598&apos;, &apos;couponType&apos;: &apos;金额扣减券&apos;, ...}
expect = {&apos;addCouponMessage&apos;: &apos;ok&apos;, &apos;addSellMessage&apos;: &apos;操作成功&apos;, &apos;checkCouponGrantListMessage&apos;: &apos;api金额扣减可叠加6598&apos;, &apos;checkParkingBillDetailMessage&apos;: &apos;粤Q61924&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端缴费&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&quot;carNum&quot;],send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\businessCoupon\test_reduceAmountCouponNoCover.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007695BE0&gt;
carNum = &apos;粤Q61924&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponNoCover.TestReduceAmountCouponNoCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponNoCover.py" line="60" name="test_checkParkingBillDetail[send_data0-expect0]" time="8.925"><failure message="AssertionError">self = &lt;test_reduceAmountCouponNoCover.TestReduceAmountCouponNoCover object at 0x0000000007916F28&gt;
userLogin = &lt;common.Req.Req object at 0x000000000793F470&gt;
send_data = {&apos;carNum&apos;: &apos;粤Q61924&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;couponName&apos;: &apos;api金额扣减可叠加6598&apos;, &apos;couponType&apos;: &apos;金额扣减券&apos;, ...}
expect = {&apos;addCouponMessage&apos;: &apos;ok&apos;, &apos;addSellMessage&apos;: &apos;操作成功&apos;, &apos;checkCouponGrantListMessage&apos;: &apos;api金额扣减可叠加6598&apos;, &apos;checkParkingBillDetailMessage&apos;: &apos;粤Q61924&apos;, ...}

    def test_checkParkingBillDetail(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看收费流水&quot;&quot;&quot;
        re = Information(userLogin).getParkingBillDetail(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
        result = re.json()[&apos;data&apos;][&apos;rows&apos;]
&gt;       Assertions().assert_in_text(result, expect[&quot;checkParkingBillDetailMessage&quot;])

..\test_suite\parkingManage\businessCoupon\test_reduceAmountCouponNoCover.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000768F630&gt;, body = []
expected_msg = &apos;粤q61924&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponNoCover.TestReduceAmountCouponNoCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponNoCover.py" line="66" name="test_checkCouponSendList[send_data0-expect0]" time="2.580"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_reduceAmountCouponNoCover.TestReduceAmountCouponNoCover" file="test_suite\parkingManage\businessCoupon\test_reduceAmountCouponNoCover.py" line="72" name="test_checkCouponUsedList[send_data0-expect0]" time="8.977"><failure message="AssertionError">self = &lt;test_reduceAmountCouponNoCover.TestReduceAmountCouponNoCover object at 0x00000000076A6630&gt;
userLogin = &lt;common.Req.Req object at 0x00000000076B67F0&gt;
send_data = {&apos;carNum&apos;: &apos;粤Q61924&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;couponName&apos;: &apos;api金额扣减可叠加6598&apos;, &apos;couponType&apos;: &apos;金额扣减券&apos;, ...}
expect = {&apos;addCouponMessage&apos;: &apos;ok&apos;, &apos;addSellMessage&apos;: &apos;操作成功&apos;, &apos;checkCouponGrantListMessage&apos;: &apos;api金额扣减可叠加6598&apos;, &apos;checkParkingBillDetailMessage&apos;: &apos;粤Q61924&apos;, ...}

    def test_checkCouponUsedList(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看使用流水&quot;&quot;&quot;
        re = Coupon(userLogin).getCouponSerialList(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
        result = re.json()[&apos;data&apos;][&apos;rows&apos;]
&gt;       Assertions().assert_in_text(result, expect[&quot;checkSerialListMessage&quot;])

..\test_suite\parkingManage\businessCoupon\test_reduceAmountCouponNoCover.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000769E0F0&gt;, body = []
expected_msg = &apos;api金额扣减可叠加6598&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCoupon.TestTimeCoupon" file="test_suite\parkingManage\businessCoupon\test_timeCoupon.py" line="21" name="test_addCoupon[send_data0-expect0]" time="9.616"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCoupon.TestTimeCoupon" file="test_suite\parkingManage\businessCoupon\test_timeCoupon.py" line="27" name="test_addSell[send_data0-expect0]" time="8.363"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCoupon.TestTimeCoupon" file="test_suite\parkingManage\businessCoupon\test_timeCoupon.py" line="33" name="test_sendCoupon[send_data0-expect0]" time="12.327"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCoupon.TestTimeCoupon" file="test_suite\parkingManage\businessCoupon\test_timeCoupon.py" line="39" name="test_mockCarIn[send_data0-expect0]" time="6.649"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCoupon.TestTimeCoupon" file="test_suite\parkingManage\businessCoupon\test_timeCoupon.py" line="45" name="test_mockCarOut[send_data0-expect0]" time="11.311"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCoupon.TestTimeCoupon" file="test_suite\parkingManage\businessCoupon\test_timeCoupon.py" line="51" name="test_checkParkingBillDetail[send_data0-expect0]" time="8.106"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCoupon.TestTimeCoupon" file="test_suite\parkingManage\businessCoupon\test_timeCoupon.py" line="57" name="test_checkCouponSendList[send_data0-expect0]" time="3.041"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCoupon.TestTimeCoupon" file="test_suite\parkingManage\businessCoupon\test_timeCoupon.py" line="63" name="test_checkUsedList[send_data0-expect0]" time="7.903"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCouponCover.TestTimeCouponCover" file="test_suite\parkingManage\businessCoupon\test_timeCouponCover.py" line="21" name="test_addCoupon[send_data0-expect0]" time="9.394"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCouponCover.TestTimeCouponCover" file="test_suite\parkingManage\businessCoupon\test_timeCouponCover.py" line="27" name="test_addSell[send_data0-expect0]" time="8.651"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCouponCover.TestTimeCouponCover" file="test_suite\parkingManage\businessCoupon\test_timeCouponCover.py" line="33" name="test_sendCoupon[send_data0-expect0]" time="12.625"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCouponCover.TestTimeCouponCover" file="test_suite\parkingManage\businessCoupon\test_timeCouponCover.py" line="39" name="test_mockCarIn[send_data0-expect0]" time="6.344"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCouponCover.TestTimeCouponCover" file="test_suite\parkingManage\businessCoupon\test_timeCouponCover.py" line="45" name="test_mockCarOut[send_data0-expect0]" time="8.654"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCouponCover.TestTimeCouponCover" file="test_suite\parkingManage\businessCoupon\test_timeCouponCover.py" line="51" name="test_checkParkingBillDetail[send_data0-expect0]" time="9.010"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCouponCover.TestTimeCouponCover" file="test_suite\parkingManage\businessCoupon\test_timeCouponCover.py" line="57" name="test_checkCouponSendList[send_data0-expect0]" time="3.010"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_timeCouponCover.TestTimeCouponCover" file="test_suite\parkingManage\businessCoupon\test_timeCouponCover.py" line="63" name="test_checkCouponUsedList[send_data0-expect0]" time="8.978"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_trader.TestTrader" file="test_suite\parkingManage\businessCoupon\test_trader.py" line="21" name="test_addTrader[send_data0-expect0]" time="0.000"><skipped message="bug号：15503" type="pytest.skip">test_suite\parkingManage\businessCoupon\test_trader.py:22: bug号：15503</skipped></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_trader.TestTrader" file="test_suite\parkingManage\businessCoupon\test_trader.py" line="29" name="test_disAbleTrader[send_data0-expect0]" time="0.001"><skipped message="bug号：15503" type="pytest.skip">test_suite\parkingManage\businessCoupon\test_trader.py:30: bug号：15503</skipped></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_trader.TestTrader" file="test_suite\parkingManage\businessCoupon\test_trader.py" line="35" name="test_disAbleLoginWeiXin[weiXinLogin0-send_data0-expect0]" time="0.002"><skipped message="bug号：15503" type="pytest.skip">test_suite\parkingManage\businessCoupon\test_trader.py:36: bug号：15503</skipped></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_trader.TestTrader" file="test_suite\parkingManage\businessCoupon\test_trader.py" line="42" name="test_enableTrader[send_data0-expect0]" time="0.001"><skipped message="bug号：15503" type="pytest.skip">test_suite\parkingManage\businessCoupon\test_trader.py:43: bug号：15503</skipped></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_trader.TestTrader" file="test_suite\parkingManage\businessCoupon\test_trader.py" line="48" name="test_enableLoginWeiXin[weiXinLogin0-send_data0-expect0]" time="0.002"><skipped message="bug号：15503" type="pytest.skip">test_suite\parkingManage\businessCoupon\test_trader.py:49: bug号：15503</skipped></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_trader.TestTrader" file="test_suite\parkingManage\businessCoupon\test_trader.py" line="55" name="test_editTrader[send_data0-expect0]" time="0.000"><skipped message="bug号：15503" type="pytest.skip">test_suite\parkingManage\businessCoupon\test_trader.py:56: bug号：15503</skipped></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_trader.TestTrader" file="test_suite\parkingManage\businessCoupon\test_trader.py" line="62" name="test_checkEditTrader[send_data0-expect0]" time="0.001"><skipped message="bug号：15503" type="pytest.skip">test_suite\parkingManage\businessCoupon\test_trader.py:63: bug号：15503</skipped></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_trader.TestTrader" file="test_suite\parkingManage\businessCoupon\test_trader.py" line="68" name="test_deleteTrader[send_data0-expect0]" time="0.001"><skipped message="bug号：15503" type="pytest.skip">test_suite\parkingManage\businessCoupon\test_trader.py:69: bug号：15503</skipped></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_trader.TestTrader" file="test_suite\parkingManage\businessCoupon\test_trader.py" line="74" name="test_checkDeleteTrader[send_data0-expect0]" time="0.001"><skipped message="bug号：15503" type="pytest.skip">test_suite\parkingManage\businessCoupon\test_trader.py:75: bug号：15503</skipped></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_traderSell.TestTraderSell" file="test_suite\parkingManage\businessCoupon\test_traderSell.py" line="20" name="test_addTrader[send_data0-expect0]" time="17.902"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_traderSell.TestTraderSell" file="test_suite\parkingManage\businessCoupon\test_traderSell.py" line="27" name="test_traderSell[send_data0-expect0]" time="10.006"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_traderSell.TestTraderSell" file="test_suite\parkingManage\businessCoupon\test_traderSell.py" line="33" name="test_grantCouponToCar[weiXinLogin0-send_data0-expect0]" time="12.444"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_traderSell.TestTraderSell" file="test_suite\parkingManage\businessCoupon\test_traderSell.py" line="40" name="test_deleteTrader[send_data0-expect0]" time="8.453"></testcase><testcase classname="test_suite.parkingManage.businessCoupon.test_traderSell.TestTraderSell" file="test_suite\parkingManage\businessCoupon\test_traderSell.py" line="46" name="test_checkDeleteTrader[send_data0-expect0]" time="5.258"></testcase><testcase classname="test_suite.parkingManage.cendutySeat.test_cendutySeatUser.TestCendutySeatUser" file="test_suite\parkingManage\cendutySeat\test_cendutySeatUser.py" line="20" name="test_addCendutySeat[send_data0-expect0]" time="16.348"></testcase><testcase classname="test_suite.parkingManage.cendutySeat.test_cendutySeatUser.TestCendutySeatUser" file="test_suite\parkingManage\cendutySeat\test_cendutySeatUser.py" line="26" name="test_lockCendutySeat[send_data0-expect0]" time="14.854"></testcase><testcase classname="test_suite.parkingManage.cendutySeat.test_cendutySeatUser.TestCendutySeatUser" file="test_suite\parkingManage\cendutySeat\test_cendutySeatUser.py" line="32" name="test_startCendutySeat[send_data0-expect0]" time="14.837"></testcase><testcase classname="test_suite.parkingManage.cendutySeat.test_cendutySeatUser.TestCendutySeatUser" file="test_suite\parkingManage\cendutySeat\test_cendutySeatUser.py" line="38" name="test_updateCendutySeat[send_data0-expect0]" time="15.955"></testcase><testcase classname="test_suite.parkingManage.cendutySeat.test_cendutySeatUser.TestCendutySeatUser" file="test_suite\parkingManage\cendutySeat\test_cendutySeatUser.py" line="44" name="test_checkEditCendutySeatList[send_data0-expect0]" time="8.139"></testcase><testcase classname="test_suite.parkingManage.cendutySeat.test_cendutySeatUser.TestCendutySeatUser" file="test_suite\parkingManage\cendutySeat\test_cendutySeatUser.py" line="50" name="test_deleteCendutySeat[send_data0-expect0]" time="16.303"></testcase><testcase classname="test_suite.parkingManage.cendutySeat.test_cendutySeatUser.TestCendutySeatUser" file="test_suite\parkingManage\cendutySeat\test_cendutySeatUser.py" line="56" name="test_checkDeleteCendutySeatList[send_data0-expect0]" time="7.716"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchOpenMonthTicket.TestBatchOpenMonthTicket" file="test_suite\parkingManage\monthTicket\test_batchOpenMonthTicket.py" line="20" name="test_createMonthTicketConfig[send_data0-expect0]" time="14.393"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchOpenMonthTicket.TestBatchOpenMonthTicket" file="test_suite\parkingManage\monthTicket\test_batchOpenMonthTicket.py" line="26" name="test_batchOpenMonthTicketBill[send_data0-expect0]" time="8.563"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchOpenMonthTicket.TestBatchOpenMonthTicket" file="test_suite\parkingManage\monthTicket\test_batchOpenMonthTicket.py" line="32" name="test_checkMonthTicketBillList[send_data0-expect0]" time="2.630"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchOpenMonthTicket.TestBatchOpenMonthTicket" file="test_suite\parkingManage\monthTicket\test_batchOpenMonthTicket.py" line="38" name="test_mockCarIn[send_data0-expect0]" time="5.055"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_batchOpenMonthTicket.TestBatchOpenMonthTicket object at 0x00000000076CB3C8&gt;
send_data = {&apos;carNum&apos;: &apos;粤K69143&apos;, &apos;combinedStatus&apos;: &apos;生效中&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;batchOpenMonthTicketBillMsg&apos;: True, &apos;checkMonthTicketBillListMsg&apos;: &apos;粤K69143&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤K69143\\\\批量月票2408&apos;, ...}

    def test_mockCarIn(self,send_data,expect):
        &quot;&quot;&quot;模拟车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_batchOpenMonthTicket.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000076CB6A0&gt;
carNum = &apos;粤K69143&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchOpenMonthTicket.TestBatchOpenMonthTicket" file="test_suite\parkingManage\monthTicket\test_batchOpenMonthTicket.py" line="45" name="test_mockCarOut[send_data0-expect0]" time="5.052"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_batchOpenMonthTicket.TestBatchOpenMonthTicket object at 0x00000000076CB278&gt;
send_data = {&apos;carNum&apos;: &apos;粤K69143&apos;, &apos;combinedStatus&apos;: &apos;生效中&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;batchOpenMonthTicketBillMsg&apos;: True, &apos;checkMonthTicketBillListMsg&apos;: &apos;粤K69143&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤K69143\\\\批量月票2408&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟车辆出场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_batchOpenMonthTicket.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000076E0780&gt;
carNum = &apos;粤K69143&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchRefundMonthTicketBill.TestBatchRefundMonthTicketBill" file="test_suite\parkingManage\monthTicket\test_batchRefundMonthTicketBill.py" line="21" name="test_createMonthTicketConfig[send_data0-expect0]" time="15.123"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchRefundMonthTicketBill.TestBatchRefundMonthTicketBill" file="test_suite\parkingManage\monthTicket\test_batchRefundMonthTicketBill.py" line="27" name="test_openMonthTicketBill[send_data0-expect0]" time="9.181"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchRefundMonthTicketBill.TestBatchRefundMonthTicketBill" file="test_suite\parkingManage\monthTicket\test_batchRefundMonthTicketBill.py" line="33" name="test_batchRefundMonthTicketBill[send_data0-expect0]" time="9.410"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchRefundMonthTicketBill.TestBatchRefundMonthTicketBill" file="test_suite\parkingManage\monthTicket\test_batchRefundMonthTicketBill.py" line="39" name="test_checkMonthTicketBillList[send_data0-expect0]" time="3.268"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchRefundMonthTicketBill.TestBatchRefundMonthTicketBill" file="test_suite\parkingManage\monthTicket\test_batchRefundMonthTicketBill.py" line="45" name="test_mockCarIn[send_data0-expect0]" time="5.041"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_batchRefundMonthTicketBill.TestBatchRefundMonthTicketBill object at 0x0000000007694EF0&gt;
send_data = {&apos;carNum&apos;: &apos;粤W32794&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;combinedStatus&apos;: &apos;已退款&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;batchRefundMonthTicketBillMsg&apos;: True, &apos;checkMonthTicketBillListMsg&apos;: &apos;粤W32794&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤W32794\\\\欢迎光临&apos;, ...}

    def test_mockCarIn(self,send_data,expect):
        &quot;&quot;&quot;模拟车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_batchRefundMonthTicketBill.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007744DA0&gt;
carNum = &apos;粤W32794&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchRefundMonthTicketBill.TestBatchRefundMonthTicketBill" file="test_suite\parkingManage\monthTicket\test_batchRefundMonthTicketBill.py" line="52" name="test_mockCarOut[send_data0-expect0]" time="5.039"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_batchRefundMonthTicketBill.TestBatchRefundMonthTicketBill object at 0x0000000007988588&gt;
send_data = {&apos;carNum&apos;: &apos;粤W32794&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;combinedStatus&apos;: &apos;已退款&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;batchRefundMonthTicketBillMsg&apos;: True, &apos;checkMonthTicketBillListMsg&apos;: &apos;粤W32794&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤W32794\\\\欢迎光临&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟车辆出场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_batchRefundMonthTicketBill.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000077468D0&gt;
carNum = &apos;粤W32794&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchRefundMonthTicketBill.TestBatchRefundMonthTicketBill" file="test_suite\parkingManage\monthTicket\test_batchRefundMonthTicketBill.py" line="59" name="test_sentryPay[send_data0-expect0]" time="1.165"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_batchRefundMonthTicketBill.TestBatchRefundMonthTicketBill object at 0x00000000076F28D0&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007718F60&gt;
send_data = {&apos;carNum&apos;: &apos;粤W32794&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;combinedStatus&apos;: &apos;已退款&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;batchRefundMonthTicketBillMsg&apos;: True, &apos;checkMonthTicketBillListMsg&apos;: &apos;粤W32794&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤W32794\\\\欢迎光临&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭收费处收费-查看车辆离场信息&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;],send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\test_batchRefundMonthTicketBill.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x00000000077185C0&gt;
carNum = &apos;粤W32794&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchRenewMonthTicketBill.TestBatchRenewMonthTicketBill" file="test_suite\parkingManage\monthTicket\test_batchRenewMonthTicketBill.py" line="20" name="test_createMonthTicketConfig[send_data0-expect0]" time="15.440"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchRenewMonthTicketBill.TestBatchRenewMonthTicketBill" file="test_suite\parkingManage\monthTicket\test_batchRenewMonthTicketBill.py" line="26" name="test_openMonthTicketBill[send_data0-expect0]" time="8.701"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchRenewMonthTicketBill.TestBatchRenewMonthTicketBill" file="test_suite\parkingManage\monthTicket\test_batchRenewMonthTicketBill.py" line="32" name="test_batchRenewTicketBill[send_data0-expect0]" time="8.011"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchRenewMonthTicketBill.TestBatchRenewMonthTicketBill" file="test_suite\parkingManage\monthTicket\test_batchRenewMonthTicketBill.py" line="38" name="test_checkMonthTicketBillList[send_data0-expect0]" time="2.884"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchRenewMonthTicketBill.TestBatchRenewMonthTicketBill" file="test_suite\parkingManage\monthTicket\test_batchRenewMonthTicketBill.py" line="44" name="test_mockCarIn[send_data0-expect0]" time="5.039"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_batchRenewMonthTicketBill.TestBatchRenewMonthTicketBill object at 0x00000000076E8EB8&gt;
send_data = {&apos;carNum&apos;: &apos;粤Y97651&apos;, &apos;combinedStatus&apos;: &apos;生效中&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;batchRenewTicketBillMsg&apos;: True, &apos;checkMonthTicketBillListMsg&apos;: &apos;粤Y97651&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤Y97651\\\\批量月票3157&apos;, ...}

    def test_mockCarIn(self,send_data,expect):
        &quot;&quot;&quot;模拟车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_batchRenewMonthTicketBill.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000079551D0&gt;
carNum = &apos;粤Y97651&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_batchRenewMonthTicketBill.TestBatchRenewMonthTicketBill" file="test_suite\parkingManage\monthTicket\test_batchRenewMonthTicketBill.py" line="51" name="test_mockCarOut[send_data0-expect0]" time="5.046"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_batchRenewMonthTicketBill.TestBatchRenewMonthTicketBill object at 0x00000000076FBDD8&gt;
send_data = {&apos;carNum&apos;: &apos;粤Y97651&apos;, &apos;combinedStatus&apos;: &apos;生效中&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;batchRenewTicketBillMsg&apos;: True, &apos;checkMonthTicketBillListMsg&apos;: &apos;粤Y97651&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤Y97651\\\\批量月票3157&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟车辆出场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_batchRenewMonthTicketBill.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000079EE470&gt;
carNum = &apos;粤Y97651&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_createMonthTicketProcess.TestCreateMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_createMonthTicketProcess.py" line="22" name="test_createMonthTicketConfig[send_data0-expect0]" time="17.088"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_createMonthTicketProcess.TestCreateMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_createMonthTicketProcess.py" line="28" name="test_openMonthTicketBill[send_data0-expect0]" time="8.612"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_createMonthTicketProcess.TestCreateMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_createMonthTicketProcess.py" line="34" name="test_mockCarIn[send_data0-expect0]" time="5.041"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_createMonthTicketProcess.TestCreateMonthTicketProcess object at 0x000000000770F0F0&gt;
send_data = {&apos;carNum&apos;: &apos;粤H40386&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;月票pytest1487&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤H40386\\\\月票pytest1487&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤H40386$月票pytest1487&apos;, ...}

    def test_mockCarIn(self,send_data,expect):
        &quot;&quot;&quot;模拟车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_createMonthTicketProcess.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007718588&gt;
carNum = &apos;粤H40386&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_createMonthTicketProcess.TestCreateMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_createMonthTicketProcess.py" line="41" name="test_presentCar[send_data0-expect0]" time="4.208"><failure message="IndexError: list index out of range">self = &lt;test_createMonthTicketProcess.TestCreateMonthTicketProcess object at 0x0000000007971978&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007971630&gt;
send_data = {&apos;carNum&apos;: &apos;粤H40386&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;月票pytest1487&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤H40386\\\\月票pytest1487&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤H40386$月票pytest1487&apos;, ...}

    def test_presentCar(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看在场记录&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&quot;parkName&quot;], send_data[&quot;carNum&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\test_createMonthTicketProcess.py:45: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_createMonthTicketProcess.TestCreateMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_createMonthTicketProcess.py" line="48" name="test_mockCarOut[send_data0-expect0]" time="5.039"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_createMonthTicketProcess.TestCreateMonthTicketProcess object at 0x00000000076F2B00&gt;
send_data = {&apos;carNum&apos;: &apos;粤H40386&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;月票pytest1487&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤H40386\\\\月票pytest1487&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤H40386$月票pytest1487&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟车辆出场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_createMonthTicketProcess.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000079F2C50&gt;
carNum = &apos;粤H40386&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_createMonthTicketProcess.TestCreateMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_createMonthTicketProcess.py" line="55" name="test_checkCarInOutHistoryVIPType[send_data0-expect0]" time="8.368"><failure message="IndexError: list index out of range">self = &lt;test_createMonthTicketProcess.TestCreateMonthTicketProcess object at 0x00000000076F26A0&gt;
userLogin = &lt;common.Req.Req object at 0x00000000076E82B0&gt;
send_data = {&apos;carNum&apos;: &apos;粤H40386&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;月票pytest1487&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤H40386\\\\月票pytest1487&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤H40386$月票pytest1487&apos;, ...}

    def test_checkCarInOutHistoryVIPType(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看进出场记录中查看到VIP类型&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
&gt;       result = re.json()[&quot;data&quot;][&quot;rows&quot;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\test_createMonthTicketProcess.py:59: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_customMonthTicketConfigRenew.TestCustomMonthTicketConfig" file="test_suite\parkingManage\monthTicket\test_customMonthTicketConfigRenew.py" line="21" name="test_createMonthTicketConfig[send_data0-expect0]" time="17.696"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_customMonthTicketConfigRenew.TestCustomMonthTicketConfig" file="test_suite\parkingManage\monthTicket\test_customMonthTicketConfigRenew.py" line="27" name="test_openMonthTicketBill[send_data0-expect0]" time="9.442"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_customMonthTicketConfigRenew.TestCustomMonthTicketConfig" file="test_suite\parkingManage\monthTicket\test_customMonthTicketConfigRenew.py" line="33" name="test_renewMonthTicketBill[send_data0-expect0]" time="9.687"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_customMonthTicketConfigRenew.TestCustomMonthTicketConfig" file="test_suite\parkingManage\monthTicket\test_customMonthTicketConfigRenew.py" line="39" name="test_mockCarIn[send_data0-expect0]" time="5.044"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_customMonthTicketConfigRenew.TestCustomMonthTicketConfig object at 0x0000000007745C88&gt;
send_data = {&apos;carNum&apos;: &apos;粤W28759&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;自定义pytest0516&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤W28759\\\\自定义pytest0516&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤W28759$自定义pytest0516&apos;, ...}

    def test_mockCarIn(self,send_data,expect):
        &quot;&quot;&quot;模拟车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_customMonthTicketConfigRenew.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007976A58&gt;
carNum = &apos;粤W28759&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_customMonthTicketConfigRenew.TestCustomMonthTicketConfig" file="test_suite\parkingManage\monthTicket\test_customMonthTicketConfigRenew.py" line="46" name="test_mockCarOut[send_data0-expect0]" time="5.058"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_customMonthTicketConfigRenew.TestCustomMonthTicketConfig object at 0x0000000007703C50&gt;
send_data = {&apos;carNum&apos;: &apos;粤W28759&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;自定义pytest0516&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤W28759\\\\自定义pytest0516&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤W28759$自定义pytest0516&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟车辆出场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_customMonthTicketConfigRenew.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007973278&gt;
carNum = &apos;粤W28759&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_customMonthTicketConfigRenew.TestCustomMonthTicketConfig" file="test_suite\parkingManage\monthTicket\test_customMonthTicketConfigRenew.py" line="53" name="test_checkCarInOutHistoryVIPType[send_data0-expect0]" time="8.845"><failure message="IndexError: list index out of range">self = &lt;test_customMonthTicketConfigRenew.TestCustomMonthTicketConfig object at 0x0000000006B8F710&gt;
userLogin = &lt;common.Req.Req object at 0x00000000076F50B8&gt;
send_data = {&apos;carNum&apos;: &apos;粤W28759&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;自定义pytest0516&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤W28759\\\\自定义pytest0516&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤W28759$自定义pytest0516&apos;, ...}

    def test_checkCarInOutHistoryVIPType(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看进出场记录中查看到VIP类型&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
&gt;       result = re.json()[&quot;data&quot;][&quot;rows&quot;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\test_customMonthTicketConfigRenew.py:57: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_editTicketConfigStatus.TestEditTicketConfigStatus" file="test_suite\parkingManage\monthTicket\test_editTicketConfigStatus.py" line="20" name="test_createMonthTicketConfig[send_data0-expect0]" time="15.953"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_editTicketConfigStatus.TestEditTicketConfigStatus" file="test_suite\parkingManage\monthTicket\test_editTicketConfigStatus.py" line="26" name="test_setMonthTicketConfigInvalid[send_data0-expect0]" time="7.579"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_editTicketConfigStatus.TestEditTicketConfigStatus" file="test_suite\parkingManage\monthTicket\test_editTicketConfigStatus.py" line="32" name="test_openMonthTicketBill[send_data0-expect0]" time="2.432"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_editTicketConfigStatus.TestEditTicketConfigStatus" file="test_suite\parkingManage\monthTicket\test_editTicketConfigStatus.py" line="38" name="test_setMonthTicketConfigValid[send_data0-expect0]" time="7.572"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_editTicketConfigStatus.TestEditTicketConfigStatus" file="test_suite\parkingManage\monthTicket\test_editTicketConfigStatus.py" line="44" name="test_openMonthTicketBillAgain[send_data0-expect0]" time="8.998"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_editTicketConfigStatus.TestEditTicketConfigStatus" file="test_suite\parkingManage\monthTicket\test_editTicketConfigStatus.py" line="50" name="test_editMonthTicketBill[send_data0-expect0]" time="14.203"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_editTicketConfigStatus.TestEditTicketConfigStatus" file="test_suite\parkingManage\monthTicket\test_editTicketConfigStatus.py" line="56" name="test_checkTicketBillUpdateRecord[send_data0-expect0]" time="5.925"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_editTicketConfigStatus.TestEditTicketConfigStatus" file="test_suite\parkingManage\monthTicket\test_editTicketConfigStatus.py" line="62" name="test_editMonthTicketConfig[send_data0-expect0]" time="10.477"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_editTicketConfigStatus.TestEditTicketConfigStatus" file="test_suite\parkingManage\monthTicket\test_editTicketConfigStatus.py" line="68" name="test_checkSystemLog[send_data0-expect0]" time="8.283"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_naturalMonthTicketConfigRenew.TestNaturalMonthTicketConfig" file="test_suite\parkingManage\monthTicket\test_naturalMonthTicketConfigRenew.py" line="21" name="test_createMonthTicketConfig[send_data0-expect0]" time="16.145"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_naturalMonthTicketConfigRenew.TestNaturalMonthTicketConfig" file="test_suite\parkingManage\monthTicket\test_naturalMonthTicketConfigRenew.py" line="27" name="test_openMonthTicketBill[send_data0-expect0]" time="8.024"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_naturalMonthTicketConfigRenew.TestNaturalMonthTicketConfig" file="test_suite\parkingManage\monthTicket\test_naturalMonthTicketConfigRenew.py" line="33" name="test_renewMonthTicketBill[send_data0-expect0]" time="9.679"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_naturalMonthTicketConfigRenew.TestNaturalMonthTicketConfig" file="test_suite\parkingManage\monthTicket\test_naturalMonthTicketConfigRenew.py" line="39" name="test_mockCarIn[send_data0-expect0]" time="5.040"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_naturalMonthTicketConfigRenew.TestNaturalMonthTicketConfig object at 0x0000000007566320&gt;
send_data = {&apos;carNum&apos;: &apos;粤M37291&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;自然月pytest9840&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤M37291\\\\自然月pytest9840&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤M37291$自然月pytest9840&apos;, ...}

    def test_mockCarIn(self,send_data,expect):
        &quot;&quot;&quot;模拟车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_naturalMonthTicketConfigRenew.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000006AC85F8&gt;
carNum = &apos;粤M37291&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_naturalMonthTicketConfigRenew.TestNaturalMonthTicketConfig" file="test_suite\parkingManage\monthTicket\test_naturalMonthTicketConfigRenew.py" line="46" name="test_mockCarOut[send_data0-expect0]" time="5.054"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_naturalMonthTicketConfigRenew.TestNaturalMonthTicketConfig object at 0x00000000070F6D30&gt;
send_data = {&apos;carNum&apos;: &apos;粤M37291&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;自然月pytest9840&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤M37291\\\\自然月pytest9840&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤M37291$自然月pytest9840&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟车辆出场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_naturalMonthTicketConfigRenew.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000076E80F0&gt;
carNum = &apos;粤M37291&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_naturalMonthTicketConfigRenew.TestNaturalMonthTicketConfig" file="test_suite\parkingManage\monthTicket\test_naturalMonthTicketConfigRenew.py" line="53" name="test_checkCarInOutHistoryVIPType[send_data0-expect0]" time="7.670"><failure message="IndexError: list index out of range">self = &lt;test_naturalMonthTicketConfigRenew.TestNaturalMonthTicketConfig object at 0x00000000076221D0&gt;
userLogin = &lt;common.Req.Req object at 0x00000000079D85F8&gt;
send_data = {&apos;carNum&apos;: &apos;粤M37291&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;自然月pytest9840&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤M37291\\\\自然月pytest9840&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤M37291$自然月pytest9840&apos;, ...}

    def test_checkCarInOutHistoryVIPType(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看进出场记录中查看到VIP类型&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
&gt;       result = re.json()[&quot;data&quot;][&quot;rows&quot;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\test_naturalMonthTicketConfigRenew.py:57: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_needChargeVipWideInOutProcess.TestNeedChargeVipWideInOutProcess" file="test_suite\parkingManage\monthTicket\test_needChargeVipWideInOutProcess.py" line="23" name="test_createMonthTicketConfig[send_data0-expect0]" time="18.226"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_needChargeVipWideInOutProcess.TestNeedChargeVipWideInOutProcess" file="test_suite\parkingManage\monthTicket\test_needChargeVipWideInOutProcess.py" line="29" name="test_openMonthTicketBill[send_data0-expect0]" time="8.700"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_needChargeVipWideInOutProcess.TestNeedChargeVipWideInOutProcess" file="test_suite\parkingManage\monthTicket\test_needChargeVipWideInOutProcess.py" line="35" name="test_mockCarIn[send_data0-expect0]" time="5.040"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_needChargeVipWideInOutProcess.TestNeedChargeVipWideInOutProcess object at 0x0000000007703B00&gt;
send_data = {&apos;carNum&apos;: &apos;粤K48560&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;isChargeGroupRelated&apos;: 1, ...}
expect = {&apos;OutScreenMsg&apos;: &apos;粤K48560\\\\扫码缴费1元&apos;, &apos;OutVoiceMsg&apos;: &apos;$粤K48560$请扫码缴费1元&apos;, &apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;计费组月票20200408115814&apos;, &apos;checkParkingBillDetailMsg&apos;: &apos;本地VIP&apos;, ...}

    def test_mockCarIn(self,send_data,expect):
        &quot;&quot;&quot;模拟车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_needChargeVipWideInOutProcess.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007973470&gt;
carNum = &apos;粤K48560&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_needChargeVipWideInOutProcess.TestNeedChargeVipWideInOutProcess" file="test_suite\parkingManage\monthTicket\test_needChargeVipWideInOutProcess.py" line="42" name="test_mockCarOut[send_data0-expect0]" time="5.035"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_needChargeVipWideInOutProcess.TestNeedChargeVipWideInOutProcess object at 0x0000000007956128&gt;
send_data = {&apos;carNum&apos;: &apos;粤K48560&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;isChargeGroupRelated&apos;: 1, ...}
expect = {&apos;OutScreenMsg&apos;: &apos;粤K48560\\\\扫码缴费1元&apos;, &apos;OutVoiceMsg&apos;: &apos;$粤K48560$请扫码缴费1元&apos;, &apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;计费组月票20200408115814&apos;, &apos;checkParkingBillDetailMsg&apos;: &apos;本地VIP&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟车辆出场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_needChargeVipWideInOutProcess.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007609278&gt;
carNum = &apos;粤K48560&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_needChargeVipWideInOutProcess.TestNeedChargeVipWideInOutProcess" file="test_suite\parkingManage\monthTicket\test_needChargeVipWideInOutProcess.py" line="49" name="test_sentryPay[send_data0-expect0]" time="0.481"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_needChargeVipWideInOutProcess.TestNeedChargeVipWideInOutProcess object at 0x00000000076CB898&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000075DB9B0&gt;
send_data = {&apos;carNum&apos;: &apos;粤K48560&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;isChargeGroupRelated&apos;: 1, ...}
expect = {&apos;OutScreenMsg&apos;: &apos;粤K48560\\\\扫码缴费1元&apos;, &apos;OutVoiceMsg&apos;: &apos;$粤K48560$请扫码缴费1元&apos;, &apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;计费组月票20200408115814&apos;, &apos;checkParkingBillDetailMsg&apos;: &apos;本地VIP&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭收费处收费-查看车辆离场信息&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;],send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\test_needChargeVipWideInOutProcess.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007A03B38&gt;
carNum = &apos;粤K48560&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_needChargeVipWideInOutProcess.TestNeedChargeVipWideInOutProcess" file="test_suite\parkingManage\monthTicket\test_needChargeVipWideInOutProcess.py" line="55" name="test_checkParkingBillDetail[send_data0-expect0]" time="10.048"><failure message="IndexError: list index out of range">self = &lt;test_needChargeVipWideInOutProcess.TestNeedChargeVipWideInOutProcess object at 0x0000000007A08D30&gt;
userLogin = &lt;common.Req.Req object at 0x0000000006AA3FD0&gt;
send_data = {&apos;carNum&apos;: &apos;粤K48560&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;isChargeGroupRelated&apos;: 1, ...}
expect = {&apos;OutScreenMsg&apos;: &apos;粤K48560\\\\扫码缴费1元&apos;, &apos;OutVoiceMsg&apos;: &apos;$粤K48560$请扫码缴费1元&apos;, &apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;计费组月票20200408115814&apos;, &apos;checkParkingBillDetailMsg&apos;: &apos;本地VIP&apos;, ...}

    def test_checkParkingBillDetail(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查询收费记录&quot;&quot;&quot;
        re = Information(userLogin).getParkingBillDetail(send_data[&apos;parkName&apos;], send_data[&apos;carNum&apos;])
&gt;       result = re.json()[&apos;data&apos;][&quot;rows&quot;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\test_needChargeVipWideInOutProcess.py:59: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_needChargeVipWideInOutProcess.TestNeedChargeVipWideInOutProcess" file="test_suite\parkingManage\monthTicket\test_needChargeVipWideInOutProcess.py" line="61" name="test_checkCarInOutHistoryVIPType[send_data0-expect0]" time="7.577"><failure message="IndexError: list index out of range">self = &lt;test_needChargeVipWideInOutProcess.TestNeedChargeVipWideInOutProcess object at 0x0000000007748128&gt;
userLogin = &lt;common.Req.Req object at 0x00000000073D70F0&gt;
send_data = {&apos;carNum&apos;: &apos;粤K48560&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;isChargeGroupRelated&apos;: 1, ...}
expect = {&apos;OutScreenMsg&apos;: &apos;粤K48560\\\\扫码缴费1元&apos;, &apos;OutVoiceMsg&apos;: &apos;$粤K48560$请扫码缴费1元&apos;, &apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;计费组月票20200408115814&apos;, &apos;checkParkingBillDetailMsg&apos;: &apos;本地VIP&apos;, ...}

    def test_checkCarInOutHistoryVIPType(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看进出场记录中查看到VIP类型&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
&gt;       result = re.json()[&quot;data&quot;][&quot;rows&quot;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\test_needChargeVipWideInOutProcess.py:65: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_noPresenceVipStrictOutProcess.TestNoPresenceVipStrictOutProcess" file="test_suite\parkingManage\monthTicket\test_noPresenceVipStrictOutProcess.py" line="22" name="test_createMonthTicketConfig[send_data0-expect0]" time="19.992"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_noPresenceVipStrictOutProcess.TestNoPresenceVipStrictOutProcess" file="test_suite\parkingManage\monthTicket\test_noPresenceVipStrictOutProcess.py" line="28" name="test_openMonthTicketBill[send_data0-expect0]" time="9.538"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_noPresenceVipStrictOutProcess.TestNoPresenceVipStrictOutProcess" file="test_suite\parkingManage\monthTicket\test_noPresenceVipStrictOutProcess.py" line="34" name="test_mockCarOut[send_data0-expect0]" time="5.038"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_noPresenceVipStrictOutProcess.TestNoPresenceVipStrictOutProcess object at 0x0000000007744358&gt;
send_data = {&apos;carNum&apos;: &apos;粤M86415&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;outClientID&apos;: 20190507171503, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, ...}
expect = {&apos;carLeaveHistoryMsg&apos;: &apos;粤M86415&apos;, &apos;checkMessageOutMsg&apos;: &apos;已收费1元一路顺风&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;openMonthTicketBillMsg&apos;: &apos;操作成功&apos;, ...}

    def test_mockCarOut(self, send_data, expect):
        &quot;&quot;&quot;模拟月票车无在场辆离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_noPresenceVipStrictOutProcess.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007A037B8&gt;
carNum = &apos;粤M86415&apos;, mockType = 1, ytj_id = 20190507171503, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_noPresenceVipStrictOutProcess.TestNoPresenceVipStrictOutProcess" file="test_suite\parkingManage\monthTicket\test_noPresenceVipStrictOutProcess.py" line="42" name="test_checkMessageOut[send_data0-expect0]" time="0.662"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_noPresenceVipStrictOutProcess.TestNoPresenceVipStrictOutProcess object at 0x0000000007935828&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000073D5C18&gt;
send_data = {&apos;carNum&apos;: &apos;粤M86415&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;outClientID&apos;: 20190507171503, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, ...}
expect = {&apos;carLeaveHistoryMsg&apos;: &apos;粤M86415&apos;, &apos;checkMessageOutMsg&apos;: &apos;已收费1元一路顺风&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;openMonthTicketBillMsg&apos;: &apos;操作成功&apos;, ...}

    def test_checkMessageOut(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;岗亭端登记放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;],send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\test_noPresenceVipStrictOutProcess.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x00000000076FB5F8&gt;
carNum = &apos;粤M86415&apos;, carHandleType = &apos;异常放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_noPresenceVipStrictOutProcess.TestNoPresenceVipStrictOutProcess" file="test_suite\parkingManage\monthTicket\test_noPresenceVipStrictOutProcess.py" line="48" name="test_carLeaveHistory[send_data0-expect0]" time="8.410"><failure message="IndexError: list index out of range">self = &lt;test_noPresenceVipStrictOutProcess.TestNoPresenceVipStrictOutProcess object at 0x00000000075D40B8&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007955630&gt;
send_data = {&apos;carNum&apos;: &apos;粤M86415&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;outClientID&apos;: 20190507171503, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, ...}
expect = {&apos;carLeaveHistoryMsg&apos;: &apos;粤M86415&apos;, &apos;checkMessageOutMsg&apos;: &apos;已收费1元一路顺风&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;openMonthTicketBillMsg&apos;: &apos;操作成功&apos;, ...}

    def test_carLeaveHistory(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看离场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;], send_data[&quot;carNum&quot;])
&gt;       result = re.json()[&quot;data&quot;][&quot;rows&quot;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\test_noPresenceVipStrictOutProcess.py:52: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_noPresenceVipWideOutProcess.TestNoPresenceVipWideOutProcess" file="test_suite\parkingManage\monthTicket\test_noPresenceVipWideOutProcess.py" line="22" name="test_createMonthTicketConfig[send_data0-expect0]" time="19.702"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_noPresenceVipWideOutProcess.TestNoPresenceVipWideOutProcess" file="test_suite\parkingManage\monthTicket\test_noPresenceVipWideOutProcess.py" line="28" name="test_openMonthTicketBill[send_data0-expect0]" time="8.207"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_noPresenceVipWideOutProcess.TestNoPresenceVipWideOutProcess" file="test_suite\parkingManage\monthTicket\test_noPresenceVipWideOutProcess.py" line="34" name="test_mockCarOut[send_data0-expect0]" time="5.038"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_noPresenceVipWideOutProcess.TestNoPresenceVipWideOutProcess object at 0x0000000007105080&gt;
send_data = {&apos;carNum&apos;: &apos;粤J18034&apos;, &apos;outClientID&apos;: 20190507171501, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, &apos;renewMethod&apos;: &apos;自定义&apos;, ...}
expect = {&apos;carLeaveHistoryMsg&apos;: &apos;粤J18034&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;openMonthTicketBillMsg&apos;: &apos;操作成功&apos;, &apos;outOpenGateMsg&apos;: 1, ...}

    def test_mockCarOut(self, send_data, expect):
        &quot;&quot;&quot;模拟月票车无在场辆离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],1,send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_noPresenceVipWideOutProcess.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000774B0F0&gt;
carNum = &apos;粤J18034&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_noPresenceVipWideOutProcess.TestNoPresenceVipWideOutProcess" file="test_suite\parkingManage\monthTicket\test_noPresenceVipWideOutProcess.py" line="42" name="test_carLeaveHistory[send_data0-expect0]" time="7.504"><failure message="IndexError: list index out of range">self = &lt;test_noPresenceVipWideOutProcess.TestNoPresenceVipWideOutProcess object at 0x0000000007693080&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007748A90&gt;
send_data = {&apos;carNum&apos;: &apos;粤J18034&apos;, &apos;outClientID&apos;: 20190507171501, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, &apos;renewMethod&apos;: &apos;自定义&apos;, ...}
expect = {&apos;carLeaveHistoryMsg&apos;: &apos;粤J18034&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;openMonthTicketBillMsg&apos;: &apos;操作成功&apos;, &apos;outOpenGateMsg&apos;: 1, ...}

    def test_carLeaveHistory(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看出场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;], send_data[&quot;carNum&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\test_noPresenceVipWideOutProcess.py:46: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_refundMonthTicketProcess.TestRefundMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py" line="24" name="test_createMonthTicketConfig[send_data0-expect0]" time="17.602"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_refundMonthTicketProcess.TestRefundMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py" line="31" name="test_openMonthTicketBill[send_data0-expect0]" time="8.632"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_refundMonthTicketProcess.TestRefundMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py" line="38" name="test_mockCarIn[send_data0-expect0]" time="5.037"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_refundMonthTicketProcess.TestRefundMonthTicketProcess object at 0x00000000076FF4E0&gt;
send_data = {&apos;carNum&apos;: &apos;粤Q93521&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;OutScreenMsg&apos;: &apos;粤Q93521\\\\月票20200408115814&apos;, &apos;OutVoiceMsg&apos;: &apos;$粤Q93521$月票20200408115814&apos;, &apos;carLeaveHistoryMessage&apos;: &apos;粤Q93521&apos;, &apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;临时车&apos;, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007624160&gt;
carNum = &apos;粤Q93521&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_refundMonthTicketProcess.TestRefundMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py" line="46" name="test_mockCarOut[send_data0-expect0]" time="5.045"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_refundMonthTicketProcess.TestRefundMonthTicketProcess object at 0x00000000076FBC88&gt;
send_data = {&apos;carNum&apos;: &apos;粤Q93521&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;OutScreenMsg&apos;: &apos;粤Q93521\\\\月票20200408115814&apos;, &apos;OutVoiceMsg&apos;: &apos;$粤Q93521$月票20200408115814&apos;, &apos;carLeaveHistoryMessage&apos;: &apos;粤Q93521&apos;, &apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;临时车&apos;, ...}

    def test_mockCarOut(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],1,send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000796BBE0&gt;
carNum = &apos;粤Q93521&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_refundMonthTicketProcess.TestRefundMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py" line="53" name="test_CarLeaveHistory[send_data0-expect0]" time="7.721"><failure message="IndexError: list index out of range">self = &lt;test_refundMonthTicketProcess.TestRefundMonthTicketProcess object at 0x0000000007705588&gt;
userLogin = &lt;common.Req.Req object at 0x000000000768F828&gt;
send_data = {&apos;carNum&apos;: &apos;粤Q93521&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;OutScreenMsg&apos;: &apos;粤Q93521\\\\月票20200408115814&apos;, &apos;OutVoiceMsg&apos;: &apos;$粤Q93521$月票20200408115814&apos;, &apos;carLeaveHistoryMessage&apos;: &apos;粤Q93521&apos;, &apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;临时车&apos;, ...}

    def test_CarLeaveHistory(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看进出场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;], send_data[&quot;carNum&quot;])
&gt;       result = re.json()[&quot;data&quot;][&quot;rows&quot;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py:57: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_refundMonthTicketProcess.TestRefundMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py" line="60" name="test_refundMonthTicket[send_data0-expect0]" time="8.775"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_refundMonthTicketProcess.TestRefundMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py" line="66" name="test_mockCarIn2[send_data0-expect0]" time="5.040"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_refundMonthTicketProcess.TestRefundMonthTicketProcess object at 0x000000000799E358&gt;
send_data = {&apos;carNum&apos;: &apos;粤Q93521&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;OutScreenMsg&apos;: &apos;粤Q93521\\\\月票20200408115814&apos;, &apos;OutVoiceMsg&apos;: &apos;$粤Q93521$月票20200408115814&apos;, &apos;carLeaveHistoryMessage&apos;: &apos;粤Q93521&apos;, &apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;临时车&apos;, ...}

    def test_mockCarIn2(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000079B0BE0&gt;
carNum = &apos;粤Q93521&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_refundMonthTicketProcess.TestRefundMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py" line="74" name="test_mockCarOut2[send_data0-expect0]" time="5.034"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_refundMonthTicketProcess.TestRefundMonthTicketProcess object at 0x00000000077053C8&gt;
send_data = {&apos;carNum&apos;: &apos;粤Q93521&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;OutScreenMsg&apos;: &apos;粤Q93521\\\\月票20200408115814&apos;, &apos;OutVoiceMsg&apos;: &apos;$粤Q93521$月票20200408115814&apos;, &apos;carLeaveHistoryMessage&apos;: &apos;粤Q93521&apos;, &apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;临时车&apos;, ...}

    def test_mockCarOut2(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],1,send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000079C1390&gt;
carNum = &apos;粤Q93521&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_refundMonthTicketProcess.TestRefundMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py" line="81" name="test_sentryPay[send_data0-expect0]" time="0.446"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_refundMonthTicketProcess.TestRefundMonthTicketProcess object at 0x00000000079C1BA8&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007624160&gt;
send_data = {&apos;carNum&apos;: &apos;粤Q93521&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;OutScreenMsg&apos;: &apos;粤Q93521\\\\月票20200408115814&apos;, &apos;OutVoiceMsg&apos;: &apos;$粤Q93521$月票20200408115814&apos;, &apos;carLeaveHistoryMessage&apos;: &apos;粤Q93521&apos;, &apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;临时车&apos;, ...}

    def test_sentryPay(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;岗亭收费处收费-查看车辆离场信息&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;], send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x000000000799E4A8&gt;
carNum = &apos;粤Q93521&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_refundMonthTicketProcess.TestRefundMonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py" line="87" name="test_checkCarInOutHistoryVIPType[send_data0-expect0]" time="8.346"><failure message="IndexError: list index out of range">self = &lt;test_refundMonthTicketProcess.TestRefundMonthTicketProcess object at 0x00000000079C1A20&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007993C88&gt;
send_data = {&apos;carNum&apos;: &apos;粤Q93521&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;OutScreenMsg&apos;: &apos;粤Q93521\\\\月票20200408115814&apos;, &apos;OutVoiceMsg&apos;: &apos;$粤Q93521$月票20200408115814&apos;, &apos;carLeaveHistoryMessage&apos;: &apos;粤Q93521&apos;, &apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;临时车&apos;, ...}

    def test_checkCarInOutHistoryVIPType(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看进出场记录中查看到VIP类型&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
&gt;       result = re.json()[&quot;data&quot;][&quot;rows&quot;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\test_refundMonthTicketProcess.py:91: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py" line="23" name="test_createMonthTicketConfig[send_data0-expect0]" time="17.768"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py" line="29" name="test_openMonthTicketBill[send_data0-expect0]" time="8.464"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py" line="35" name="test_mockCarIn[send_data0-expect0]" time="5.037"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess object at 0x0000000007D30B70&gt;
send_data = {&apos;carNum&apos;: &apos;粤B93526&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;OK&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤B93526\\\\欢迎光临&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤B93526$欢迎光临&apos;, ...}

    def test_mockCarIn(self,send_data,expect):
        &quot;&quot;&quot;模拟车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007D306A0&gt;
carNum = &apos;粤B93526&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py" line="42" name="test_mockCarOut[send_data0-expect0]" time="5.038"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess object at 0x0000000007D5D128&gt;
send_data = {&apos;carNum&apos;: &apos;粤B93526&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;OK&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤B93526\\\\欢迎光临&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤B93526$欢迎光临&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟车辆出场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000079C9320&gt;
carNum = &apos;粤B93526&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py" line="49" name="test_sentryPay[send_data0-expect0]" time="0.563"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess object at 0x00000000079B3278&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000079B0080&gt;
send_data = {&apos;carNum&apos;: &apos;粤B93526&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;OK&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤B93526\\\\欢迎光临&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤B93526$欢迎光临&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭收费处收费-查看车辆离场信息&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;],send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007D35160&gt;
carNum = &apos;粤B93526&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py" line="55" name="test_renewMonthTicketBill[send_data0-expect0]" time="9.179"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py" line="61" name="test_mockMonthTicketCarIn[send_data0-expect0]" time="5.043"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess object at 0x0000000007D2BE10&gt;
send_data = {&apos;carNum&apos;: &apos;粤B93526&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;OK&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤B93526\\\\欢迎光临&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤B93526$欢迎光临&apos;, ...}

    def test_mockMonthTicketCarIn(self,send_data,expect):
        &quot;&quot;&quot;模拟月票车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007705240&gt;
carNum = &apos;粤B93526&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py" line="68" name="test_mockMonthTicketCarOut[send_data0-expect0]" time="5.036"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess object at 0x0000000007998EF0&gt;
send_data = {&apos;carNum&apos;: &apos;粤B93526&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;OK&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤B93526\\\\欢迎光临&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤B93526$欢迎光临&apos;, ...}

    def test_mockMonthTicketCarOut(self, send_data, expect):
        &quot;&quot;&quot;模拟月票车辆离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],1,send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007D5D208&gt;
carNum = &apos;粤B93526&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py" line="75" name="test_sentryPayAgain[send_data0-expect0]" time="0.444"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess object at 0x0000000007998080&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007B311D0&gt;
send_data = {&apos;carNum&apos;: &apos;粤B93526&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;OK&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤B93526\\\\欢迎光临&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤B93526$欢迎光临&apos;, ...}

    def test_sentryPayAgain(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭收费处收费-查看车辆离场信息&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;],send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007D30668&gt;
carNum = &apos;粤B93526&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py" line="81" name="test_checkCarInOutHistoryVIPType[send_data0-expect0]" time="7.438"><failure message="IndexError: list index out of range">self = &lt;test_renewMonthTicketAbnormalProcess.TestRenewMonthTicketAbnormalProcess object at 0x0000000007D283C8&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007624160&gt;
send_data = {&apos;carNum&apos;: &apos;粤B93526&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;OK&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤B93526\\\\欢迎光临&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤B93526$欢迎光临&apos;, ...}

    def test_checkCarInOutHistoryVIPType(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看进出场记录中查看到VIP类型&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
&gt;       result = re.json()[&quot;data&quot;][&quot;rows&quot;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\test_renewMonthTicketAbnormalProcess.py:85: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketProcess.TestRenewMmonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketProcess.py" line="24" name="test_createMonthTicketConfig[send_data0-expect0]" time="20.681"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketProcess.TestRenewMmonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketProcess.py" line="30" name="test_openMonthTicketBill[send_data0-expect0]" time="8.417"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketProcess.TestRenewMmonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketProcess.py" line="36" name="test_mockCarIn[send_data0-expect0]" time="5.045"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_renewMonthTicketProcess.TestRenewMmonthTicketProcess object at 0x0000000007B99438&gt;
send_data = {&apos;carNum&apos;: &apos;粤S37864&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;月票pytest1536&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;OK&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤S37864\\\\欢迎光临&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤S37864$欢迎光临&apos;, ...}

    def test_mockCarIn(self,send_data,expect):
        &quot;&quot;&quot;模拟车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_renewMonthTicketProcess.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007B99240&gt;
carNum = &apos;粤S37864&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketProcess.TestRenewMmonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketProcess.py" line="43" name="test_mockCarOut[send_data0-expect0]" time="5.037"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_renewMonthTicketProcess.TestRenewMmonthTicketProcess object at 0x0000000007D280F0&gt;
send_data = {&apos;carNum&apos;: &apos;粤S37864&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;月票pytest1536&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;OK&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤S37864\\\\欢迎光临&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤S37864$欢迎光临&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟车辆出场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_renewMonthTicketProcess.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007D4C400&gt;
carNum = &apos;粤S37864&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketProcess.TestRenewMmonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketProcess.py" line="50" name="test_sentryPay[send_data0-expect0]" time="0.508"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_renewMonthTicketProcess.TestRenewMmonthTicketProcess object at 0x0000000007D39550&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007D5D400&gt;
send_data = {&apos;carNum&apos;: &apos;粤S37864&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;月票pytest1536&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;OK&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤S37864\\\\欢迎光临&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤S37864$欢迎光临&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭收费处收费-查看车辆离场信息&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;],send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\test_renewMonthTicketProcess.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007B5C160&gt;
carNum = &apos;粤S37864&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketProcess.TestRenewMmonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketProcess.py" line="56" name="test_renewMonthTicketBill[send_data0-expect0]" time="8.692"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketProcess.TestRenewMmonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketProcess.py" line="62" name="test_mockMonthTicketCarIn[send_data0-expect0]" time="5.046"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_renewMonthTicketProcess.TestRenewMmonthTicketProcess object at 0x0000000007D505C0&gt;
send_data = {&apos;carNum&apos;: &apos;粤S37864&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;月票pytest1536&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;OK&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤S37864\\\\欢迎光临&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤S37864$欢迎光临&apos;, ...}

    def test_mockMonthTicketCarIn(self,send_data,expect):
        &quot;&quot;&quot;模拟月票车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_renewMonthTicketProcess.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000079A2160&gt;
carNum = &apos;粤S37864&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketProcess.TestRenewMmonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketProcess.py" line="69" name="test_mockMonthTicketCarOut[send_data0-expect0]" time="5.040"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_renewMonthTicketProcess.TestRenewMmonthTicketProcess object at 0x0000000007D509E8&gt;
send_data = {&apos;carNum&apos;: &apos;粤S37864&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;月票pytest1536&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;OK&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤S37864\\\\欢迎光临&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤S37864$欢迎光临&apos;, ...}

    def test_mockMonthTicketCarOut(self, send_data, expect):
        &quot;&quot;&quot;模拟月票车辆离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],1,send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_renewMonthTicketProcess.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007B446D8&gt;
carNum = &apos;粤S37864&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_renewMonthTicketProcess.TestRenewMmonthTicketProcess" file="test_suite\parkingManage\monthTicket\test_renewMonthTicketProcess.py" line="76" name="test_checkCarInOutHistoryVIPType[send_data0-expect0]" time="7.982"><failure message="IndexError: list index out of range">self = &lt;test_renewMonthTicketProcess.TestRenewMmonthTicketProcess object at 0x0000000006BABBA8&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007B6F240&gt;
send_data = {&apos;carNum&apos;: &apos;粤S37864&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;月票pytest1536&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;OK&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤S37864\\\\欢迎光临&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤S37864$欢迎光临&apos;, ...}

    def test_checkCarInOutHistoryVIPType(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看进出场记录中查看到VIP类型&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
&gt;       result = re.json()[&quot;data&quot;][&quot;rows&quot;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\test_renewMonthTicketProcess.py:80: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_vipStrictInOutProcess.TestVipStrictInOutProcess" file="test_suite\parkingManage\monthTicket\test_vipStrictInOutProcess.py" line="23" name="test_createMonthTicketConfig[send_data0-expect0]" time="20.172"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_vipStrictInOutProcess.TestVipStrictInOutProcess" file="test_suite\parkingManage\monthTicket\test_vipStrictInOutProcess.py" line="29" name="test_openMonthTicketBill[send_data0-expect0]" time="9.329"></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_vipStrictInOutProcess.TestVipStrictInOutProcess" file="test_suite\parkingManage\monthTicket\test_vipStrictInOutProcess.py" line="35" name="test_mockCarIn[send_data0-expect0]" time="5.038"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_vipStrictInOutProcess.TestVipStrictInOutProcess object at 0x0000000006A64550&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNum&apos;: &apos;粤Y13906&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171502, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;月票pytest9168&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤Y13906\\\\月票pytest9168请稍候&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤Y13906$月票pytest9168请稍候&apos;, ...}

    def test_mockCarIn(self,send_data,expect):
        &quot;&quot;&quot;模拟车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_vipStrictInOutProcess.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007D392B0&gt;
carNum = &apos;粤Y13906&apos;, mockType = 0, ytj_id = 20190507171502, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_vipStrictInOutProcess.TestVipStrictInOutProcess" file="test_suite\parkingManage\monthTicket\test_vipStrictInOutProcess.py" line="42" name="test_sentryCheckIn[send_data0-expect0]" time="0.642"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_vipStrictInOutProcess.TestVipStrictInOutProcess object at 0x0000000007B90390&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007B7BA58&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNum&apos;: &apos;粤Y13906&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171502, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;月票pytest9168&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤Y13906\\\\月票pytest9168请稍候&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤Y13906$月票pytest9168请稍候&apos;, ...}

    def test_sentryCheckIn(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端登记放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;], send_data[&apos;carInHandleType&apos;], &apos;${mytest.carIn_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\test_vipStrictInOutProcess.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007B7CF98&gt;
carNum = &apos;粤Y13906&apos;, carHandleType = &apos;登记放行&apos;, jobId = &apos;${mytest.carIn_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_vipStrictInOutProcess.TestVipStrictInOutProcess" file="test_suite\parkingManage\monthTicket\test_vipStrictInOutProcess.py" line="48" name="test_mockCarOut[send_data0-expect0]" time="5.037"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_vipStrictInOutProcess.TestVipStrictInOutProcess object at 0x0000000007976240&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNum&apos;: &apos;粤Y13906&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171502, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;月票pytest9168&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤Y13906\\\\月票pytest9168请稍候&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤Y13906$月票pytest9168请稍候&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟车辆出场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\test_vipStrictInOutProcess.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007E768D0&gt;
carNum = &apos;粤Y13906&apos;, mockType = 1, ytj_id = 20190507171503, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_vipStrictInOutProcess.TestVipStrictInOutProcess" file="test_suite\parkingManage\monthTicket\test_vipStrictInOutProcess.py" line="55" name="test_sentryCheckOut[send_data0-expect0]" time="0.455"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_vipStrictInOutProcess.TestVipStrictInOutProcess object at 0x0000000007B642E8&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007B7CF98&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNum&apos;: &apos;粤Y13906&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171502, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;月票pytest9168&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤Y13906\\\\月票pytest9168请稍候&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤Y13906$月票pytest9168请稍候&apos;, ...}

    def test_sentryCheckOut(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端登记放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;], send_data[&apos;carOutHandleType&apos;], &apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\test_vipStrictInOutProcess.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007D30B00&gt;
carNum = &apos;粤Y13906&apos;, carHandleType = &apos;确认放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.test_vipStrictInOutProcess.TestVipStrictInOutProcess" file="test_suite\parkingManage\monthTicket\test_vipStrictInOutProcess.py" line="61" name="test_checkCarInOutHistoryVIPType[send_data0-expect0]" time="8.324"><failure message="IndexError: list index out of range">self = &lt;test_vipStrictInOutProcess.TestVipStrictInOutProcess object at 0x0000000006B50940&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007E95B00&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNum&apos;: &apos;粤Y13906&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171502, ...}
expect = {&apos;checkCarInOutHistoryVIPTypeMsg&apos;: &apos;月票pytest9168&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;mockCarInScreenMsg&apos;: &apos;粤Y13906\\\\月票pytest9168请稍候&apos;, &apos;mockCarInVoiceMsg&apos;: &apos;$粤Y13906$月票pytest9168请稍候&apos;, ...}

    def test_checkCarInOutHistoryVIPType(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看进出场记录中查看到VIP类型&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
&gt;       result = re.json()[&quot;data&quot;][&quot;rows&quot;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\test_vipStrictInOutProcess.py:65: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.monthTicketFullPositionControl.test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge" file="test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py" line="24" name="test_createMonthTicketConfig[send_data0-expect0]" time="21.297"></testcase><testcase classname="test_suite.parkingManage.monthTicket.monthTicketFullPositionControl.test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge" file="test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py" line="30" name="test_openMonthTicketBill[send_data0-expect0]" time="9.434"></testcase><testcase classname="test_suite.parkingManage.monthTicket.monthTicketFullPositionControl.test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge" file="test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py" line="37" name="test_mockCarInA[send_data0-expect0]" time="5.042"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge object at 0x000000000768F320&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤T97036&apos;, &apos;carNumB&apos;: &apos;粤W42870&apos;, &apos;carNumList&apos;: &apos;粤T97036,粤W42870&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;满位控制8709&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;满位控制8709&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤T97036\\\\满位控制8709&apos;, ...}

    def test_mockCarInA(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆A进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumA&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000792DA90&gt;
carNum = &apos;粤T97036&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.monthTicketFullPositionControl.test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge" file="test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py" line="44" name="test_presentCarA[send_data0-expect0]" time="2.629"><failure message="IndexError: list index out of range">self = &lt;test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge object at 0x000000000727FF28&gt;
userLogin = &lt;common.Req.Req object at 0x00000000079B3860&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤T97036&apos;, &apos;carNumB&apos;: &apos;粤W42870&apos;, &apos;carNumList&apos;: &apos;粤T97036,粤W42870&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;满位控制8709&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;满位控制8709&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤T97036\\\\满位控制8709&apos;, ...}

    def test_presentCarA(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看在场记录&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&quot;parkName&quot;], send_data[&quot;carNumA&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py:48: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.monthTicketFullPositionControl.test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge" file="test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py" line="52" name="test_mockCarInB[send_data0-expect0]" time="5.037"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge object at 0x00000000079392E8&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤T97036&apos;, &apos;carNumB&apos;: &apos;粤W42870&apos;, &apos;carNumList&apos;: &apos;粤T97036,粤W42870&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;满位控制8709&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;满位控制8709&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤T97036\\\\满位控制8709&apos;, ...}

    def test_mockCarInB(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆B进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumB&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000079D8D30&gt;
carNum = &apos;粤W42870&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.monthTicketFullPositionControl.test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge" file="test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py" line="59" name="test_sentryCheckIn[send_data0-expect0]" time="0.482"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge object at 0x0000000007B64710&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007B63400&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤T97036&apos;, &apos;carNumB&apos;: &apos;粤W42870&apos;, &apos;carNumList&apos;: &apos;粤T97036,粤W42870&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;满位控制8709&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;满位控制8709&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤T97036\\\\满位控制8709&apos;, ...}

    def test_sentryCheckIn(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;车辆B登记放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNumB&apos;],send_data[&apos;carInHandleType&apos;],&apos;${mytest.carIn_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007D2BA58&gt;
carNum = &apos;粤W42870&apos;, carHandleType = &apos;登记放行&apos;, jobId = &apos;${mytest.carIn_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.monthTicketFullPositionControl.test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge" file="test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py" line="65" name="test_presentCarB[send_data0-expect0]" time="3.355"><failure message="IndexError: list index out of range">self = &lt;test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge object at 0x0000000006C17710&gt;
userLogin = &lt;common.Req.Req object at 0x00000000076A6940&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤T97036&apos;, &apos;carNumB&apos;: &apos;粤W42870&apos;, &apos;carNumList&apos;: &apos;粤T97036,粤W42870&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;满位控制8709&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;满位控制8709&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤T97036\\\\满位控制8709&apos;, ...}

    def test_presentCarB(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看在场记录&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&quot;parkName&quot;], send_data[&quot;carNumB&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py:69: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.monthTicketFullPositionControl.test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge" file="test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py" line="73" name="test_mockCarOutA[send_data0-expect0]" time="5.057"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge object at 0x0000000007D4C278&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤T97036&apos;, &apos;carNumB&apos;: &apos;粤W42870&apos;, &apos;carNumList&apos;: &apos;粤T97036,粤W42870&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;满位控制8709&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;满位控制8709&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤T97036\\\\满位控制8709&apos;, ...}

    def test_mockCarOutA(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆A离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumA&quot;],1,send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007980E10&gt;
carNum = &apos;粤T97036&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.monthTicketFullPositionControl.test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge" file="test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py" line="80" name="test_carLeaveHistoryA[send_data0-expect0]" time="8.417"><failure message="IndexError: list index out of range">self = &lt;test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge object at 0x0000000006B19F98&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007D50198&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤T97036&apos;, &apos;carNumB&apos;: &apos;粤W42870&apos;, &apos;carNumList&apos;: &apos;粤T97036,粤W42870&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;满位控制8709&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;满位控制8709&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤T97036\\\\满位控制8709&apos;, ...}

    def test_carLeaveHistoryA(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看进出场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;], send_data[&quot;carNumA&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py:84: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.monthTicketFullPositionControl.test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge" file="test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py" line="88" name="test_mockCarOutB[send_data0-expect0]" time="5.026"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge object at 0x00000000077449E8&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤T97036&apos;, &apos;carNumB&apos;: &apos;粤W42870&apos;, &apos;carNumList&apos;: &apos;粤T97036,粤W42870&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;满位控制8709&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;满位控制8709&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤T97036\\\\满位控制8709&apos;, ...}

    def test_mockCarOutB(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumB&quot;],1,send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000799E0B8&gt;
carNum = &apos;粤W42870&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.monthTicketFullPositionControl.test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge" file="test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py" line="95" name="test_carLeaveHistoryB[send_data0-expect0]" time="7.869"><failure message="IndexError: list index out of range">self = &lt;test_monthTicketFullPositionStrictInVipCharge.TestMonthTicketFullPositionStrictInVipCharge object at 0x0000000007E91E80&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007B5E710&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤T97036&apos;, &apos;carNumB&apos;: &apos;粤W42870&apos;, &apos;carNumList&apos;: &apos;粤T97036,粤W42870&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;满位控制8709&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;满位控制8709&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤T97036\\\\满位控制8709&apos;, ...}

    def test_carLeaveHistoryB(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看进出场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;], send_data[&quot;carNumB&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\monthTicketFullPositionControl\test_monthTicketFullPositionStrictInVipCharge.py:99: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py" line="23" name="test_createMonthTicketConfig[send_data0-expect0]" time="19.137"></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py" line="29" name="test_openMonthTicketBill[send_data0-expect0]" time="7.844"><failure message="AssertionError">self = &lt;test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess object at 0x000000000792D748&gt;
userLogin = &lt;common.Req.Req object at 0x00000000079B0320&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777请稍候&apos;, ...}

    def test_openMonthTicketBill(self, userLogin, send_data, expect):
        &quot;&quot;&quot;用自多位多车月票类型开通月票&quot;&quot;&quot;
        re = MonthTicketBill(userLogin).openMonthTicketBill(send_data[&apos;carNumList&apos;], send_data[&apos;ticketTypeName&apos;], send_data[&apos;timeperiodListStr&apos;])
        result = re.json()
&gt;       Assertions().assert_in_text(result, expect[&quot;openMonthTicketBillMsg&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x00000000076933C8&gt;
body = {&apos;message&apos;: &apos;超过月票类型的有效期，无法开通&apos;, &apos;resultCode&apos;: 4, &apos;status&apos;: 2}
expected_msg = &apos;操作成功&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py" line="36" name="test_mockCarInA[send_data0-expect0]" time="5.036"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess object at 0x0000000007D28F60&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777请稍候&apos;, ...}

    def test_mockCarInA(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆A进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumA&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007B58828&gt;
carNum = &apos;粤Y98769&apos;, mockType = 0, ytj_id = 20190507171502, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py" line="43" name="test_sentryCheckCarInHandleA[send_data0-expect0]" time="0.855"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess object at 0x0000000007D50780&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000079736A0&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777请稍候&apos;, ...}

    def test_sentryCheckCarInHandleA(self,sentryLogin,send_data, expect):
        &quot;&quot;&quot;岗亭端登记放行车辆A&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNumA&apos;],send_data[&apos;carInHandleType&apos;],&apos;${mytest.carIn_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007E72BA8&gt;
carNum = &apos;粤Y98769&apos;, carHandleType = &apos;登记放行&apos;, jobId = &apos;${mytest.carIn_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py" line="49" name="test_presentCarA[send_data0-expect0]" time="4.945"><failure message="IndexError: list index out of range">self = &lt;test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess object at 0x00000000079FF390&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007D390F0&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777请稍候&apos;, ...}

    def test_presentCarA(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看在场记录&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&quot;parkName&quot;], send_data[&quot;carNumA&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py:53: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py" line="57" name="test_mockCarInB[send_data0-expect0]" time="5.025"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess object at 0x0000000007D4C390&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777请稍候&apos;, ...}

    def test_mockCarInB(self, send_data, expect):
        &quot;&quot;&quot;模拟车B辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumB&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007E87B00&gt;
carNum = &apos;粤Y98779&apos;, mockType = 0, ytj_id = 20190507171502, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py" line="64" name="test_sentryCheckCarInHandleB[send_data0-expect0]" time="0.560"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess object at 0x0000000007D4C860&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007973278&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777请稍候&apos;, ...}

    def test_sentryCheckCarInHandleB(self,sentryLogin,send_data, expect):
        &quot;&quot;&quot;岗亭端登记放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNumB&apos;],send_data[&apos;carInHandleType&apos;],&apos;${mytest.carIn_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py:67: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007E72D68&gt;
carNum = &apos;粤Y98779&apos;, carHandleType = &apos;登记放行&apos;, jobId = &apos;${mytest.carIn_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py" line="70" name="test_presentCarB[send_data0-expect0]" time="2.831"><failure message="IndexError: list index out of range">self = &lt;test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess object at 0x0000000007EA6940&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007E7C2B0&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777请稍候&apos;, ...}

    def test_presentCarB(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看在场记录&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&quot;parkName&quot;], send_data[&quot;carNumB&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py:74: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py" line="78" name="test_mockCarOutA[send_data0-expect0]" time="5.038"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess object at 0x0000000007BF4128&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777请稍候&apos;, ...}

    def test_mockCarOutA(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆A离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumA&quot;],1,send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007EA69B0&gt;
carNum = &apos;粤Y98769&apos;, mockType = 1, ytj_id = 20190507171503, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py" line="85" name="test_sentryCheckOutCarA[send_data0-expect0]" time="0.657"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess object at 0x0000000007E7FD30&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000076FF160&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777请稍候&apos;, ...}

    def test_sentryCheckOutCarA(self,sentryLogin,send_data, expect):
        &quot;&quot;&quot;岗亭端确认放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNumA&apos;], send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007E91F60&gt;
carNum = &apos;粤Y98769&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py" line="91" name="test_carLeaveHistoryA[send_data0-expect0]" time="8.495"><failure message="IndexError: list index out of range">self = &lt;test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess object at 0x0000000007EA87B8&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007D5D048&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777请稍候&apos;, ...}

    def test_carLeaveHistoryA(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看进出场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;], send_data[&quot;carNumA&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py:95: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py" line="99" name="test_mockCarOutB[send_data0-expect0]" time="5.036"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess object at 0x0000000007BEB940&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777请稍候&apos;, ...}

    def test_mockCarOutB(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumB&quot;],1,send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007BE3128&gt;
carNum = &apos;粤Y98779&apos;, mockType = 1, ytj_id = 20190507171503, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py" line="106" name="test_sentryPay[send_data0-expect0]" time="0.448"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess object at 0x0000000007E91048&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007EB2E80&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777请稍候&apos;, ...}

    def test_sentryPay(self, sentryLogin,send_data, expect):
        &quot;&quot;&quot;岗亭端缴费&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&quot;carNumB&quot;], send_data[&apos;carOutHandleType&apos;], &apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007BE5C18&gt;
carNum = &apos;粤Y98779&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py" line="112" name="test_parkingBillDetail[send_data0-expect0]" time="9.447"><failure message="IndexError: list index out of range">self = &lt;test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess object at 0x0000000007BE4B00&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007EA8C88&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777请稍候&apos;, ...}

    def test_parkingBillDetail(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看车辆B收费记录&quot;&quot;&quot;
        re = Information(userLogin).getParkingBillDetail(send_data[&quot;parkName&quot;], send_data[&quot;carNumB&quot;])
&gt;       result = re.json()[&quot;data&quot;][&quot;rows&quot;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py:116: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py" line="118" name="test_carLeaveHistoryB[send_data0-expect0]" time="7.851"><failure message="IndexError: list index out of range">self = &lt;test_oneParkingSpaceTwoCarStrictInProcess.TestOneParkingSpaceTwoCarStrictInInProcess object at 0x0000000007EBBE80&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007D5D1D0&gt;
send_data = {&apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777请稍候&apos;, ...}

    def test_carLeaveHistoryB(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看进出场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;], send_data[&quot;carNumB&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarStrictInProcess.py:122: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py" line="24" name="test_createMonthTicketConfig[send_data0-expect0]" time="21.510"></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py" line="30" name="test_openMonthTicketBill[send_data0-expect0]" time="7.426"><failure message="AssertionError">self = &lt;test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess object at 0x0000000007BE4B38&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007BF30F0&gt;
send_data = {&apos;autoSwitchVip&apos;: 1, &apos;carNumA&apos;: &apos;粤Y98765&apos;, &apos;carNumB&apos;: &apos;粤Y98777&apos;, &apos;carNumList&apos;: &apos;粤Y98765,粤Y98777&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;carBEnterVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;carBLeaveVipTypeStrMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, ...}

    def test_openMonthTicketBill(self, userLogin, send_data, expect):
        &quot;&quot;&quot;用自定义月票类型开通月票&quot;&quot;&quot;
        re = MonthTicketBill(userLogin).openMonthTicketBill(send_data[&apos;carNumList&apos;], send_data[&apos;ticketTypeName&apos;], send_data[&apos;timeperiodListStr&apos;])
        result = re.json()
&gt;       Assertions().assert_in_text(result, expect[&quot;openMonthTicketBillMsg&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x0000000007EB29B0&gt;
body = {&apos;message&apos;: &apos;超过月票类型的有效期，无法开通&apos;, &apos;resultCode&apos;: 4, &apos;status&apos;: 2}
expected_msg = &apos;操作成功&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py" line="37" name="test_mockCarAIn[send_data0-expect0]" time="5.034"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess object at 0x0000000007BE4320&gt;
send_data = {&apos;autoSwitchVip&apos;: 1, &apos;carNumA&apos;: &apos;粤Y98765&apos;, &apos;carNumB&apos;: &apos;粤Y98777&apos;, &apos;carNumList&apos;: &apos;粤Y98765,粤Y98777&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;carBEnterVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;carBLeaveVipTypeStrMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, ...}

    def test_mockCarAIn(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆A进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumA&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007BF5EB8&gt;
carNum = &apos;粤Y98765&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py" line="44" name="test_presentCarA[send_data0-expect0]" time="3.516"><failure message="IndexError: list index out of range">self = &lt;test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess object at 0x0000000007EA91D0&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007BE31D0&gt;
send_data = {&apos;autoSwitchVip&apos;: 1, &apos;carNumA&apos;: &apos;粤Y98765&apos;, &apos;carNumB&apos;: &apos;粤Y98777&apos;, &apos;carNumList&apos;: &apos;粤Y98765,粤Y98777&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;carBEnterVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;carBLeaveVipTypeStrMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, ...}

    def test_presentCarA(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看在场记录&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&quot;parkName&quot;], send_data[&quot;carNumA&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py:48: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py" line="52" name="test_mockCarBIn[send_data0-expect0]" time="5.038"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess object at 0x0000000007C132E8&gt;
send_data = {&apos;autoSwitchVip&apos;: 1, &apos;carNumA&apos;: &apos;粤Y98765&apos;, &apos;carNumB&apos;: &apos;粤Y98777&apos;, &apos;carNumList&apos;: &apos;粤Y98765,粤Y98777&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;carBEnterVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;carBLeaveVipTypeStrMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, ...}

    def test_mockCarBIn(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆B进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumB&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007C07CC0&gt;
carNum = &apos;粤Y98777&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py" line="59" name="test_presentCarB[send_data0-expect0]" time="3.194"><failure message="IndexError: list index out of range">self = &lt;test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess object at 0x0000000007BF5908&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007BE7710&gt;
send_data = {&apos;autoSwitchVip&apos;: 1, &apos;carNumA&apos;: &apos;粤Y98765&apos;, &apos;carNumB&apos;: &apos;粤Y98777&apos;, &apos;carNumList&apos;: &apos;粤Y98765,粤Y98777&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;carBEnterVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;carBLeaveVipTypeStrMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, ...}

    def test_presentCarB(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看在场记录&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&quot;parkName&quot;], send_data[&quot;carNumB&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py:63: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py" line="67" name="test_mockCarAOut[send_data0-expect0]" time="5.034"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess object at 0x0000000007ED7B38&gt;
send_data = {&apos;autoSwitchVip&apos;: 1, &apos;carNumA&apos;: &apos;粤Y98765&apos;, &apos;carNumB&apos;: &apos;粤Y98777&apos;, &apos;carNumList&apos;: &apos;粤Y98765,粤Y98777&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;carBEnterVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;carBLeaveVipTypeStrMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, ...}

    def test_mockCarAOut(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆A离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumA&quot;],1,send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007ED7D30&gt;
carNum = &apos;粤Y98765&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py" line="74" name="test_carALeaveHistory[send_data0-expect0]" time="7.593"><failure message="IndexError: list index out of range">self = &lt;test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess object at 0x0000000007ED7C50&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007BE41D0&gt;
send_data = {&apos;autoSwitchVip&apos;: 1, &apos;carNumA&apos;: &apos;粤Y98765&apos;, &apos;carNumB&apos;: &apos;粤Y98777&apos;, &apos;carNumList&apos;: &apos;粤Y98765,粤Y98777&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;carBEnterVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;carBLeaveVipTypeStrMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, ...}

    def test_carALeaveHistory(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看进出场记录A&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;], send_data[&quot;carNumA&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py:78: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py" line="82" name="test_mockCarOutB[send_data0-expect0]" time="5.037"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess object at 0x0000000007F25B00&gt;
send_data = {&apos;autoSwitchVip&apos;: 1, &apos;carNumA&apos;: &apos;粤Y98765&apos;, &apos;carNumB&apos;: &apos;粤Y98777&apos;, &apos;carNumList&apos;: &apos;粤Y98765,粤Y98777&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;carBEnterVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;carBLeaveVipTypeStrMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, ...}

    def test_mockCarOutB(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumB&quot;],1,send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007F25898&gt;
carNum = &apos;粤Y98777&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py" line="89" name="test_sentryPay[send_data0-expect0]" time="0.527"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess object at 0x0000000007F2B4E0&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007F000B8&gt;
send_data = {&apos;autoSwitchVip&apos;: 1, &apos;carNumA&apos;: &apos;粤Y98765&apos;, &apos;carNumB&apos;: &apos;粤Y98777&apos;, &apos;carNumList&apos;: &apos;粤Y98765,粤Y98777&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;carBEnterVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;carBLeaveVipTypeStrMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, ...}

    def test_sentryPay(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;岗亭收费处收费-查看车辆离场信息&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNumB&apos;], send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007EDA0B8&gt;
carNum = &apos;粤Y98777&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py" line="95" name="test_parkingBillDetail[send_data0-expect0]" time="8.209"><failure message="IndexError: list index out of range">self = &lt;test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess object at 0x0000000007EB3978&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007F25588&gt;
send_data = {&apos;autoSwitchVip&apos;: 1, &apos;carNumA&apos;: &apos;粤Y98765&apos;, &apos;carNumB&apos;: &apos;粤Y98777&apos;, &apos;carNumList&apos;: &apos;粤Y98765,粤Y98777&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;carBEnterVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;carBLeaveVipTypeStrMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, ...}

    def test_parkingBillDetail(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看收费记录&quot;&quot;&quot;
        re = Information(userLogin).getParkingBillDetail(send_data[&quot;parkName&quot;],send_data[&quot;carNumB&quot;])
&gt;       result = re.json()[&quot;data&quot;][&quot;rows&quot;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py:99: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py" line="101" name="test_CarBLeaveHistory[send_data0-expect0]" time="7.492"><failure message="IndexError: list index out of range">self = &lt;test_oneParkingSpaceTwoCarWideInInChangeVipProcess.TestOneParkingSpaceTwoCarWideInInChangeVipProcess object at 0x0000000007F26748&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007BFC160&gt;
send_data = {&apos;autoSwitchVip&apos;: 1, &apos;carNumA&apos;: &apos;粤Y98765&apos;, &apos;carNumB&apos;: &apos;粤Y98777&apos;, &apos;carNumList&apos;: &apos;粤Y98765,粤Y98777&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;carBEnterVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;carBLeaveVipTypeStrMsg&apos;: &apos;一位多车在场转8777&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, ...}

    def test_CarBLeaveHistory(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看进出场记录B&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;], send_data[&quot;carNumB&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInInChangeVipProcess.py:105: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py" line="24" name="test_createMonthTicketConfig[send_data0-expect0]" time="19.751"></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py" line="30" name="test_openMonthTicketBill[send_data0-expect0]" time="9.823"><failure message="AssertionError">self = &lt;test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess object at 0x0000000007BA2DD8&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007BCD3C8&gt;
send_data = {&apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777&apos;, ...}

    def test_openMonthTicketBill(self, userLogin, send_data, expect):
        &quot;&quot;&quot;用自多位多车月票类型开通月票&quot;&quot;&quot;
        re = MonthTicketBill(userLogin).openMonthTicketBill(send_data[&apos;carNumList&apos;], send_data[&apos;ticketTypeName&apos;], send_data[&apos;timeperiodListStr&apos;])
        result = re.json()
&gt;       Assertions().assert_in_text(result, expect[&quot;openMonthTicketBillMsg&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x0000000007F2FEF0&gt;
body = {&apos;message&apos;: &apos;超过月票类型的有效期，无法开通&apos;, &apos;resultCode&apos;: 4, &apos;status&apos;: 2}
expected_msg = &apos;操作成功&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py" line="38" name="test_mockCarInA[send_data0-expect0]" time="5.050"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess object at 0x0000000007BA2EB8&gt;
send_data = {&apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777&apos;, ...}

    def test_mockCarInA(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆A进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumA&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007F2F588&gt;
carNum = &apos;粤Y98769&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py" line="45" name="test_presentCarA[send_data0-expect0]" time="3.384"><failure message="IndexError: list index out of range">self = &lt;test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess object at 0x0000000007F007F0&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007BA6A20&gt;
send_data = {&apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777&apos;, ...}

    def test_presentCarA(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看在场记录&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&quot;parkName&quot;], send_data[&quot;carNumA&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py:49: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py" line="53" name="test_mockCarInB[send_data0-expect0]" time="5.038"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess object at 0x0000000007BD8B00&gt;
send_data = {&apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777&apos;, ...}

    def test_mockCarInB(self, send_data, expect):
        &quot;&quot;&quot;模拟车B辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumB&quot;],0,send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007EF4F28&gt;
carNum = &apos;粤Y98779&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py" line="60" name="test_presentCarB[send_data0-expect0]" time="3.208"><failure message="IndexError: list index out of range">self = &lt;test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess object at 0x0000000007EA96D8&gt;
userLogin = &lt;common.Req.Req object at 0x000000000799E518&gt;
send_data = {&apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777&apos;, ...}

    def test_presentCarB(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看在场记录&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&quot;parkName&quot;], send_data[&quot;carNumB&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py:64: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py" line="68" name="test_mockCarOutA[send_data0-expect0]" time="5.036"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess object at 0x0000000007624940&gt;
send_data = {&apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777&apos;, ...}

    def test_mockCarOutA(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆A离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumA&quot;],1,send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007F002E8&gt;
carNum = &apos;粤Y98769&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py" line="75" name="test_carLeaveHistoryA[send_data0-expect0]" time="8.068"><failure message="IndexError: list index out of range">self = &lt;test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess object at 0x0000000007F04438&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007A01550&gt;
send_data = {&apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777&apos;, ...}

    def test_carLeaveHistoryA(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看进出场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;], send_data[&quot;carNumA&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py:79: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py" line="83" name="test_mockCarOutB[send_data0-expect0]" time="5.037"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess object at 0x0000000007BEB4A8&gt;
send_data = {&apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777&apos;, ...}

    def test_mockCarOutB(self, send_data, expect):
        &quot;&quot;&quot;模拟车辆离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNumB&quot;],1,send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007B6D7B8&gt;
carNum = &apos;粤Y98779&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py" line="91" name="test_sentryPay[send_data0-expect0]" time="0.645"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess object at 0x0000000007E7F160&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007EA9668&gt;
send_data = {&apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777&apos;, ...}

    def test_sentryPay(self, sentryLogin,send_data, expect):
        &quot;&quot;&quot;岗亭端缴费&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&quot;carNumB&quot;], send_data[&apos;carOutHandleType&apos;], &apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007911E48&gt;
carNum = &apos;粤Y98779&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py" line="97" name="test_parkingBillDetail[send_data0-expect0]" time="9.048"><failure message="AssertionError">self = &lt;test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess object at 0x0000000007B224A8&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007955EB8&gt;
send_data = {&apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777&apos;, ...}

    def test_parkingBillDetail(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看车辆B收费记录&quot;&quot;&quot;
        re = Information(userLogin).getParkingBillDetail(send_data[&quot;parkName&quot;], send_data[&quot;carNumB&quot;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;]
&gt;       Assertions().assert_in_text(result, expect[&quot;parkingBillDetailB&quot;])

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x0000000007D28E80&gt;, body = []
expected_msg = &apos;粤y98779&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.monthTicket.oneParkingSpaceTwoCar.test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess" file="test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py" line="103" name="test_carLeaveHistoryB[send_data0-expect0]" time="9.513"><failure message="IndexError: list index out of range">self = &lt;test_oneParkingSpaceTwoCarWideInProcess.TestOneParkingSpaceTwoCarWideInProcess object at 0x0000000007971C88&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007EA9898&gt;
send_data = {&apos;carNumA&apos;: &apos;粤Y98769&apos;, &apos;carNumB&apos;: &apos;粤Y98779&apos;, &apos;carNumList&apos;: &apos;粤Y98769,粤Y98779&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, ...}
expect = {&apos;carAInOutVipTypeMsg&apos;: &apos;一位多车在场不转8777&apos;, &apos;carInOutVipTypeStrMsg&apos;: &apos;临时车&apos;, &apos;createMonthTicketConfigMsg&apos;: &apos;ok&apos;, &apos;inscreenAMsg&apos;: &apos;粤Y98769\\\\一位多车在场不转8777&apos;, ...}

    def test_carLeaveHistoryB(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看进出场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;], send_data[&quot;carNumB&quot;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\monthTicket\oneParkingSpaceTwoCar\test_oneParkingSpaceTwoCarWideInProcess.py:107: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarSetting.TestEmergencyCarSetting" file="test_suite\parkingManage\parkCarType\test_emergencyCarSetting.py" line="22" name="test_createEmergencyCarConfig[send_data0-expect0]" time="13.154"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarSetting.TestEmergencyCarSetting" file="test_suite\parkingManage\parkCarType\test_emergencyCarSetting.py" line="28" name="test_openEmergencySetting[send_data0-expect0]" time="9.037"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarSetting.TestEmergencyCarSetting" file="test_suite\parkingManage\parkCarType\test_emergencyCarSetting.py" line="34" name="test_updateEmergencyCarNum[send_data0-expect0]" time="13.928"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarSetting.TestEmergencyCarSetting" file="test_suite\parkingManage\parkCarType\test_emergencyCarSetting.py" line="40" name="test_mockCarIn[send_data0-expect0]" time="5.046"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_emergencyCarSetting.TestEmergencyCarSetting object at 0x00000000079D8828&gt;
send_data = {&apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newCarNum&apos;: &apos;粤N67981&apos;, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟告警车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;newCarNum&quot;], 0, send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\parkCarType\test_emergencyCarSetting.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007976358&gt;
carNum = &apos;粤N67981&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarSetting.TestEmergencyCarSetting" file="test_suite\parkingManage\parkCarType\test_emergencyCarSetting.py" line="46" name="test_checkEmergencyCarInRecord[send_data0-expect0]" time="4.348"><failure message="AssertionError">self = &lt;test_emergencyCarSetting.TestEmergencyCarSetting object at 0x0000000007F269E8&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007968940&gt;
send_data = {&apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newCarNum&apos;: &apos;粤N67981&apos;, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_checkEmergencyCarInRecord(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看告警进场车辆记录&quot;&quot;&quot;
        re = Information(userLogin).getEmergencyCarRecord(send_data[&apos;parkName&apos;], send_data[&apos;carType&apos;],send_data[&apos;newCarNum&apos;])
        result = re.json()
&gt;       Assertions().assert_in_text(result, expect[&quot;checkEmergencyCarInRecordMsg&quot;])

..\test_suite\parkingManage\parkCarType\test_emergencyCarSetting.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x0000000007BBD5F8&gt;
body = {&apos;data&apos;: {&apos;rows&apos;: [], &apos;total&apos;: 0}, &apos;message&apos;: &apos;OK&apos;, &apos;resultCode&apos;: 0, &apos;status&apos;: 1}
expected_msg = &apos;进入智泊云接口测试专用停车场&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarSetting.TestEmergencyCarSetting" file="test_suite\parkingManage\parkCarType\test_emergencyCarSetting.py" line="52" name="test_mockCarOut[send_data0-expect0]" time="5.036"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_emergencyCarSetting.TestEmergencyCarSetting object at 0x0000000006AC5128&gt;
send_data = {&apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newCarNum&apos;: &apos;粤N67981&apos;, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟告警车辆出场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;newCarNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\parkCarType\test_emergencyCarSetting.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007B4F128&gt;
carNum = &apos;粤N67981&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarSetting.TestEmergencyCarSetting" file="test_suite\parkingManage\parkCarType\test_emergencyCarSetting.py" line="58" name="test_sentryPay[send_data0-expect0]" time="0.571"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_emergencyCarSetting.TestEmergencyCarSetting object at 0x0000000007E95278&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000079B37B8&gt;
send_data = {&apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newCarNum&apos;: &apos;粤N67981&apos;, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端缴费&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&quot;newCarNum&quot;],send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\parkCarType\test_emergencyCarSetting.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007976B38&gt;
carNum = &apos;粤N67981&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarSetting.TestEmergencyCarSetting" file="test_suite\parkingManage\parkCarType\test_emergencyCarSetting.py" line="64" name="test_checkEmergencyCarOutRecord[send_data0-expect0]" time="3.210"><failure message="AssertionError">self = &lt;test_emergencyCarSetting.TestEmergencyCarSetting object at 0x0000000007BEB160&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007BE36D8&gt;
send_data = {&apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newCarNum&apos;: &apos;粤N67981&apos;, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_checkEmergencyCarOutRecord(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看告警进场车辆记录&quot;&quot;&quot;
        re = Information(userLogin).getEmergencyCarRecord(send_data[&apos;parkName&apos;], send_data[&apos;carType&apos;],send_data[&apos;newCarNum&apos;])
        result = re.json()
&gt;       Assertions().assert_in_text(result, expect[&quot;checkEmergencyCarOutRecordMsg&quot;])

..\test_suite\parkingManage\parkCarType\test_emergencyCarSetting.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x0000000007BCC0F0&gt;
body = {&apos;data&apos;: {&apos;rows&apos;: [], &apos;total&apos;: 0}, &apos;message&apos;: &apos;OK&apos;, &apos;resultCode&apos;: 0, &apos;status&apos;: 1}
expected_msg = &apos;离开智泊云接口测试专用停车场&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarSetting.TestEmergencyCarSetting" file="test_suite\parkingManage\parkCarType\test_emergencyCarSetting.py" line="70" name="test_delEmergencyCarConfig[send_data0-expect0]" time="8.757"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarY.TestEmergencyCarY" file="test_suite\parkingManage\parkCarType\test_emergencyCarY.py" line="22" name="test_createEmergencyCarConfig[send_data0-expect0]" time="13.385"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarY.TestEmergencyCarY" file="test_suite\parkingManage\parkCarType\test_emergencyCarY.py" line="28" name="test_openEmergencySetting[send_data0-expect0]" time="7.114"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarY.TestEmergencyCarY" file="test_suite\parkingManage\parkCarType\test_emergencyCarY.py" line="34" name="test_updateEmergencyCarNum[send_data0-expect0]" time="14.109"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarY.TestEmergencyCarY" file="test_suite\parkingManage\parkCarType\test_emergencyCarY.py" line="40" name="test_mockCarIn[send_data0-expect0]" time="5.041"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_emergencyCarY.TestEmergencyCarY object at 0x0000000007EE8208&gt;
send_data = {&apos;carNum&apos;: &apos;湘A61873&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟告警车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 0, send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\parkCarType\test_emergencyCarY.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007BE7710&gt;
carNum = &apos;湘A61873&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarY.TestEmergencyCarY" file="test_suite\parkingManage\parkCarType\test_emergencyCarY.py" line="46" name="test_checkEmergencyCarInRecord[send_data0-expect0]" time="3.855"><failure message="AssertionError">self = &lt;test_emergencyCarY.TestEmergencyCarY object at 0x0000000007E76470&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007BA6F98&gt;
send_data = {&apos;carNum&apos;: &apos;湘A61873&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_checkEmergencyCarInRecord(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看告警进场车辆记录&quot;&quot;&quot;
        re = Information(userLogin).getEmergencyCarRecord(send_data[&apos;parkName&apos;], send_data[&apos;carType&apos;],send_data[&apos;carNum&apos;])
        result = re.json()
&gt;       Assertions().assert_in_text(result, expect[&quot;checkEmergencyCarInRecordMsg&quot;])

..\test_suite\parkingManage\parkCarType\test_emergencyCarY.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x0000000007976198&gt;
body = {&apos;data&apos;: {&apos;rows&apos;: [], &apos;total&apos;: 0}, &apos;message&apos;: &apos;OK&apos;, &apos;resultCode&apos;: 0, &apos;status&apos;: 1}
expected_msg = &apos;进入智泊云接口测试专用停车场&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarY.TestEmergencyCarY" file="test_suite\parkingManage\parkCarType\test_emergencyCarY.py" line="52" name="test_mockCarOut[send_data0-expect0]" time="5.042"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_emergencyCarY.TestEmergencyCarY object at 0x00000000079D8C88&gt;
send_data = {&apos;carNum&apos;: &apos;湘A61873&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟告警车辆出场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\parkCarType\test_emergencyCarY.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007BC6828&gt;
carNum = &apos;湘A61873&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarY.TestEmergencyCarY" file="test_suite\parkingManage\parkCarType\test_emergencyCarY.py" line="58" name="test_sentryPay[send_data0-expect0]" time="0.520"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_emergencyCarY.TestEmergencyCarY object at 0x0000000008161F28&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007BBD940&gt;
send_data = {&apos;carNum&apos;: &apos;湘A61873&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端缴费&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&quot;carNum&quot;],send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\parkCarType\test_emergencyCarY.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007B58CC0&gt;
carNum = &apos;湘A61873&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarY.TestEmergencyCarY" file="test_suite\parkingManage\parkCarType\test_emergencyCarY.py" line="64" name="test_checkEmergencyCarOutRecord[send_data0-expect0]" time="2.395"><failure message="AssertionError">self = &lt;test_emergencyCarY.TestEmergencyCarY object at 0x0000000007BCC748&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007BA0F98&gt;
send_data = {&apos;carNum&apos;: &apos;湘A61873&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_checkEmergencyCarOutRecord(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看告警进场车辆记录&quot;&quot;&quot;
        re = Information(userLogin).getEmergencyCarRecord(send_data[&apos;parkName&apos;], send_data[&apos;carType&apos;],send_data[&apos;carNum&apos;])
        result = re.json()
&gt;       Assertions().assert_in_text(result, expect[&quot;checkEmergencyCarOutRecordMsg&quot;])

..\test_suite\parkingManage\parkCarType\test_emergencyCarY.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x00000000081C24E0&gt;
body = {&apos;data&apos;: {&apos;rows&apos;: [], &apos;total&apos;: 0}, &apos;message&apos;: &apos;OK&apos;, &apos;resultCode&apos;: 0, &apos;status&apos;: 1}
expected_msg = &apos;离开智泊云接口测试专用停车场&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_emergencyCarY.TestEmergencyCarY" file="test_suite\parkingManage\parkCarType\test_emergencyCarY.py" line="70" name="test_delEmergencyCarConfig[send_data0-expect0]" time="7.961"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarInOut.TestNotEmergencyCarInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarInOut.py" line="22" name="test_createEmergencyCarConfig[send_data0-expect0]" time="13.505"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarInOut.TestNotEmergencyCarInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarInOut.py" line="28" name="test_openEmergencySetting[send_data0-expect0]" time="7.302"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarInOut.TestNotEmergencyCarInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarInOut.py" line="34" name="test_updateEmergencyCarNum[send_data0-expect0]" time="14.240"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarInOut.TestNotEmergencyCarInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarInOut.py" line="40" name="test_mockCarIn[send_data0-expect0]" time="5.045"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_notEmergencyCarInOut.TestNotEmergencyCarInOut object at 0x00000000081C2BE0&gt;
send_data = {&apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newCarNum&apos;: &apos;粤K23146&apos;, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟非告警车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;oldCarNum&quot;], 0, send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\parkCarType\test_notEmergencyCarInOut.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007BDEB38&gt;
carNum = &apos;粤Q36182&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarInOut.TestNotEmergencyCarInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarInOut.py" line="46" name="test_checkEmergencyCarInRecord[send_data0-expect0]" time="3.013"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarInOut.TestNotEmergencyCarInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarInOut.py" line="52" name="test_mockCarOut[send_data0-expect0]" time="5.046"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_notEmergencyCarInOut.TestNotEmergencyCarInOut object at 0x00000000081A8F60&gt;
send_data = {&apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newCarNum&apos;: &apos;粤K23146&apos;, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟告警车辆出场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;oldCarNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\parkCarType\test_notEmergencyCarInOut.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000081C2358&gt;
carNum = &apos;粤Q36182&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarInOut.TestNotEmergencyCarInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarInOut.py" line="58" name="test_sentryPay[send_data0-expect0]" time="0.679"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_notEmergencyCarInOut.TestNotEmergencyCarInOut object at 0x00000000081A8EB8&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000081AA320&gt;
send_data = {&apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newCarNum&apos;: &apos;粤K23146&apos;, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端缴费&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&quot;oldCarNum&quot;],send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\parkCarType\test_notEmergencyCarInOut.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x00000000081AAA58&gt;
carNum = &apos;粤Q36182&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarInOut.TestNotEmergencyCarInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarInOut.py" line="64" name="test_checkEmergencyCarOutRecord[send_data0-expect0]" time="3.061"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarInOut.TestNotEmergencyCarInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarInOut.py" line="70" name="test_delEmergencyCarConfig[send_data0-expect0]" time="8.357"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarYInOut.TestNotEmergencyCarYInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarYInOut.py" line="22" name="test_createEmergencyCarConfig[send_data0-expect0]" time="13.915"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarYInOut.TestNotEmergencyCarYInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarYInOut.py" line="28" name="test_openEmergencySetting[send_data0-expect0]" time="7.140"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarYInOut.TestNotEmergencyCarYInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarYInOut.py" line="34" name="test_updateEmergencyCarNum[send_data0-expect0]" time="13.571"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarYInOut.TestNotEmergencyCarYInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarYInOut.py" line="40" name="test_mockCarIn[send_data0-expect0]" time="5.040"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_notEmergencyCarYInOut.TestNotEmergencyCarYInOut object at 0x00000000076FFF98&gt;
send_data = {&apos;carNum&apos;: &apos;粤Y75428&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟非告警车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 0, send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\parkCarType\test_notEmergencyCarYInOut.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000819E048&gt;
carNum = &apos;粤Y75428&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarYInOut.TestNotEmergencyCarYInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarYInOut.py" line="46" name="test_checkEmergencyCarInRecord[send_data0-expect0]" time="2.706"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarYInOut.TestNotEmergencyCarYInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarYInOut.py" line="52" name="test_mockCarOut[send_data0-expect0]" time="5.048"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_notEmergencyCarYInOut.TestNotEmergencyCarYInOut object at 0x0000000006CCD8D0&gt;
send_data = {&apos;carNum&apos;: &apos;粤Y75428&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟非告警车辆出场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\parkCarType\test_notEmergencyCarYInOut.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000816C8D0&gt;
carNum = &apos;粤Y75428&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarYInOut.TestNotEmergencyCarYInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarYInOut.py" line="58" name="test_sentryPay[send_data0-expect0]" time="1.188"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_notEmergencyCarYInOut.TestNotEmergencyCarYInOut object at 0x0000000006CCDEF0&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000081C2048&gt;
send_data = {&apos;carNum&apos;: &apos;粤Y75428&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carType&apos;: &apos;指定车辆&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;checkEmergencyCarInRecordMsg&apos;: &apos;进入智泊云接口测试专用停车场&apos;, &apos;checkEmergencyCarOutRecordMsg&apos;: &apos;离开智泊云接口测试专用停车场&apos;, &apos;createEmergencyCarConfigMsg&apos;: &apos;保存成功&apos;, &apos;delEmergencyCarConfigMsg&apos;: &apos;删除成功&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端缴费&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&quot;carNum&quot;],send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\parkCarType\test_notEmergencyCarYInOut.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000008164B00&gt;
carNum = &apos;粤Y75428&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarYInOut.TestNotEmergencyCarYInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarYInOut.py" line="64" name="test_checkEmergencyCarOutRecord[send_data0-expect0]" time="2.450"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_notEmergencyCarYInOut.TestNotEmergencyCarYInOut" file="test_suite\parkingManage\parkCarType\test_notEmergencyCarYInOut.py" line="70" name="test_delEmergencyCarConfig[send_data0-expect0]" time="8.814"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkBlacklistUsed.TestParkBlacklistUsed" file="test_suite\parkingManage\parkCarType\test_parkBlacklistUsed.py" line="22" name="test_addBlacklistSpecialType[send_data0-expect0]" time="16.146"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkBlacklistUsed.TestParkBlacklistUsed" file="test_suite\parkingManage\parkCarType\test_parkBlacklistUsed.py" line="28" name="test_editBlacklistSpecialType[send_data0-expect0]" time="12.150"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkBlacklistUsed.TestParkBlacklistUsed" file="test_suite\parkingManage\parkCarType\test_parkBlacklistUsed.py" line="34" name="test_createBlacklistCarNum[send_data0-expect0]" time="7.637"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkBlacklistUsed.TestParkBlacklistUsed" file="test_suite\parkingManage\parkCarType\test_parkBlacklistUsed.py" line="40" name="test_mockCarIn[send_data0-expect0]" time="5.048"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_parkBlacklistUsed.TestParkBlacklistUsed object at 0x000000000835CE80&gt;
send_data = {&apos;carNum&apos;: &apos;粤J82975&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newTypeName&apos;: &apos;api黑名单47539&apos;, ...}
expect = {&apos;addBlacklistSpecialTypeMsg&apos;: 1, &apos;checkCarleaveVipTypeStrMsg&apos;: &apos;黑名单&apos;, &apos;checkDelBlacklistCarNumMsg&apos;: &apos;粤J82975&apos;, &apos;checkPresentCarTypeMsg&apos;: &apos;黑名单&apos;, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟黑名单车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 0, send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\parkCarType\test_parkBlacklistUsed.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000008192828&gt;
carNum = &apos;粤J82975&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkBlacklistUsed.TestParkBlacklistUsed" file="test_suite\parkingManage\parkCarType\test_parkBlacklistUsed.py" line="46" name="test_checkPresentCarType[send_data0-expect0]" time="4.419"><failure message="IndexError: list index out of range">self = &lt;test_parkBlacklistUsed.TestParkBlacklistUsed object at 0x0000000008361A58&gt;
userLogin = &lt;common.Req.Req object at 0x00000000081998D0&gt;
send_data = {&apos;carNum&apos;: &apos;粤J82975&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newTypeName&apos;: &apos;api黑名单47539&apos;, ...}
expect = {&apos;addBlacklistSpecialTypeMsg&apos;: 1, &apos;checkCarleaveVipTypeStrMsg&apos;: &apos;黑名单&apos;, &apos;checkDelBlacklistCarNumMsg&apos;: &apos;粤J82975&apos;, &apos;checkPresentCarTypeMsg&apos;: &apos;黑名单&apos;, ...}

    def test_checkPresentCarType(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看黑名单车在场类型&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&apos;parkName&apos;], send_data[&apos;carNum&apos;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\parkCarType\test_parkBlacklistUsed.py:50: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkBlacklistUsed.TestParkBlacklistUsed" file="test_suite\parkingManage\parkCarType\test_parkBlacklistUsed.py" line="52" name="test_mockCarOut[send_data0-expect0]" time="5.038"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_parkBlacklistUsed.TestParkBlacklistUsed object at 0x0000000008199908&gt;
send_data = {&apos;carNum&apos;: &apos;粤J82975&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newTypeName&apos;: &apos;api黑名单47539&apos;, ...}
expect = {&apos;addBlacklistSpecialTypeMsg&apos;: 1, &apos;checkCarleaveVipTypeStrMsg&apos;: &apos;黑名单&apos;, &apos;checkDelBlacklistCarNumMsg&apos;: &apos;粤J82975&apos;, &apos;checkPresentCarTypeMsg&apos;: &apos;黑名单&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟黑名单车辆离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\parkCarType\test_parkBlacklistUsed.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000081BBB70&gt;
carNum = &apos;粤J82975&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkBlacklistUsed.TestParkBlacklistUsed" file="test_suite\parkingManage\parkCarType\test_parkBlacklistUsed.py" line="58" name="test_sentryPay[send_data0-expect0]" time="0.649"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_parkBlacklistUsed.TestParkBlacklistUsed object at 0x000000000835E9E8&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000008186198&gt;
send_data = {&apos;carNum&apos;: &apos;粤J82975&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newTypeName&apos;: &apos;api黑名单47539&apos;, ...}
expect = {&apos;addBlacklistSpecialTypeMsg&apos;: 1, &apos;checkCarleaveVipTypeStrMsg&apos;: &apos;黑名单&apos;, &apos;checkDelBlacklistCarNumMsg&apos;: &apos;粤J82975&apos;, &apos;checkPresentCarTypeMsg&apos;: &apos;黑名单&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&quot;carNum&quot;],send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\parkCarType\test_parkBlacklistUsed.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000008185400&gt;
carNum = &apos;粤J82975&apos;, carHandleType = &apos;确认放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkBlacklistUsed.TestParkBlacklistUsed" file="test_suite\parkingManage\parkCarType\test_parkBlacklistUsed.py" line="64" name="test_checkCarLeaveType[send_data0-expect0]" time="7.674"><failure message="IndexError: list index out of range">self = &lt;test_parkBlacklistUsed.TestParkBlacklistUsed object at 0x0000000008194588&gt;
userLogin = &lt;common.Req.Req object at 0x0000000006CB96A0&gt;
send_data = {&apos;carNum&apos;: &apos;粤J82975&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newTypeName&apos;: &apos;api黑名单47539&apos;, ...}
expect = {&apos;addBlacklistSpecialTypeMsg&apos;: 1, &apos;checkCarleaveVipTypeStrMsg&apos;: &apos;黑名单&apos;, &apos;checkDelBlacklistCarNumMsg&apos;: &apos;粤J82975&apos;, &apos;checkPresentCarTypeMsg&apos;: &apos;黑名单&apos;, ...}

    def test_checkCarLeaveType(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看黑名单车辆离场记录车辆类型&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&apos;parkName&apos;], send_data[&apos;carNum&apos;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\parkCarType\test_parkBlacklistUsed.py:68: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkBlacklistUsed.TestParkBlacklistUsed" file="test_suite\parkingManage\parkCarType\test_parkBlacklistUsed.py" line="71" name="test_delBlacklistCarNum[send_data0-expect0]" time="8.732"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkBlacklistUsed.TestParkBlacklistUsed" file="test_suite\parkingManage\parkCarType\test_parkBlacklistUsed.py" line="77" name="test_checkDelBlacklistCarNum[send_data0-expect0]" time="4.846"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkVisitorUsed.TestParkVisitorUsed" file="test_suite\parkingManage\parkCarType\test_parkVisitorUsed.py" line="22" name="test_addVisitorSpecialType[send_data0-expect0]" time="14.902"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkVisitorUsed.TestParkVisitorUsed" file="test_suite\parkingManage\parkCarType\test_parkVisitorUsed.py" line="28" name="test_editVisitorSpecialType[send_data0-expect0]" time="11.091"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkVisitorUsed.TestParkVisitorUsed" file="test_suite\parkingManage\parkCarType\test_parkVisitorUsed.py" line="34" name="test_createVisitorCarNum[send_data0-expect0]" time="8.046"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkVisitorUsed.TestParkVisitorUsed" file="test_suite\parkingManage\parkCarType\test_parkVisitorUsed.py" line="40" name="test_mockCarIn[send_data0-expect0]" time="5.042"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_parkVisitorUsed.TestParkVisitorUsed object at 0x00000000081F85C0&gt;
send_data = {&apos;carNum&apos;: &apos;粤B06972&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newTypeName&apos;: &apos;api访客23851&apos;, ...}
expect = {&apos;addVisitorSpecialTypeMsg&apos;: 1, &apos;checkCarleaveVipTypeStrMsg&apos;: &apos;访客&apos;, &apos;checkDelVisitorCarNumMsg&apos;: &apos;粤B06972&apos;, &apos;checkPresentCarTypeMsg&apos;: &apos;访客&apos;, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟访客车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 0, send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\parkCarType\test_parkVisitorUsed.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000081F8208&gt;
carNum = &apos;粤B06972&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkVisitorUsed.TestParkVisitorUsed" file="test_suite\parkingManage\parkCarType\test_parkVisitorUsed.py" line="46" name="test_checkPresentCarType[send_data0-expect0]" time="2.416"><failure message="IndexError: list index out of range">self = &lt;test_parkVisitorUsed.TestParkVisitorUsed object at 0x0000000008371A58&gt;
userLogin = &lt;common.Req.Req object at 0x000000000819E668&gt;
send_data = {&apos;carNum&apos;: &apos;粤B06972&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newTypeName&apos;: &apos;api访客23851&apos;, ...}
expect = {&apos;addVisitorSpecialTypeMsg&apos;: 1, &apos;checkCarleaveVipTypeStrMsg&apos;: &apos;访客&apos;, &apos;checkDelVisitorCarNumMsg&apos;: &apos;粤B06972&apos;, &apos;checkPresentCarTypeMsg&apos;: &apos;访客&apos;, ...}

    def test_checkPresentCarType(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看访客车在场类型&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&apos;parkName&apos;], send_data[&apos;carNum&apos;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0][&apos;vipType&apos;]
E       IndexError: list index out of range

..\test_suite\parkingManage\parkCarType\test_parkVisitorUsed.py:50: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkVisitorUsed.TestParkVisitorUsed" file="test_suite\parkingManage\parkCarType\test_parkVisitorUsed.py" line="52" name="test_mockCarOut[send_data0-expect0]" time="5.037"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_parkVisitorUsed.TestParkVisitorUsed object at 0x0000000007BE5710&gt;
send_data = {&apos;carNum&apos;: &apos;粤B06972&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newTypeName&apos;: &apos;api访客23851&apos;, ...}
expect = {&apos;addVisitorSpecialTypeMsg&apos;: 1, &apos;checkCarleaveVipTypeStrMsg&apos;: &apos;访客&apos;, &apos;checkDelVisitorCarNumMsg&apos;: &apos;粤B06972&apos;, &apos;checkPresentCarTypeMsg&apos;: &apos;访客&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟访客车辆离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\parkCarType\test_parkVisitorUsed.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000081992E8&gt;
carNum = &apos;粤B06972&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkVisitorUsed.TestParkVisitorUsed" file="test_suite\parkingManage\parkCarType\test_parkVisitorUsed.py" line="58" name="test_sentryPay[send_data0-expect0]" time="0.775"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_parkVisitorUsed.TestParkVisitorUsed object at 0x0000000006CF5B70&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000008199160&gt;
send_data = {&apos;carNum&apos;: &apos;粤B06972&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newTypeName&apos;: &apos;api访客23851&apos;, ...}
expect = {&apos;addVisitorSpecialTypeMsg&apos;: 1, &apos;checkCarleaveVipTypeStrMsg&apos;: &apos;访客&apos;, &apos;checkDelVisitorCarNumMsg&apos;: &apos;粤B06972&apos;, &apos;checkPresentCarTypeMsg&apos;: &apos;访客&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端缴费&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&quot;carNum&quot;],send_data[&apos;carOutHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\parkingManage\parkCarType\test_parkVisitorUsed.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000008199198&gt;
carNum = &apos;粤B06972&apos;, carHandleType = &apos;确认放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkVisitorUsed.TestParkVisitorUsed" file="test_suite\parkingManage\parkCarType\test_parkVisitorUsed.py" line="64" name="test_checkCarLeaveType[send_data0-expect0]" time="7.832"><failure message="IndexError: list index out of range">self = &lt;test_parkVisitorUsed.TestParkVisitorUsed object at 0x000000000837A588&gt;
userLogin = &lt;common.Req.Req object at 0x0000000008351240&gt;
send_data = {&apos;carNum&apos;: &apos;粤B06972&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;newTypeName&apos;: &apos;api访客23851&apos;, ...}
expect = {&apos;addVisitorSpecialTypeMsg&apos;: 1, &apos;checkCarleaveVipTypeStrMsg&apos;: &apos;访客&apos;, &apos;checkDelVisitorCarNumMsg&apos;: &apos;粤B06972&apos;, &apos;checkPresentCarTypeMsg&apos;: &apos;访客&apos;, ...}

    def test_checkCarLeaveType(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看访客车辆离场记录车辆类型&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&apos;parkName&apos;], send_data[&apos;carNum&apos;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\parkCarType\test_parkVisitorUsed.py:68: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkVisitorUsed.TestParkVisitorUsed" file="test_suite\parkingManage\parkCarType\test_parkVisitorUsed.py" line="71" name="test_delVisitorCarNum[send_data0-expect0]" time="10.842"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkVisitorUsed.TestParkVisitorUsed" file="test_suite\parkingManage\parkCarType\test_parkVisitorUsed.py" line="77" name="test_checkDelVisitorCarNum[send_data0-expect0]" time="2.701"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkWhitelistUsed.TestParkWhitelistUsed" file="test_suite\parkingManage\parkCarType\test_parkWhitelistUsed.py" line="22" name="test_createWhitelistCar[send_data0-expect0]" time="8.073"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkWhitelistUsed.TestParkWhitelistUsed" file="test_suite\parkingManage\parkCarType\test_parkWhitelistUsed.py" line="28" name="test_mockCarIn[send_data0-expect0]" time="5.040"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_parkWhitelistUsed.TestParkWhitelistUsed object at 0x000000000821FF98&gt;
send_data = {&apos;carNum&apos;: &apos;粤Q52146&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarleaveVipTypeStrMsg&apos;: &apos;白名单&apos;, &apos;checkDelWhitelistCar&apos;: &apos;粤Q52146&apos;, &apos;checkPresentCarTypeMsg&apos;: &apos;白名单&apos;, &apos;checkenterVipTypeStrMsg&apos;: &apos;白名单&apos;, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟白名单车辆进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 0, send_data[&quot;inClientID&quot;])

..\test_suite\parkingManage\parkCarType\test_parkWhitelistUsed.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000008185128&gt;
carNum = &apos;粤Q52146&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkWhitelistUsed.TestParkWhitelistUsed" file="test_suite\parkingManage\parkCarType\test_parkWhitelistUsed.py" line="34" name="test_checkPresentCarType[send_data0-expect0]" time="2.860"><failure message="IndexError: list index out of range">self = &lt;test_parkWhitelistUsed.TestParkWhitelistUsed object at 0x000000000821F320&gt;
userLogin = &lt;common.Req.Req object at 0x00000000082122B0&gt;
send_data = {&apos;carNum&apos;: &apos;粤Q52146&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarleaveVipTypeStrMsg&apos;: &apos;白名单&apos;, &apos;checkDelWhitelistCar&apos;: &apos;粤Q52146&apos;, &apos;checkPresentCarTypeMsg&apos;: &apos;白名单&apos;, &apos;checkenterVipTypeStrMsg&apos;: &apos;白名单&apos;, ...}

    def test_checkPresentCarType(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看白名单车辆在场类型&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&apos;parkName&apos;], send_data[&apos;carNum&apos;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0][&apos;vipType&apos;]
E       IndexError: list index out of range

..\test_suite\parkingManage\parkCarType\test_parkWhitelistUsed.py:38: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkWhitelistUsed.TestParkWhitelistUsed" file="test_suite\parkingManage\parkCarType\test_parkWhitelistUsed.py" line="40" name="test_mockCarOut[send_data0-expect0]" time="5.051"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_parkWhitelistUsed.TestParkWhitelistUsed object at 0x00000000081F8E10&gt;
send_data = {&apos;carNum&apos;: &apos;粤Q52146&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarleaveVipTypeStrMsg&apos;: &apos;白名单&apos;, &apos;checkDelWhitelistCar&apos;: &apos;粤Q52146&apos;, &apos;checkPresentCarTypeMsg&apos;: &apos;白名单&apos;, &apos;checkenterVipTypeStrMsg&apos;: &apos;白名单&apos;, ...}

    def test_mockCarOut(self,send_data, expect):
        &quot;&quot;&quot;模拟白名单车辆离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\parkingManage\parkCarType\test_parkWhitelistUsed.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000083612E8&gt;
carNum = &apos;粤Q52146&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkWhitelistUsed.TestParkWhitelistUsed" file="test_suite\parkingManage\parkCarType\test_parkWhitelistUsed.py" line="46" name="test_checkCarLeaveType[send_data0-expect0]" time="8.041"><failure message="IndexError: list index out of range">self = &lt;test_parkWhitelistUsed.TestParkWhitelistUsed object at 0x0000000008212668&gt;
userLogin = &lt;common.Req.Req object at 0x0000000008212BA8&gt;
send_data = {&apos;carNum&apos;: &apos;粤Q52146&apos;, &apos;carOutHandleType&apos;: &apos;确认放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;checkCarleaveVipTypeStrMsg&apos;: &apos;白名单&apos;, &apos;checkDelWhitelistCar&apos;: &apos;粤Q52146&apos;, &apos;checkPresentCarTypeMsg&apos;: &apos;白名单&apos;, &apos;checkenterVipTypeStrMsg&apos;: &apos;白名单&apos;, ...}

    def test_checkCarLeaveType(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看白名单车辆离场记录车辆类型&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&apos;parkName&apos;], send_data[&apos;carNum&apos;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\parkingManage\parkCarType\test_parkWhitelistUsed.py:50: IndexError</failure></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkWhitelistUsed.TestParkWhitelistUsed" file="test_suite\parkingManage\parkCarType\test_parkWhitelistUsed.py" line="53" name="test_delWhitelistCar[send_data0-expect0]" time="8.148"></testcase><testcase classname="test_suite.parkingManage.parkCarType.test_parkWhitelistUsed.TestParkWhitelistUsed" file="test_suite\parkingManage\parkCarType\test_parkWhitelistUsed.py" line="59" name="test_checkDelWhitelistCar[send_data0-expect0]" time="2.047"></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollManagerProcess.TestAddTollManagerProcess" file="test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py" line="22" name="test_addToll[send_data0-expect0]" time="0.002"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py:23: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollManagerProcess.TestAddTollManagerProcess" file="test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py" line="30" name="test_bindUserPark[send_data0-expect0]" time="0.001"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py:31: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollManagerProcess.TestAddTollManagerProcess" file="test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py" line="36" name="test_loginSentry[sentryLogin0-send_data0-expect0]" time="0.001"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py:37: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollManagerProcess.TestAddTollManagerProcess" file="test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py" line="43" name="test_loginCentral[centralTollLogin0-send_data0-expect0]" time="0.001"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py:44: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollManagerProcess.TestAddTollManagerProcess" file="test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py" line="50" name="test_freezeToll[send_data0-expect0]" time="0.000"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py:51: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollManagerProcess.TestAddTollManagerProcess" file="test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py" line="56" name="test_freezeTollLoginSentry[sentryLogin0-send_data0-expect0]" time="0.001"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py:57: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollManagerProcess.TestAddTollManagerProcess" file="test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py" line="63" name="test_freezeTollLoginCentral[centralTollLogin0-send_data0-expect0]" time="0.001"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py:64: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollManagerProcess.TestAddTollManagerProcess" file="test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py" line="70" name="test_unfreezeToll[send_data0-expect0]" time="0.001"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py:71: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollManagerProcess.TestAddTollManagerProcess" file="test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py" line="76" name="test_modifyToll[send_data0-expect0]" time="0.001"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py:77: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollManagerProcess.TestAddTollManagerProcess" file="test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py" line="84" name="test_modifyUserLoginSentry[sentryLogin0-send_data0-expect0]" time="0.000"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py:85: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollManagerProcess.TestAddTollManagerProcess" file="test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py" line="91" name="test_modifyUserLoginCentral[centralTollLogin0-send_data0-expect0]" time="0.001"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py:92: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollManagerProcess.TestAddTollManagerProcess" file="test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py" line="98" name="test_delToll[send_data0-expect0]" time="0.000"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py:99: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollManagerProcess.TestAddTollManagerProcess" file="test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py" line="104" name="test_checkDelToll[send_data0-expect0]" time="0.002"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollManagerProcess.py:105: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollProcess.TestAddTollProcess" file="test_suite\parkingManage\tollCollection\test_addTollProcess.py" line="22" name="test_addToll[send_data0-expect0]" time="0.000"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollProcess.py:23: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollProcess.TestAddTollProcess" file="test_suite\parkingManage\tollCollection\test_addTollProcess.py" line="30" name="test_bindUserPark[send_data0-expect0]" time="0.001"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollProcess.py:31: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollProcess.TestAddTollProcess" file="test_suite\parkingManage\tollCollection\test_addTollProcess.py" line="36" name="test_loginSentry[sentryLogin0-send_data0-expect0]" time="0.001"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollProcess.py:37: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollProcess.TestAddTollProcess" file="test_suite\parkingManage\tollCollection\test_addTollProcess.py" line="43" name="test_loginCentral[centralTollLogin0-send_data0-expect0]" time="0.002"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollProcess.py:44: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollProcess.TestAddTollProcess" file="test_suite\parkingManage\tollCollection\test_addTollProcess.py" line="50" name="test_freezeToll[send_data0-expect0]" time="0.002"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollProcess.py:51: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollProcess.TestAddTollProcess" file="test_suite\parkingManage\tollCollection\test_addTollProcess.py" line="56" name="test_freezeTollLoginSentry[sentryLogin0-send_data0-expect0]" time="0.003"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollProcess.py:57: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollProcess.TestAddTollProcess" file="test_suite\parkingManage\tollCollection\test_addTollProcess.py" line="63" name="test_freezeTollLoginCentral[centralTollLogin0-send_data0-expect0]" time="0.002"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollProcess.py:64: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollProcess.TestAddTollProcess" file="test_suite\parkingManage\tollCollection\test_addTollProcess.py" line="70" name="test_unfreezeToll[send_data0-expect0]" time="0.000"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollProcess.py:71: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollProcess.TestAddTollProcess" file="test_suite\parkingManage\tollCollection\test_addTollProcess.py" line="76" name="test_modifyToll[send_data0-expect0]" time="0.000"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollProcess.py:77: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollProcess.TestAddTollProcess" file="test_suite\parkingManage\tollCollection\test_addTollProcess.py" line="84" name="test_modifyUserLoginSentry[sentryLogin0-send_data0-expect0]" time="0.000"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollProcess.py:85: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollProcess.TestAddTollProcess" file="test_suite\parkingManage\tollCollection\test_addTollProcess.py" line="91" name="test_modifyUserLoginCentral[centralTollLogin0-send_data0-expect0]" time="0.001"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollProcess.py:92: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollProcess.TestAddTollProcess" file="test_suite\parkingManage\tollCollection\test_addTollProcess.py" line="98" name="test_delToll[send_data0-expect0]" time="0.001"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollProcess.py:99: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.parkingManage.tollCollection.test_addTollProcess.TestAddTollProcess" file="test_suite\parkingManage\tollCollection\test_addTollProcess.py" line="104" name="test_checkDelToll[send_data0-expect0]" time="0.001"><skipped message="禅道bug号：15669" type="pytest.skip">test_suite\parkingManage\tollCollection\test_addTollProcess.py:105: 禅道bug号：15669</skipped></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_adjustCarNum.TestAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py" line="23" name="test_mockCarIn[send_data0-expect0]" time="5.039"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_adjustCarNum.TestAdjustCarNum object at 0x0000000008392DD8&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤D18290&apos;, &apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carIn_jobId&apos;: &apos;${mytest.carIn_jobId}&apos;, &apos;carNum&apos;: &apos;粤Q84501&apos;, ...}
expect = {&apos;adjustCarInNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarInWaterNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutWaterNumMsg&apos;: &apos;粤D18290&apos;, ...}

    def test_mockCarIn(self,send_data,expect):
&gt;       re = cloudparking_service().mockCarInOut(send_data[&apos;carNum&apos;], 0, send_data[&apos;inClientID&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000820E0B8&gt;
carNum = &apos;粤Q84501&apos;, mockType = 0, ytj_id = 20190507171502, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_adjustCarNum.TestAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py" line="29" name="test_adjustCarInNum[send_data0-expect0]" time="1.088"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_adjustCarNum.TestAdjustCarNum object at 0x0000000008361DD8&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000083B3518&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤D18290&apos;, &apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carIn_jobId&apos;: &apos;${mytest.carIn_jobId}&apos;, &apos;carNum&apos;: &apos;粤Q84501&apos;, ...}
expect = {&apos;adjustCarInNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarInWaterNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutWaterNumMsg&apos;: &apos;粤D18290&apos;, ...}

    def test_adjustCarInNum(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;校正进场车辆&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).adjustCarNum(send_data[&apos;carNum&apos;], send_data[&apos;adjustCarNum&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x00000000083D2A90&gt;
carNum = &apos;粤Q84501&apos;, adjustCarNum = &apos;粤D18290&apos;, carType = &apos;&apos;

    def adjustCarNum(self, carNum, adjustCarNum, carType = &apos;&apos;):
        &quot;&quot;&quot;进场前校正车牌与类型&quot;&quot;&quot;
        carInOutHandle = self.__getCarInOutHandleIdList()
        try:
            carHandleInfo = self.getDictByList(carInOutHandle, &apos;content&apos;, &apos;carNo&apos;, carNum)
        except KeyError:
            carHandleInfo = self.getDictByList(carInOutHandle, &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/carCode&quot;.format(carHandleInfo[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:62: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_adjustCarNum.TestAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py" line="35" name="test_checkCarIn[send_data0-expect0]" time="0.679"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_adjustCarNum.TestAdjustCarNum object at 0x00000000083DE668&gt;
sentryLogin = &lt;common.Req.Req object at 0x000000000820E048&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤D18290&apos;, &apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carIn_jobId&apos;: &apos;${mytest.carIn_jobId}&apos;, &apos;carNum&apos;: &apos;粤Q84501&apos;, ...}
expect = {&apos;adjustCarInNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarInWaterNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutWaterNumMsg&apos;: &apos;粤D18290&apos;, ...}

    def test_checkCarIn(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端登记放行-看校正后进场车辆屏显语音开闸&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;adjustCarNum&apos;],send_data[&apos;carInHandleType&apos;],send_data[&apos;carIn_jobId&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x00000000083F04E0&gt;
carNum = &apos;粤D18290&apos;, carHandleType = &apos;登记放行&apos;, jobId = &apos;${mytest.carIn_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_adjustCarNum.TestAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py" line="43" name="test_checkAdjustCarInWaterNum[send_data0-expect0]" time="2.797"><failure message="AssertionError">self = &lt;test_adjustCarNum.TestAdjustCarNum object at 0x00000000083F0EF0&gt;
userLogin = &lt;common.Req.Req object at 0x00000000083F07B8&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤D18290&apos;, &apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carIn_jobId&apos;: &apos;${mytest.carIn_jobId}&apos;, &apos;carNum&apos;: &apos;粤Q84501&apos;, ...}
expect = {&apos;adjustCarInNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarInWaterNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutWaterNumMsg&apos;: &apos;粤D18290&apos;, ...}

    def test_checkAdjustCarInWaterNum(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看校正进场车辆流水&quot;&quot;&quot;
        re = Information(userLogin).getAdjustCarWaterNum(send_data[&apos;adjustCarNum&apos;], send_data[&apos;parkName&apos;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;]
&gt;       Assertions().assert_in_text(result, expect[&quot;adjustCarInWaterNumMsg&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x00000000083614E0&gt;, body = []
expected_msg = &apos;粤d18290&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_adjustCarNum.TestAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py" line="49" name="test_mockCarOut[send_data0-expect0]" time="5.075"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_adjustCarNum.TestAdjustCarNum object at 0x0000000006D56A20&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤D18290&apos;, &apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carIn_jobId&apos;: &apos;${mytest.carIn_jobId}&apos;, &apos;carNum&apos;: &apos;粤Q84501&apos;, ...}
expect = {&apos;adjustCarInNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarInWaterNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutWaterNumMsg&apos;: &apos;粤D18290&apos;, ...}

    def test_mockCarOut(self,send_data,expect):
        &quot;&quot;&quot;离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&apos;carNum&apos;],1,send_data[&apos;outClientID&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000835C588&gt;
carNum = &apos;粤Q84501&apos;, mockType = 1, ytj_id = 20190507171503, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_adjustCarNum.TestAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py" line="56" name="test_adjustCarOutNum[send_data0-expect0]" time="0.527"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_adjustCarNum.TestAdjustCarNum object at 0x000000000816A710&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000081D2630&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤D18290&apos;, &apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carIn_jobId&apos;: &apos;${mytest.carIn_jobId}&apos;, &apos;carNum&apos;: &apos;粤Q84501&apos;, ...}
expect = {&apos;adjustCarInNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarInWaterNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutWaterNumMsg&apos;: &apos;粤D18290&apos;, ...}

    def test_adjustCarOutNum(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;校正出场车辆&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).adjustCarNum(send_data[&apos;carNum&apos;], send_data[&apos;adjustCarNum&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000008192240&gt;
carNum = &apos;粤Q84501&apos;, adjustCarNum = &apos;粤D18290&apos;, carType = &apos;&apos;

    def adjustCarNum(self, carNum, adjustCarNum, carType = &apos;&apos;):
        &quot;&quot;&quot;进场前校正车牌与类型&quot;&quot;&quot;
        carInOutHandle = self.__getCarInOutHandleIdList()
        try:
            carHandleInfo = self.getDictByList(carInOutHandle, &apos;content&apos;, &apos;carNo&apos;, carNum)
        except KeyError:
            carHandleInfo = self.getDictByList(carInOutHandle, &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/carCode&quot;.format(carHandleInfo[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:62: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_adjustCarNum.TestAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py" line="62" name="test_sentryPay[send_data0-expect0]" time="0.486"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_adjustCarNum.TestAdjustCarNum object at 0x0000000007BDEDA0&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007BE5400&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤D18290&apos;, &apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carIn_jobId&apos;: &apos;${mytest.carIn_jobId}&apos;, &apos;carNum&apos;: &apos;粤Q84501&apos;, ...}
expect = {&apos;adjustCarInNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarInWaterNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutWaterNumMsg&apos;: &apos;粤D18290&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭收费处收费-查看车辆离场信息&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;adjustCarNum&apos;],send_data[&apos;carOutHandleType&apos;],send_data[&apos;carOut_jobId&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x00000000081F8780&gt;
carNum = &apos;粤D18290&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_adjustCarNum.TestAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py" line="70" name="test_checkAdjustCarOutWaterNum[send_data0-expect0]" time="2.503"></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_adjustCarNum.TestAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py" line="76" name="test_carLeaveHistory[send_data0-expect0]" time="7.616"><failure message="AssertionError">self = &lt;test_adjustCarNum.TestAdjustCarNum object at 0x0000000006CB9C18&gt;
userLogin = &lt;common.Req.Req object at 0x00000000083D25C0&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤D18290&apos;, &apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carIn_jobId&apos;: &apos;${mytest.carIn_jobId}&apos;, &apos;carNum&apos;: &apos;粤Q84501&apos;, ...}
expect = {&apos;adjustCarInNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarInWaterNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutNumMsg&apos;: &apos;粤D18290&apos;, &apos;adjustCarOutWaterNumMsg&apos;: &apos;粤D18290&apos;, ...}

    def test_carLeaveHistory(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看离场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;],send_data[&quot;adjustCarNum&quot;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;]
&gt;       Assertions().assert_in_text(result,expect[&quot;carLeaveHistoryMessage&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNum.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x00000000081FB198&gt;, body = []
expected_msg = &apos;粤d18290&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_adjustCarNumAndType.TestAdjustCarNumAndType" file="test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNumAndType.py" line="22" name="test_mockCarIn[send_data0-expect0]" time="5.036"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_adjustCarNumAndType.TestAdjustCarNumAndType object at 0x0000000008162550&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤J92657&apos;, &apos;adjustCarOutType&apos;: &apos;蓝牌车&apos;, &apos;adjustCarType&apos;: &apos;黄牌车&apos;, &apos;carInHandleType&apos;: &apos;登记放行&apos;, ...}
expect = {&apos;adjustCarInWaterNumMsg&apos;: &apos;粤J92657&apos;, &apos;adjustCarNum&apos;: &apos;粤J92657&apos;, &apos;adjustCarOutType&apos;: 1, &apos;adjustCarOutWaterNumMsg&apos;: &apos;粤J92657&apos;, ...}

    def test_mockCarIn(self,send_data,expect):
&gt;       re = cloudparking_service().mockCarInOut(send_data[&apos;carNum&apos;],0,send_data[&apos;inClientID&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNumAndType.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007BCDA20&gt;
carNum = &apos;粤W28604&apos;, mockType = 0, ytj_id = 20190507171502, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_adjustCarNumAndType.TestAdjustCarNumAndType" file="test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNumAndType.py" line="28" name="test_adjustCarInNum[send_data0-expect0]" time="0.707"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_adjustCarNumAndType.TestAdjustCarNumAndType object at 0x0000000007976C18&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007BE3F28&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤J92657&apos;, &apos;adjustCarOutType&apos;: &apos;蓝牌车&apos;, &apos;adjustCarType&apos;: &apos;黄牌车&apos;, &apos;carInHandleType&apos;: &apos;登记放行&apos;, ...}
expect = {&apos;adjustCarInWaterNumMsg&apos;: &apos;粤J92657&apos;, &apos;adjustCarNum&apos;: &apos;粤J92657&apos;, &apos;adjustCarOutType&apos;: 1, &apos;adjustCarOutWaterNumMsg&apos;: &apos;粤J92657&apos;, ...}

    def test_adjustCarInNum(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;校正进场车辆&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).adjustCarNum(send_data[&apos;carNum&apos;], send_data[&apos;adjustCarNum&apos;], send_data[&apos;adjustCarType&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNumAndType.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007BF3B00&gt;
carNum = &apos;粤W28604&apos;, adjustCarNum = &apos;粤J92657&apos;, carType = &apos;黄牌车&apos;

    def adjustCarNum(self, carNum, adjustCarNum, carType = &apos;&apos;):
        &quot;&quot;&quot;进场前校正车牌与类型&quot;&quot;&quot;
        carInOutHandle = self.__getCarInOutHandleIdList()
        try:
            carHandleInfo = self.getDictByList(carInOutHandle, &apos;content&apos;, &apos;carNo&apos;, carNum)
        except KeyError:
            carHandleInfo = self.getDictByList(carInOutHandle, &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/carCode&quot;.format(carHandleInfo[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:62: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_adjustCarNumAndType.TestAdjustCarNumAndType" file="test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNumAndType.py" line="35" name="test_checkCarIn[send_data0-expect0]" time="0.469"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_adjustCarNumAndType.TestAdjustCarNumAndType object at 0x00000000081999E8&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000083925F8&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤J92657&apos;, &apos;adjustCarOutType&apos;: &apos;蓝牌车&apos;, &apos;adjustCarType&apos;: &apos;黄牌车&apos;, &apos;carInHandleType&apos;: &apos;登记放行&apos;, ...}
expect = {&apos;adjustCarInWaterNumMsg&apos;: &apos;粤J92657&apos;, &apos;adjustCarNum&apos;: &apos;粤J92657&apos;, &apos;adjustCarOutType&apos;: 1, &apos;adjustCarOutWaterNumMsg&apos;: &apos;粤J92657&apos;, ...}

    def test_checkCarIn(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端登记放行-查看校正后进场车辆屏显语音开闸&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;adjustCarNum&apos;],send_data[&apos;carInHandleType&apos;],send_data[&apos;carIn_jobId&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNumAndType.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007D28C50&gt;
carNum = &apos;粤J92657&apos;, carHandleType = &apos;登记放行&apos;, jobId = &apos;${mytest.carIn_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_adjustCarNumAndType.TestAdjustCarNumAndType" file="test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNumAndType.py" line="49" name="test_mockCarOut[send_data0-expect0]" time="5.036"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_adjustCarNumAndType.TestAdjustCarNumAndType object at 0x0000000007976400&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤J92657&apos;, &apos;adjustCarOutType&apos;: &apos;蓝牌车&apos;, &apos;adjustCarType&apos;: &apos;黄牌车&apos;, &apos;carInHandleType&apos;: &apos;登记放行&apos;, ...}
expect = {&apos;adjustCarInWaterNumMsg&apos;: &apos;粤J92657&apos;, &apos;adjustCarNum&apos;: &apos;粤J92657&apos;, &apos;adjustCarOutType&apos;: 1, &apos;adjustCarOutWaterNumMsg&apos;: &apos;粤J92657&apos;, ...}

    def test_mockCarOut(self,send_data,expect):
        &quot;&quot;&quot;离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&apos;carNum&apos;],1,send_data[&apos;outClientID&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNumAndType.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000083F7EF0&gt;
carNum = &apos;粤W28604&apos;, mockType = 1, ytj_id = 20190507171503, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_adjustCarNumAndType.TestAdjustCarNumAndType" file="test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNumAndType.py" line="56" name="test_adjustCarOutNum[send_data0-expect0]" time="0.743"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_adjustCarNumAndType.TestAdjustCarNumAndType object at 0x0000000008163208&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007EB3B00&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤J92657&apos;, &apos;adjustCarOutType&apos;: &apos;蓝牌车&apos;, &apos;adjustCarType&apos;: &apos;黄牌车&apos;, &apos;carInHandleType&apos;: &apos;登记放行&apos;, ...}
expect = {&apos;adjustCarInWaterNumMsg&apos;: &apos;粤J92657&apos;, &apos;adjustCarNum&apos;: &apos;粤J92657&apos;, &apos;adjustCarOutType&apos;: 1, &apos;adjustCarOutWaterNumMsg&apos;: &apos;粤J92657&apos;, ...}

    def test_adjustCarOutNum(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;校正出场车辆&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).adjustCarNum(send_data[&apos;carNum&apos;], send_data[&apos;adjustCarNum&apos;],send_data[&apos;adjustCarOutType&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_adjustCarNumAndType.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000008408D68&gt;
carNum = &apos;粤W28604&apos;, adjustCarNum = &apos;粤J92657&apos;, carType = &apos;蓝牌车&apos;

    def adjustCarNum(self, carNum, adjustCarNum, carType = &apos;&apos;):
        &quot;&quot;&quot;进场前校正车牌与类型&quot;&quot;&quot;
        carInOutHandle = self.__getCarInOutHandleIdList()
        try:
            carHandleInfo = self.getDictByList(carInOutHandle, &apos;content&apos;, &apos;carNo&apos;, carNum)
        except KeyError:
            carHandleInfo = self.getDictByList(carInOutHandle, &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/carCode&quot;.format(carHandleInfo[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:62: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_carInOutSentryAbnormalPay.TestCarInOutSentryAbnormalPay" file="test_suite\sentryDutyRoom\carInOutHandle\test_carInOutSentryAbnormalPay.py" line="23" name="test_mockCarIn[send_data0-expect0]" time="5.038"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_carInOutSentryAbnormalPay.TestCarInOutSentryAbnormalPay object at 0x000000000819EDD8&gt;
send_data = {&apos;carNum&apos;: &apos;粤S36052&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;异常放行&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费${mytest.payVal}元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费${mytest.payVal}元一路顺风&apos;, ...}

    def test_mockCarIn(self,send_data,expect):
&gt;       re = cloudparking_service().mockCarInOut(send_data[&apos;carNum&apos;],0,send_data[&apos;inClientID&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_carInOutSentryAbnormalPay.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000007C13A90&gt;
carNum = &apos;粤S36052&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_carInOutSentryAbnormalPay.TestCarInOutSentryAbnormalPay" file="test_suite\sentryDutyRoom\carInOutHandle\test_carInOutSentryAbnormalPay.py" line="30" name="test_presentCar[send_data0-expect0]" time="2.770"><failure message="AssertionError">self = &lt;test_carInOutSentryAbnormalPay.TestCarInOutSentryAbnormalPay object at 0x00000000076B42B0&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007C13E48&gt;
send_data = {&apos;carNum&apos;: &apos;粤S36052&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;异常放行&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费${mytest.payVal}元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费${mytest.payVal}元一路顺风&apos;, ...}

    def test_presentCar(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看在场记录&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;]
&gt;       Assertions().assert_in_text(result,expect[&quot;presentCarMessage&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_carInOutSentryAbnormalPay.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x0000000007BCCB00&gt;, body = []
expected_msg = &apos;粤s36052&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_carInOutSentryAbnormalPay.TestCarInOutSentryAbnormalPay" file="test_suite\sentryDutyRoom\carInOutHandle\test_carInOutSentryAbnormalPay.py" line="36" name="test_mockCarOut[send_data0-expect0]" time="5.041"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_carInOutSentryAbnormalPay.TestCarInOutSentryAbnormalPay object at 0x0000000007D5DFD0&gt;
send_data = {&apos;carNum&apos;: &apos;粤S36052&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;异常放行&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费${mytest.payVal}元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费${mytest.payVal}元一路顺风&apos;, ...}

    def test_mockCarOut(self,send_data,expect):
        &quot;&quot;&quot;离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&apos;carNum&apos;],1,send_data[&apos;outClientID&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_carInOutSentryAbnormalPay.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000008204320&gt;
carNum = &apos;粤S36052&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_carInOutSentryAbnormalPay.TestCarInOutSentryAbnormalPay" file="test_suite\sentryDutyRoom\carInOutHandle\test_carInOutSentryAbnormalPay.py" line="43" name="test_sentryAbnormalPay[send_data0-expect0]" time="0.513"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_carInOutSentryAbnormalPay.TestCarInOutSentryAbnormalPay object at 0x000000000820EA58&gt;
sentryLogin = &lt;common.Req.Req object at 0x000000000792D358&gt;
send_data = {&apos;carNum&apos;: &apos;粤S36052&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;异常放行&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费${mytest.payVal}元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费${mytest.payVal}元一路顺风&apos;, ...}

    def test_sentryAbnormalPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭收费处异常放行-查看车辆离场信息&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;],send_data[&apos;carOutHandleType&apos;],send_data[&apos;carOut_jobId&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_carInOutSentryAbnormalPay.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007694208&gt;
carNum = &apos;粤S36052&apos;, carHandleType = &apos;异常放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_carInOutSentryAbnormalPay.TestCarInOutSentryAbnormalPay" file="test_suite\sentryDutyRoom\carInOutHandle\test_carInOutSentryAbnormalPay.py" line="51" name="test_carLeaveHistory[send_data0-expect0]" time="7.853"><failure message="AssertionError">self = &lt;test_carInOutSentryAbnormalPay.TestCarInOutSentryAbnormalPay object at 0x000000000840F8D0&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007BD8080&gt;
send_data = {&apos;carNum&apos;: &apos;粤S36052&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;异常放行&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费${mytest.payVal}元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费${mytest.payVal}元一路顺风&apos;, ...}

    def test_carLeaveHistory(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看离场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;]
&gt;       Assertions().assert_in_text(result,expect[&quot;carLeaveHistoryMessage&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_carInOutSentryAbnormalPay.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000840F588&gt;, body = []
expected_msg = &apos;异常放行&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_carNumMatchByHuman.TestCarNumMatchByHuman" file="test_suite\sentryDutyRoom\carInOutHandle\test_carNumMatchByHuman.py" line="22" name="test_mockCarInA[send_data0-expect0]" time="5.036"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_carNumMatchByHuman.TestCarNumMatchByHuman object at 0x0000000008204748&gt;
send_data = {&apos;carNum&apos;: &apos;粤E51693&apos;, &apos;carNumA&apos;: &apos;粤Y51693&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, ...}
expect = {&apos;carInOpenGate&apos;: 1, &apos;carInScreen&apos;: &apos;粤X51693\\\\欢迎光临&apos;, &apos;carInVoice&apos;: &apos;$粤X51693$欢迎光临&apos;, &apos;carInVoiceA&apos;: &apos;粤Y51693&apos;, ...}

    def test_mockCarInA(self,send_data,expect):
&gt;       re = cloudparking_service().mockCarInOut(send_data[&apos;carNumA&apos;], 0, send_data[&apos;inClientID&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_carNumMatchByHuman.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000083ED2B0&gt;
carNum = &apos;粤Y51693&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_carNumMatchByHuman.TestCarNumMatchByHuman" file="test_suite\sentryDutyRoom\carInOutHandle\test_carNumMatchByHuman.py" line="27" name="test_mockCarIn[send_data0-expect0]" time="5.030"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_carNumMatchByHuman.TestCarNumMatchByHuman object at 0x0000000007EB39E8&gt;
send_data = {&apos;carNum&apos;: &apos;粤E51693&apos;, &apos;carNumA&apos;: &apos;粤Y51693&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, ...}
expect = {&apos;carInOpenGate&apos;: 1, &apos;carInScreen&apos;: &apos;粤X51693\\\\欢迎光临&apos;, &apos;carInVoice&apos;: &apos;$粤X51693$欢迎光临&apos;, &apos;carInVoiceA&apos;: &apos;粤Y51693&apos;, ...}

    def test_mockCarIn(self,send_data,expect):
&gt;       re = cloudparking_service().mockCarInOut(send_data[&apos;matchCarNum&apos;],0,send_data[&apos;inClientID&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_carNumMatchByHuman.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000079710F0&gt;
carNum = &apos;粤X51693&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_carNumMatchByHuman.TestCarNumMatchByHuman" file="test_suite\sentryDutyRoom\carInOutHandle\test_carNumMatchByHuman.py" line="34" name="test_presentCar[send_data0-expect0]" time="3.531"><failure message="AssertionError">self = &lt;test_carNumMatchByHuman.TestCarNumMatchByHuman object at 0x0000000008392240&gt;
userLogin = &lt;common.Req.Req object at 0x00000000087342E8&gt;
send_data = {&apos;carNum&apos;: &apos;粤E51693&apos;, &apos;carNumA&apos;: &apos;粤Y51693&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, ...}
expect = {&apos;carInOpenGate&apos;: 1, &apos;carInScreen&apos;: &apos;粤X51693\\\\欢迎光临&apos;, &apos;carInVoice&apos;: &apos;$粤X51693$欢迎光临&apos;, &apos;carInVoiceA&apos;: &apos;粤Y51693&apos;, ...}

    def test_presentCar(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看在场记录&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&quot;parkName&quot;],send_data[&quot;matchCarNum&quot;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;]
&gt;       Assertions().assert_in_text(result,expect[&quot;presentCarMessage&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_carNumMatchByHuman.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x00000000083F3940&gt;, body = []
expected_msg = &apos;粤x51693&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_carNumMatchByHuman.TestCarNumMatchByHuman" file="test_suite\sentryDutyRoom\carInOutHandle\test_carNumMatchByHuman.py" line="40" name="test_mockCarOut[send_data0-expect0]" time="5.037"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_carNumMatchByHuman.TestCarNumMatchByHuman object at 0x0000000008404F60&gt;
send_data = {&apos;carNum&apos;: &apos;粤E51693&apos;, &apos;carNumA&apos;: &apos;粤Y51693&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, ...}
expect = {&apos;carInOpenGate&apos;: 1, &apos;carInScreen&apos;: &apos;粤X51693\\\\欢迎光临&apos;, &apos;carInVoice&apos;: &apos;$粤X51693$欢迎光临&apos;, &apos;carInVoiceA&apos;: &apos;粤Y51693&apos;, ...}

    def test_mockCarOut(self,send_data,expect):
        &quot;&quot;&quot;离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&apos;carNum&apos;],1,send_data[&apos;outClientID&apos;],send_data[&apos;confidence&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_carNumMatchByHuman.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000872BB38&gt;
carNum = &apos;粤E51693&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 85
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_carNumMatchByHuman.TestCarNumMatchByHuman" file="test_suite\sentryDutyRoom\carInOutHandle\test_carNumMatchByHuman.py" line="47" name="test_matchCarNumByhuman[send_data0-expect0]" time="0.600"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_carNumMatchByHuman.TestCarNumMatchByHuman object at 0x000000000840F588&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000084020F0&gt;
send_data = {&apos;carNum&apos;: &apos;粤E51693&apos;, &apos;carNumA&apos;: &apos;粤Y51693&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, ...}
expect = {&apos;carInOpenGate&apos;: 1, &apos;carInScreen&apos;: &apos;粤X51693\\\\欢迎光临&apos;, &apos;carInVoice&apos;: &apos;$粤X51693$欢迎光临&apos;, &apos;carInVoiceA&apos;: &apos;粤Y51693&apos;, ...}

    def test_matchCarNumByhuman(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;人工匹配车牌&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).matchCarNum(send_data[&apos;carNum&apos;],send_data[&apos;matchCarNum&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_carNumMatchByHuman.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x000000000874F128&gt;
carNum = &apos;粤E51693&apos;, matchCarNum = &apos;粤X51693&apos;

    def matchCarNum(self,carNum,matchCarNum):
        &quot;&quot;&quot;人工匹配车牌&quot;&quot;&quot;
        carHandleInfo = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       carHandleIdInfo = self.getHandleIdInfo(carHandleInfo[&apos;id&apos;]).json()
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:93: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_carNumMatchByHuman.TestCarNumMatchByHuman" file="test_suite\sentryDutyRoom\carInOutHandle\test_carNumMatchByHuman.py" line="53" name="test_sentryPay[send_data0-expect0]" time="1.789"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_carNumMatchByHuman.TestCarNumMatchByHuman object at 0x0000000008407CF8&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000081B37B8&gt;
send_data = {&apos;carNum&apos;: &apos;粤E51693&apos;, &apos;carNumA&apos;: &apos;粤Y51693&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, ...}
expect = {&apos;carInOpenGate&apos;: 1, &apos;carInScreen&apos;: &apos;粤X51693\\\\欢迎光临&apos;, &apos;carInVoice&apos;: &apos;$粤X51693$欢迎光临&apos;, &apos;carInVoiceA&apos;: &apos;粤Y51693&apos;, ...}

    def test_sentryPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭收费处收费-查看车辆离场信息&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;matchCarNum&apos;],send_data[&apos;carOutHandleType&apos;],send_data[&apos;carOut_jobId&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_carNumMatchByHuman.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000008726AC8&gt;
carNum = &apos;粤X51693&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_carNumMatchByHuman.TestCarNumMatchByHuman" file="test_suite\sentryDutyRoom\carInOutHandle\test_carNumMatchByHuman.py" line="60" name="test_carLeaveHistory[send_data0-expect0]" time="7.887"><failure message="AssertionError">self = &lt;test_carNumMatchByHuman.TestCarNumMatchByHuman object at 0x00000000083F3470&gt;
userLogin = &lt;common.Req.Req object at 0x000000000840CCC0&gt;
send_data = {&apos;carNum&apos;: &apos;粤E51693&apos;, &apos;carNumA&apos;: &apos;粤Y51693&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, ...}
expect = {&apos;carInOpenGate&apos;: 1, &apos;carInScreen&apos;: &apos;粤X51693\\\\欢迎光临&apos;, &apos;carInVoice&apos;: &apos;$粤X51693$欢迎光临&apos;, &apos;carInVoiceA&apos;: &apos;粤Y51693&apos;, ...}

    def test_carLeaveHistory(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看离场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;],send_data[&quot;matchCarNum&quot;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;]
&gt;       Assertions().assert_in_text(result,expect[&quot;carLeaveHistoryMessage&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_carNumMatchByHuman.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000870DFD0&gt;, body = []
expected_msg = &apos;粤x51693&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_carOutNoInside.TestCarOutNoInside" file="test_suite\sentryDutyRoom\carInOutHandle\test_carOutNoInside.py" line="22" name="test_mockCarOut[send_data0-expect0]" time="5.036"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_carOutNoInside.TestCarOutNoInside object at 0x00000000083FE080&gt;
send_data = {&apos;carNum&apos;: &apos;粤X97658&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤X97658&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费${mytest.payVal}元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费${mytest.payVal}元一路顺风&apos;, ...}

    def test_mockCarOut(self, send_data, expect):
        &quot;&quot;&quot;离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&apos;carNum&apos;], 1, send_data[&apos;outClientID&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_carOutNoInside.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000008407898&gt;
carNum = &apos;粤X97658&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_carOutNoInside.TestCarOutNoInside" file="test_suite\sentryDutyRoom\carInOutHandle\test_carOutNoInside.py" line="29" name="test_sentryAbnormalPay[send_data0-expect0]" time="0.857"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_carOutNoInside.TestCarOutNoInside object at 0x0000000008723940&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000006D80D68&gt;
send_data = {&apos;carNum&apos;: &apos;粤X97658&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤X97658&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费${mytest.payVal}元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费${mytest.payVal}元一路顺风&apos;, ...}

    def test_sentryAbnormalPay(self,sentryLogin,send_data,expect):
        &quot;&quot;&quot;岗亭端收费异常放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;],send_data[&apos;carOutHandleType&apos;],send_data[&apos;carOut_jobId&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_carOutNoInside.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x00000000083F30F0&gt;
carNum = &apos;粤X97658&apos;, carHandleType = &apos;异常放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_carOutNoInside.TestCarOutNoInside" file="test_suite\sentryDutyRoom\carInOutHandle\test_carOutNoInside.py" line="37" name="test_carLeaveHistory[send_data0-expect0]" time="9.769"><failure message="AssertionError">self = &lt;test_carOutNoInside.TestCarOutNoInside object at 0x00000000086E90F0&gt;
userLogin = &lt;common.Req.Req object at 0x000000000872BA20&gt;
send_data = {&apos;carNum&apos;: &apos;粤X97658&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;outClientID&apos;: 20190507171501, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤X97658&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费${mytest.payVal}元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费${mytest.payVal}元一路顺风&apos;, ...}

    def test_carLeaveHistory(self,userLogin,send_data,expect):
        &quot;&quot;&quot;查看离场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;],send_data[&quot;carNum&quot;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;]
&gt;       Assertions().assert_in_text(result,expect[&quot;carLeaveHistoryMessage&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_carOutNoInside.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000875CE48&gt;, body = []
expected_msg = &apos;粤x97658&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkHistoryMsg.TestCheckHistoryMsg" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py" line="23" name="test_mockCarIn[send_data0-expect0]" time="0.000"><skipped message="尚未处理" type="pytest.skip">test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py:24: 尚未处理</skipped></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkHistoryMsg.TestCheckHistoryMsg" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py" line="31" name="test_checkCarIn[send_data0-expect0]" time="0.002"><skipped message="尚未处理" type="pytest.skip">test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py:32: 尚未处理</skipped></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkHistoryMsg.TestCheckHistoryMsg" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py" line="37" name="test_checkOneHistoryMsg[send_data0-expect0]" time="0.001"><skipped message="尚未处理" type="pytest.skip">test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py:38: 尚未处理</skipped></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkHistoryMsg.TestCheckHistoryMsg" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py" line="45" name="test_presentCar[send_data0-expect0]" time="0.002"><skipped message="尚未处理" type="pytest.skip">test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py:46: 尚未处理</skipped></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkHistoryMsg.TestCheckHistoryMsg" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py" line="51" name="test_mockCarOut[send_data0-expect0]" time="0.001"><skipped message="尚未处理" type="pytest.skip">test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py:52: 尚未处理</skipped></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkHistoryMsg.TestCheckHistoryMsg" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py" line="57" name="test_checkCarOut[send_data0-expect0]" time="0.000"><skipped message="尚未处理" type="pytest.skip">test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py:58: 尚未处理</skipped></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkHistoryMsg.TestCheckHistoryMsg" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py" line="63" name="test_checkOneHistoryMsg2[send_data0-expect0]" time="0.001"><skipped message="尚未处理" type="pytest.skip">test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py:64: 尚未处理</skipped></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkHistoryMsg.TestCheckHistoryMsg" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py" line="71" name="test_carLeaveHistory[send_data0-expect0]" time="0.001"><skipped message="尚未处理" type="pytest.skip">test_suite\sentryDutyRoom\carInOutHandle\test_checkHistoryMsg.py:72: 尚未处理</skipped></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkOutAbnormal.TestCheckOutAbnormal" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkOutAbnormal.py" line="27" name="test_mockCarIn[send_data0-expect0]" time="5.059"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_checkOutAbnormal.TestCheckOutAbnormal object at 0x0000000008756EB8&gt;
send_data = {&apos;carNum&apos;: &apos;粤K57681&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤K57681&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费1元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费1元一路顺风&apos;, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 0, send_data[&quot;inClientID&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_checkOutAbnormal.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000008756400&gt;
carNum = &apos;粤K57681&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkOutAbnormal.TestCheckOutAbnormal" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkOutAbnormal.py" line="33" name="test_presentCar[send_data0-expect0]" time="3.211"><failure message="AssertionError">self = &lt;test_checkOutAbnormal.TestCheckOutAbnormal object at 0x0000000008756208&gt;
userLogin = &lt;common.Req.Req object at 0x000000000870D908&gt;
send_data = {&apos;carNum&apos;: &apos;粤K57681&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤K57681&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费1元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费1元一路顺风&apos;, ...}

    def test_presentCar(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看在场记录&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&quot;parkName&quot;], send_data[&quot;carNum&quot;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;]
&gt;       Assertions().assert_in_text(result, expect[&quot;presentCarMessage&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_checkOutAbnormal.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000875C5F8&gt;, body = []
expected_msg = &apos;粤k57681&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkOutAbnormal.TestCheckOutAbnormal" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkOutAbnormal.py" line="39" name="test_mockCarOut[send_data0-expect0]" time="5.066"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_checkOutAbnormal.TestCheckOutAbnormal object at 0x00000000086F8CF8&gt;
send_data = {&apos;carNum&apos;: &apos;粤K57681&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤K57681&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费1元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费1元一路顺风&apos;, ...}

    def test_mockCarOut(self, send_data, expect):
        &quot;&quot;&quot;模拟离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_checkOutAbnormal.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000086ECE10&gt;
carNum = &apos;粤K57681&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkOutAbnormal.TestCheckOutAbnormal" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkOutAbnormal.py" line="45" name="test_sentryCheckOutAbnormal[send_data0-expect0]" time="0.541"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_checkOutAbnormal.TestCheckOutAbnormal object at 0x000000000870C0F0&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000086FFC88&gt;
send_data = {&apos;carNum&apos;: &apos;粤K57681&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤K57681&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费1元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费1元一路顺风&apos;, ...}

    def test_sentryCheckOutAbnormal(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;岗亭异常放行-查看车辆离场信息&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;],send_data[&apos;carOutHandleType&apos;],send_data[&apos;carOut_jobId&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_checkOutAbnormal.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x000000000870C3C8&gt;
carNum = &apos;粤K57681&apos;, carHandleType = &apos;异常放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkOutAbnormal.TestCheckOutAbnormal" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkOutAbnormal.py" line="53" name="test_carLeaveHistory[send_data0-expect0]" time="8.215"><failure message="AssertionError">self = &lt;test_checkOutAbnormal.TestCheckOutAbnormal object at 0x000000000840CA58&gt;
userLogin = &lt;common.Req.Req object at 0x000000000BB03BA8&gt;
send_data = {&apos;carNum&apos;: &apos;粤K57681&apos;, &apos;carOutHandleType&apos;: &apos;异常放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤K57681&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费1元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费1元一路顺风&apos;, ...}

    def test_carLeaveHistory(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看离场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;], send_data[&quot;carNum&quot;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;]
&gt;       Assertions().assert_in_text(result, expect[&quot;carLeaveHistoryMessage&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_checkOutAbnormal.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000BB29080&gt;, body = []
expected_msg = &apos;粤k57681&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkOutNormal.TestCheckOutNormal" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkOutNormal.py" line="23" name="test_mockCarIn[send_data0-expect0]" time="5.038"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_checkOutNormal.TestCheckOutNormal object at 0x000000000BB14908&gt;
send_data = {&apos;carNum&apos;: &apos;粤H61230&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤H61230&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费5元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费5元一路顺风&apos;, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 0, send_data[&quot;inClientID&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_checkOutNormal.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000BB14D68&gt;
carNum = &apos;粤H61230&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkOutNormal.TestCheckOutNormal" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkOutNormal.py" line="29" name="test_presentCar[send_data0-expect0]" time="2.711"><failure message="AssertionError">self = &lt;test_checkOutNormal.TestCheckOutNormal object at 0x000000000BB1F6A0&gt;
userLogin = &lt;common.Req.Req object at 0x000000000BB13B38&gt;
send_data = {&apos;carNum&apos;: &apos;粤H61230&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤H61230&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费5元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费5元一路顺风&apos;, ...}

    def test_presentCar(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看在场记录&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&quot;parkName&quot;], send_data[&quot;carNum&quot;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;]
&gt;       Assertions().assert_in_text(result, expect[&quot;presentCarMessage&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_checkOutNormal.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x00000000087567B8&gt;, body = []
expected_msg = &apos;粤h61230&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkOutNormal.TestCheckOutNormal" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkOutNormal.py" line="35" name="test_mockCarOut[send_data0-expect0]" time="5.038"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_checkOutNormal.TestCheckOutNormal object at 0x000000000871C6D8&gt;
send_data = {&apos;carNum&apos;: &apos;粤H61230&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤H61230&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费5元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费5元一路顺风&apos;, ...}

    def test_mockCarOut(self, send_data, expect):
        &quot;&quot;&quot;模拟离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_checkOutNormal.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000870D400&gt;
carNum = &apos;粤H61230&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkOutNormal.TestCheckOutNormal" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkOutNormal.py" line="41" name="test_sentryCheckOut[send_data0-expect0]" time="0.518"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_checkOutNormal.TestCheckOutNormal object at 0x000000000BB148D0&gt;
sentryLogin = &lt;common.Req.Req object at 0x000000000BB04048&gt;
send_data = {&apos;carNum&apos;: &apos;粤H61230&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤H61230&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费5元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费5元一路顺风&apos;, ...}

    def test_sentryCheckOut(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;岗亭端收费放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;], send_data[&apos;carOutHandleType&apos;], send_data[&apos;carOut_jobId&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_checkOutNormal.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x000000000BB2FC50&gt;
carNum = &apos;粤H61230&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_checkOutNormal.TestCheckOutNormal" file="test_suite\sentryDutyRoom\carInOutHandle\test_checkOutNormal.py" line="49" name="test_carLeaveHistory[send_data0-expect0]" time="9.301"><failure message="AssertionError">self = &lt;test_checkOutNormal.TestCheckOutNormal object at 0x000000000871CCF8&gt;
userLogin = &lt;common.Req.Req object at 0x000000000870A4E0&gt;
send_data = {&apos;carNum&apos;: &apos;粤H61230&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;inClientID&apos;: 20190507171500, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤H61230&apos;, &apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费5元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费5元一路顺风&apos;, ...}

    def test_carLeaveHistory(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看离场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;], send_data[&quot;carNum&quot;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;]
&gt;       Assertions().assert_in_text(result, expect[&quot;carLeaveHistoryMessage&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_checkOutNormal.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000BB042B0&gt;, body = []
expected_msg = &apos;粤h61230&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_messageInAndOut_strict.TestSentryMessage" file="test_suite\sentryDutyRoom\carInOutHandle\test_messageInAndOut_strict.py" line="25" name="test_mockCarIn[send_data0-expect0]" time="5.036"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_messageInAndOut_strict.TestSentryMessage object at 0x000000000BB043C8&gt;
send_data = {&apos;StrictRule_inClientID&apos;: 20190507171502, &apos;StrictRule_outClientID&apos;: 20190507171503, &apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carIn_jobId&apos;: &apos;${mytest.carIn_jobId}&apos;, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤H96748&apos;, &apos;checkCarInOpenGate&apos;: 1, &apos;checkCarInScreen&apos;: &apos;粤H96748\\\\登记放行&apos;, &apos;checkCarInVoice&apos;: &apos;$粤H96748$登记放行&apos;, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 0, send_data[&quot;StrictRule_inClientID&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_messageInAndOut_strict.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000BB58080&gt;
carNum = &apos;粤H96748&apos;, mockType = 0, ytj_id = 20190507171502, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_messageInAndOut_strict.TestSentryMessage" file="test_suite\sentryDutyRoom\carInOutHandle\test_messageInAndOut_strict.py" line="32" name="test_checkMessageIn[send_data0-expect0]" time="0.457"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_messageInAndOut_strict.TestSentryMessage object at 0x000000000BB03DA0&gt;
sentryLogin = &lt;common.Req.Req object at 0x000000000BB71400&gt;
send_data = {&apos;StrictRule_inClientID&apos;: 20190507171502, &apos;StrictRule_outClientID&apos;: 20190507171503, &apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carIn_jobId&apos;: &apos;${mytest.carIn_jobId}&apos;, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤H96748&apos;, &apos;checkCarInOpenGate&apos;: 1, &apos;checkCarInScreen&apos;: &apos;粤H96748\\\\登记放行&apos;, &apos;checkCarInVoice&apos;: &apos;$粤H96748$登记放行&apos;, ...}

    def test_checkMessageIn(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;登记放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;], send_data[&apos;carInHandleType&apos;],send_data[&apos;carIn_jobId&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_messageInAndOut_strict.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x000000000BB357B8&gt;
carNum = &apos;粤H96748&apos;, carHandleType = &apos;登记放行&apos;, jobId = &apos;${mytest.carIn_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_messageInAndOut_strict.TestSentryMessage" file="test_suite\sentryDutyRoom\carInOutHandle\test_messageInAndOut_strict.py" line="40" name="test_mockCarOut[send_data0-expect0]" time="5.036"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_messageInAndOut_strict.TestSentryMessage object at 0x000000000BB0E518&gt;
send_data = {&apos;StrictRule_inClientID&apos;: 20190507171502, &apos;StrictRule_outClientID&apos;: 20190507171503, &apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carIn_jobId&apos;: &apos;${mytest.carIn_jobId}&apos;, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤H96748&apos;, &apos;checkCarInOpenGate&apos;: 1, &apos;checkCarInScreen&apos;: &apos;粤H96748\\\\登记放行&apos;, &apos;checkCarInVoice&apos;: &apos;$粤H96748$登记放行&apos;, ...}

    def test_mockCarOut(self, send_data, expect):
        &quot;&quot;&quot;模拟离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;StrictRule_outClientID&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_messageInAndOut_strict.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000BB03F98&gt;
carNum = &apos;粤H96748&apos;, mockType = 1, ytj_id = 20190507171503, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_messageInAndOut_strict.TestSentryMessage" file="test_suite\sentryDutyRoom\carInOutHandle\test_messageInAndOut_strict.py" line="47" name="test_checkMessageOut[send_data0-expect0]" time="0.493"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_messageInAndOut_strict.TestSentryMessage object at 0x000000000BB58C18&gt;
sentryLogin = &lt;common.Req.Req object at 0x000000000BB79F28&gt;
send_data = {&apos;StrictRule_inClientID&apos;: 20190507171502, &apos;StrictRule_outClientID&apos;: 20190507171503, &apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carIn_jobId&apos;: &apos;${mytest.carIn_jobId}&apos;, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤H96748&apos;, &apos;checkCarInOpenGate&apos;: 1, &apos;checkCarInScreen&apos;: &apos;粤H96748\\\\登记放行&apos;, &apos;checkCarInVoice&apos;: &apos;$粤H96748$登记放行&apos;, ...}

    def test_checkMessageOut(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;登记放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;], send_data[&apos;carOutHandleType&apos;], send_data[&apos;carOut_jobId&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_messageInAndOut_strict.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x000000000BB4F3C8&gt;
carNum = &apos;粤H96748&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_messageInAndOut_strict.TestSentryMessage" file="test_suite\sentryDutyRoom\carInOutHandle\test_messageInAndOut_strict.py" line="55" name="test_carLeaveHistory[send_data0-expect0]" time="7.731"><failure message="AssertionError">self = &lt;test_messageInAndOut_strict.TestSentryMessage object at 0x000000000BB41668&gt;
userLogin = &lt;common.Req.Req object at 0x000000000BB24E10&gt;
send_data = {&apos;StrictRule_inClientID&apos;: 20190507171502, &apos;StrictRule_outClientID&apos;: 20190507171503, &apos;carInHandleType&apos;: &apos;登记放行&apos;, &apos;carIn_jobId&apos;: &apos;${mytest.carIn_jobId}&apos;, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤H96748&apos;, &apos;checkCarInOpenGate&apos;: 1, &apos;checkCarInScreen&apos;: &apos;粤H96748\\\\登记放行&apos;, &apos;checkCarInVoice&apos;: &apos;$粤H96748$登记放行&apos;, ...}

    def test_carLeaveHistory(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看离场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;], send_data[&quot;carNum&quot;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;]
&gt;       Assertions().assert_in_text(result, expect[&quot;carLeaveHistoryMessage&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_messageInAndOut_strict.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000BB416A0&gt;, body = []
expected_msg = &apos;粤h96748&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_recordInAdjustCarNum.TestRecordInAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py" line="23" name="test_mockCarIn[send_data0-expect0]" time="5.051"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_recordInAdjustCarNum.TestRecordInAdjustCarNum object at 0x000000000BB5F320&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;lightRule_inClientID&apos;: 20190507171500, ...}
expect = {&apos;adjustCarInWaterNumMsg&apos;: &apos;粤L37492&apos;, &apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;checkOutMessage&apos;: True, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 0, send_data[&quot;lightRule_inClientID&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000BB41470&gt;
carNum = &apos;粤T80164&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_recordInAdjustCarNum.TestRecordInAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py" line="29" name="test_recordIn[send_data0-expect0]" time="2.877"><failure message="AssertionError">self = &lt;test_recordInAdjustCarNum.TestRecordInAdjustCarNum object at 0x000000000BB5FAC8&gt;
sentryLogin = &lt;common.Req.Req object at 0x000000000BB687F0&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;lightRule_inClientID&apos;: 20190507171500, ...}
expect = {&apos;adjustCarInWaterNumMsg&apos;: &apos;粤L37492&apos;, &apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;checkOutMessage&apos;: True, ...}

    def test_recordIn(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;在pc端查看进场记录&quot;&quot;&quot;
        re = CarInOutHandle(sentryLogin).getCarInRecord(send_data[&apos;carNum&apos;], send_data[&apos;parkName&apos;])
        result = re.json()
&gt;       Assertions().assert_in_text(result, expect[&apos;carNum&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x0000000008784CC0&gt;
body = {&apos;rows&apos;: [], &apos;total&apos;: 0}, expected_msg = &apos;粤t80164&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_recordInAdjustCarNum.TestRecordInAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py" line="35" name="test_adjustCarNum[send_data0-expect0]" time="0.705"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_recordInAdjustCarNum.TestRecordInAdjustCarNum object at 0x000000000BB7AEF0&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007BFC2E8&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;lightRule_inClientID&apos;: 20190507171500, ...}
expect = {&apos;adjustCarInWaterNumMsg&apos;: &apos;粤L37492&apos;, &apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;checkOutMessage&apos;: True, ...}

    def test_adjustCarNum(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;在岗亭收费处在场车辆里面校正车牌&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).patchRecord(send_data[&apos;carNum&apos;], send_data[&apos;parkName&apos;], send_data[&apos;adjustCarNum&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000008763F98&gt;
carNum = &apos;粤T80164&apos;, parkName = &apos;智泊云接口测试专用停车场&apos;, adjustCarNum = &apos;粤L37492&apos;
carType = None

    def patchRecord(self, carNum, parkName, adjustCarNum, carType = None):
        &quot;&quot;&quot;在场车辆校正&quot;&quot;&quot;
        carInfoDict = self.getDictBykey(self.getCarInRecord(carNum, parkName).json(), &apos;carCode&apos;, carNum)
        self.url = &quot;/ydtp-backend-service/api/records/patch&quot;
        data = {
            &quot;car_code&quot;: adjustCarNum,
&gt;           &quot;topBillCode&quot;: carInfoDict[&apos;topBillCode&apos;],
            &quot;modifyType&quot;:1,
            &quot;operateSource&quot;: 2,
            &quot;carType&quot;: carType
        }
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:82: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_recordInAdjustCarNum.TestRecordInAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py" line="41" name="test_checkAdjustCarInWaterNum[send_data0-expect0]" time="2.382"><failure message="AssertionError">self = &lt;test_recordInAdjustCarNum.TestRecordInAdjustCarNum object at 0x000000000BB0E4A8&gt;
userLogin = &lt;common.Req.Req object at 0x0000000008781BE0&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;lightRule_inClientID&apos;: 20190507171500, ...}
expect = {&apos;adjustCarInWaterNumMsg&apos;: &apos;粤L37492&apos;, &apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;checkOutMessage&apos;: True, ...}

    def test_checkAdjustCarInWaterNum(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看校正进场车辆流水&quot;&quot;&quot;
        re = Information(userLogin).getAdjustCarWaterNum(send_data[&apos;adjustCarNum&apos;], send_data[&apos;parkName&apos;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;]
&gt;       Assertions().assert_in_text(result, expect[&quot;adjustCarInWaterNumMsg&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000BB034E0&gt;, body = []
expected_msg = &apos;粤l37492&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_recordInAdjustCarNum.TestRecordInAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py" line="47" name="test_recordIn2[send_data0-expect0]" time="0.773"><failure message="AssertionError">self = &lt;test_recordInAdjustCarNum.TestRecordInAdjustCarNum object at 0x0000000006DADB38&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000086FF828&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;lightRule_inClientID&apos;: 20190507171500, ...}
expect = {&apos;adjustCarInWaterNumMsg&apos;: &apos;粤L37492&apos;, &apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;checkOutMessage&apos;: True, ...}

    def test_recordIn2(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;在岗亭收费处在场车辆里面查看校正后车牌&quot;&quot;&quot;
        re = CarInOutHandle(sentryLogin).getCarInRecord(send_data[&apos;adjustCarNum&apos;], send_data[&apos;parkName&apos;])
        result = re.json()
&gt;       Assertions().assert_in_text(result, expect[&apos;adjustCarNum&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000BB29CF8&gt;
body = {&apos;rows&apos;: [], &apos;total&apos;: 0}, expected_msg = &apos;粤l37492&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_recordInAdjustCarNum.TestRecordInAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py" line="53" name="test_mockCarout[send_data0-expect0]" time="5.031"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_recordInAdjustCarNum.TestRecordInAdjustCarNum object at 0x0000000008723BA8&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;lightRule_inClientID&apos;: 20190507171500, ...}
expect = {&apos;adjustCarInWaterNumMsg&apos;: &apos;粤L37492&apos;, &apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;checkOutMessage&apos;: True, ...}

    def test_mockCarout(self, send_data, expect):
        &quot;&quot;&quot;模拟离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;adjustCarNum&quot;], 1, send_data[&quot;lightRule_outClientID&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000083F39B0&gt;
carNum = &apos;粤L37492&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_recordInAdjustCarNum.TestRecordInAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py" line="59" name="test_checkOut[send_data0-expect0]" time="0.673"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_recordInAdjustCarNum.TestRecordInAdjustCarNum object at 0x000000000BB417B8&gt;
sentryLogin = &lt;common.Req.Req object at 0x000000000BB58048&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;lightRule_inClientID&apos;: 20190507171500, ...}
expect = {&apos;adjustCarInWaterNumMsg&apos;: &apos;粤L37492&apos;, &apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;checkOutMessage&apos;: True, ...}

    def test_checkOut(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;收费放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;adjustCarNum&apos;], send_data[&apos;carOutHandleType&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x000000000BB69278&gt;
carNum = &apos;粤L37492&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_recordInAdjustCarNum.TestRecordInAdjustCarNum" file="test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py" line="65" name="test_recordOut[send_data0-expect0]" time="0.790"><failure message="IndexError: list index out of range">self = &lt;test_recordInAdjustCarNum.TestRecordInAdjustCarNum object at 0x000000000870AE10&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000006D83630&gt;
send_data = {&apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;lightRule_inClientID&apos;: 20190507171500, ...}
expect = {&apos;adjustCarInWaterNumMsg&apos;: &apos;粤L37492&apos;, &apos;adjustCarNum&apos;: &apos;粤L37492&apos;, &apos;carNum&apos;: &apos;粤T80164&apos;, &apos;checkOutMessage&apos;: True, ...}

    def test_recordOut(self, sentryLogin, send_data, expect):
    
        &quot;&quot;&quot;在pc端查看离场记录&quot;&quot;&quot;
        re = CarInOutHandle(sentryLogin).getCarOutRecord(send_data[&apos;adjustCarNum&apos;], send_data[&apos;parkName&apos;])
&gt;       result = re.json()[&apos;rows&apos;][0][&apos;carCode&apos;]
E       IndexError: list index out of range

..\test_suite\sentryDutyRoom\carInOutHandle\test_recordInAdjustCarNum.py:70: IndexError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_recordInAndOut.TestSentryRecordInOut" file="test_suite\sentryDutyRoom\carInOutHandle\test_recordInAndOut.py" line="20" name="test_mockCarIn[send_data0-expect0]" time="5.037"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_recordInAndOut.TestSentryRecordInOut object at 0x00000000087565C0&gt;
send_data = {&apos;carNum&apos;: &apos;粤T75640&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;lightRule_inClientID&apos;: 20190507171500, ...}
expect = {&apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费${mytest.payVal}元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费${mytest.payVal}元一路顺风&apos;, &apos;mockCarInMessage&apos;: &apos;欢迎光临&apos;, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 0, send_data[&quot;lightRule_inClientID&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_recordInAndOut.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000BB29240&gt;
carNum = &apos;粤T75640&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_recordInAndOut.TestSentryRecordInOut" file="test_suite\sentryDutyRoom\carInOutHandle\test_recordInAndOut.py" line="26" name="test_recordIn[send_data0-expect0]" time="0.831"><failure message="IndexError: list index out of range">self = &lt;test_recordInAndOut.TestSentryRecordInOut object at 0x0000000008402898&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000083F3B70&gt;
send_data = {&apos;carNum&apos;: &apos;粤T75640&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;lightRule_inClientID&apos;: 20190507171500, ...}
expect = {&apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费${mytest.payVal}元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费${mytest.payVal}元一路顺风&apos;, &apos;mockCarInMessage&apos;: &apos;欢迎光临&apos;, ...}

    def test_recordIn(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;在pc端查看进场记录&quot;&quot;&quot;
        re = CarInOutHandle(sentryLogin).getCarInRecord(send_data[&apos;carNum&apos;], send_data[&apos;parkName&apos;])
&gt;       result = re.json()[&apos;rows&apos;][0][&apos;carCode&apos;]
E       IndexError: list index out of range

..\test_suite\sentryDutyRoom\carInOutHandle\test_recordInAndOut.py:30: IndexError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_recordInAndOut.TestSentryRecordInOut" file="test_suite\sentryDutyRoom\carInOutHandle\test_recordInAndOut.py" line="32" name="test_mockCarout[send_data0-expect0]" time="5.037"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_recordInAndOut.TestSentryRecordInOut object at 0x000000000BB14C50&gt;
send_data = {&apos;carNum&apos;: &apos;粤T75640&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;lightRule_inClientID&apos;: 20190507171500, ...}
expect = {&apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费${mytest.payVal}元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费${mytest.payVal}元一路顺风&apos;, &apos;mockCarInMessage&apos;: &apos;欢迎光临&apos;, ...}

    def test_mockCarout(self, send_data, expect):
        &quot;&quot;&quot;模拟离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;lightRule_outClientID&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_recordInAndOut.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000BB358D0&gt;
carNum = &apos;粤T75640&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_recordInAndOut.TestSentryRecordInOut" file="test_suite\sentryDutyRoom\carInOutHandle\test_recordInAndOut.py" line="39" name="test_checkOut[send_data0-expect0]" time="0.567"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_recordInAndOut.TestSentryRecordInOut object at 0x000000000BB20E80&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000006C7E860&gt;
send_data = {&apos;carNum&apos;: &apos;粤T75640&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;lightRule_inClientID&apos;: 20190507171500, ...}
expect = {&apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费${mytest.payVal}元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费${mytest.payVal}元一路顺风&apos;, &apos;mockCarInMessage&apos;: &apos;欢迎光临&apos;, ...}

    def test_checkOut(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;收费放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;], send_data[&apos;carOutHandleType&apos;], send_data[&apos;carOut_jobId&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_recordInAndOut.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x000000000BB4FB38&gt;
carNum = &apos;粤T75640&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_recordInAndOut.TestSentryRecordInOut" file="test_suite\sentryDutyRoom\carInOutHandle\test_recordInAndOut.py" line="47" name="test_recordOut[send_data0-expect0]" time="0.857"><failure message="IndexError: list index out of range">self = &lt;test_recordInAndOut.TestSentryRecordInOut object at 0x000000000BB5F208&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007916160&gt;
send_data = {&apos;carNum&apos;: &apos;粤T75640&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;lightRule_inClientID&apos;: 20190507171500, ...}
expect = {&apos;checkCarOutOpenGate&apos;: 1, &apos;checkCarOutScreen&apos;: &apos;已收费${mytest.payVal}元\\\\一路顺风&apos;, &apos;checkCarOutVoice&apos;: &apos;已收费${mytest.payVal}元一路顺风&apos;, &apos;mockCarInMessage&apos;: &apos;欢迎光临&apos;, ...}

    def test_recordOut(self, sentryLogin, send_data, expect):
    
        &quot;&quot;&quot;在pc端查看离场记录&quot;&quot;&quot;
        re = CarInOutHandle(sentryLogin).getCarOutRecord(send_data[&apos;carNum&apos;], send_data[&apos;parkName&apos;])
&gt;       result = re.json()[&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\sentryDutyRoom\carInOutHandle\test_recordInAndOut.py:52: IndexError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_yellowCarWideInOut.TestYellowCarWideInOut" file="test_suite\sentryDutyRoom\carInOutHandle\test_yellowCarWideInOut.py" line="21" name="test_mockCarIn[send_data0-expect0]" time="5.039"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_yellowCarWideInOut.TestYellowCarWideInOut object at 0x000000000BB520B8&gt;
send_data = {&apos;carNum&apos;: &apos;粤A42735&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;carType&apos;: &apos;黄牌车&apos;, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤A42735&apos;, &apos;checkCarOutScreen&apos;: &apos;已收费5元\\\\一路顺风&apos;, &apos;mockCarInMsg&apos;: &apos;欢迎光临&apos;, &apos;mockCarOutMessage&apos;: &apos;请扫码缴费5元&apos;, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 0, send_data[&quot;inClientID&quot;], carType = send_data[&apos;carType&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_yellowCarWideInOut.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000BB5CDD8&gt;
carNum = &apos;粤A42735&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;黄牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_yellowCarWideInOut.TestYellowCarWideInOut" file="test_suite\sentryDutyRoom\carInOutHandle\test_yellowCarWideInOut.py" line="27" name="test_presentCarType[send_data0-expect0]" time="2.486"><failure message="IndexError: list index out of range">self = &lt;test_yellowCarWideInOut.TestYellowCarWideInOut object at 0x0000000007BCD828&gt;
userLogin = &lt;common.Req.Req object at 0x000000000837AD68&gt;
send_data = {&apos;carNum&apos;: &apos;粤A42735&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;carType&apos;: &apos;黄牌车&apos;, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤A42735&apos;, &apos;checkCarOutScreen&apos;: &apos;已收费5元\\\\一路顺风&apos;, &apos;mockCarInMsg&apos;: &apos;欢迎光临&apos;, &apos;mockCarOutMessage&apos;: &apos;请扫码缴费5元&apos;, ...}

    def test_presentCarType(self,userLogin, send_data, expect):
        &quot;&quot;&quot;查看在场车辆&quot;&quot;&quot;
        re = Information(userLogin).getPresentCar(send_data[&apos;parkName&apos;], send_data[&apos;carNum&apos;])
&gt;       result = re.json()[&apos;data&apos;][&apos;rows&apos;][0]
E       IndexError: list index out of range

..\test_suite\sentryDutyRoom\carInOutHandle\test_yellowCarWideInOut.py:31: IndexError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_yellowCarWideInOut.TestYellowCarWideInOut" file="test_suite\sentryDutyRoom\carInOutHandle\test_yellowCarWideInOut.py" line="33" name="test_mockCarOut[send_data0-expect0]" time="5.040"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_yellowCarWideInOut.TestYellowCarWideInOut object at 0x000000000BB03898&gt;
send_data = {&apos;carNum&apos;: &apos;粤A42735&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;carType&apos;: &apos;黄牌车&apos;, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤A42735&apos;, &apos;checkCarOutScreen&apos;: &apos;已收费5元\\\\一路顺风&apos;, &apos;mockCarInMsg&apos;: &apos;欢迎光临&apos;, &apos;mockCarOutMessage&apos;: &apos;请扫码缴费5元&apos;, ...}

    def test_mockCarOut(self, send_data, expect):
        &quot;&quot;&quot;模拟离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_yellowCarWideInOut.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000008402CC0&gt;
carNum = &apos;粤A42735&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_yellowCarWideInOut.TestYellowCarWideInOut" file="test_suite\sentryDutyRoom\carInOutHandle\test_yellowCarWideInOut.py" line="39" name="test_sentryPaty[send_data0-expect0]" time="0.768"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_yellowCarWideInOut.TestYellowCarWideInOut object at 0x000000000875CBE0&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000006DD26A0&gt;
send_data = {&apos;carNum&apos;: &apos;粤A42735&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;carType&apos;: &apos;黄牌车&apos;, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤A42735&apos;, &apos;checkCarOutScreen&apos;: &apos;已收费5元\\\\一路顺风&apos;, &apos;mockCarInMsg&apos;: &apos;欢迎光临&apos;, &apos;mockCarOutMessage&apos;: &apos;请扫码缴费5元&apos;, ...}

    def test_sentryPaty(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;岗亭端收费放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;], send_data[&apos;carOutHandleType&apos;],send_data[&apos;carOut_jobId&apos;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_yellowCarWideInOut.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x0000000007BF3B00&gt;
carNum = &apos;粤A42735&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.carInOutHandle.test_yellowCarWideInOut.TestYellowCarWideInOut" file="test_suite\sentryDutyRoom\carInOutHandle\test_yellowCarWideInOut.py" line="45" name="test_carLeaveHistory[send_data0-expect0]" time="9.237"><failure message="AssertionError">self = &lt;test_yellowCarWideInOut.TestYellowCarWideInOut object at 0x000000000BB5C630&gt;
userLogin = &lt;common.Req.Req object at 0x0000000007EF4EF0&gt;
send_data = {&apos;carNum&apos;: &apos;粤A42735&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;carOut_jobId&apos;: &apos;${mytest.carOut_jobId}&apos;, &apos;carType&apos;: &apos;黄牌车&apos;, ...}
expect = {&apos;carLeaveHistoryMessage&apos;: &apos;粤A42735&apos;, &apos;checkCarOutScreen&apos;: &apos;已收费5元\\\\一路顺风&apos;, &apos;mockCarInMsg&apos;: &apos;欢迎光临&apos;, &apos;mockCarOutMessage&apos;: &apos;请扫码缴费5元&apos;, ...}

    def test_carLeaveHistory(self, userLogin, send_data, expect):
        &quot;&quot;&quot;查看离场记录&quot;&quot;&quot;
        re = Information(userLogin).getCarLeaveHistory(send_data[&quot;parkName&quot;], send_data[&quot;carNum&quot;])
        result = re.json()[&quot;data&quot;][&quot;rows&quot;]
&gt;       Assertions().assert_in_text(result, expect[&quot;carLeaveHistoryMessage&quot;])

..\test_suite\sentryDutyRoom\carInOutHandle\test_yellowCarWideInOut.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x0000000008408C18&gt;, body = []
expected_msg = &apos;粤a42735&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.personalInfo.test_checkTollFlow.TestCheckTollFlow" file="test_suite\sentryDutyRoom\personalInfo\test_checkTollFlow.py" line="22" name="test_mockCarIn[send_data0-expect0]" time="5.039"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_checkTollFlow.TestCheckTollFlow object at 0x0000000007EDBB00&gt;
send_data = {&apos;carNum&apos;: &apos;粤W07841&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501}
expect = {&apos;mockCarInMessage&apos;: &apos;欢迎光临&apos;, &apos;mockCarOutMessage&apos;: &apos;缴费&apos;, &apos;offdutyStatusCode&apos;: 200, &apos;sentryPayMsg&apos;: &apos;一路顺风&apos;, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 0, send_data[&quot;inClientID&quot;])

..\test_suite\sentryDutyRoom\personalInfo\test_checkTollFlow.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x000000000879E940&gt;
carNum = &apos;粤W07841&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.personalInfo.test_checkTollFlow.TestCheckTollFlow" file="test_suite\sentryDutyRoom\personalInfo\test_checkTollFlow.py" line="28" name="test_mockCarout[send_data0-expect0]" time="5.036"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_checkTollFlow.TestCheckTollFlow object at 0x000000000BB5F9E8&gt;
send_data = {&apos;carNum&apos;: &apos;粤W07841&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501}
expect = {&apos;mockCarInMessage&apos;: &apos;欢迎光临&apos;, &apos;mockCarOutMessage&apos;: &apos;缴费&apos;, &apos;offdutyStatusCode&apos;: 200, &apos;sentryPayMsg&apos;: &apos;一路顺风&apos;, ...}

    def test_mockCarout(self, send_data, expect):
        &quot;&quot;&quot;模拟离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\sentryDutyRoom\personalInfo\test_checkTollFlow.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000008398400&gt;
carNum = &apos;粤W07841&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.personalInfo.test_checkTollFlow.TestCheckTollFlow" file="test_suite\sentryDutyRoom\personalInfo\test_checkTollFlow.py" line="34" name="test_sentryPay[send_data0-expect0]" time="0.486"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_checkTollFlow.TestCheckTollFlow object at 0x0000000007EDBA20&gt;
sentryLogin = &lt;common.Req.Req object at 0x000000000879BE80&gt;
send_data = {&apos;carNum&apos;: &apos;粤W07841&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501}
expect = {&apos;mockCarInMessage&apos;: &apos;欢迎光临&apos;, &apos;mockCarOutMessage&apos;: &apos;缴费&apos;, &apos;offdutyStatusCode&apos;: 200, &apos;sentryPayMsg&apos;: &apos;一路顺风&apos;, ...}

    def test_sentryPay(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;收费放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;], send_data[&apos;carOutHandleType&apos;], &apos;${mytest.carOut_jobId}&apos;)

..\test_suite\sentryDutyRoom\personalInfo\test_checkTollFlow.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x00000000083F0550&gt;
carNum = &apos;粤W07841&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.personalInfo.test_checkTollFlow.TestCheckTollFlow" file="test_suite\sentryDutyRoom\personalInfo\test_checkTollFlow.py" line="40" name="test_offDuty[send_data0-expect0]" time="7.154"></testcase><testcase classname="test_suite.sentryDutyRoom.personalInfo.test_checkTollFlow.TestCheckTollFlow" file="test_suite\sentryDutyRoom\personalInfo\test_checkTollFlow.py" line="47" name="test_shiftMoneys[send_data0-expect0]" time="3.627"><failure message="AssertionError">self = &lt;test_checkTollFlow.TestCheckTollFlow object at 0x0000000006D3C6D8&gt;
sentryLogin = &lt;common.Req.Req object at 0x00000000087630B8&gt;
send_data = {&apos;carNum&apos;: &apos;粤W07841&apos;, &apos;carOutHandleType&apos;: &apos;收费放行&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501}
expect = {&apos;mockCarInMessage&apos;: &apos;欢迎光临&apos;, &apos;mockCarOutMessage&apos;: &apos;缴费&apos;, &apos;offdutyStatusCode&apos;: 200, &apos;sentryPayMsg&apos;: &apos;一路顺风&apos;, ...}

    def test_shiftMoneys(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;查看收费流水清单&quot;&quot;&quot;
        re = PersonalInfo(sentryLogin).shiftMoneys()
        result = re.json()[&apos;list&apos;][0]
&gt;       Assertions().assert_text(result[&apos;car_code&apos;], expect[&apos;tollFlowCarCodeMsg&apos;])

..\test_suite\sentryDutyRoom\personalInfo\test_checkTollFlow.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x00000000087746D8&gt;, body = &apos;粤K15396&apos;
expected_msg = &apos;粤W07841&apos;

    def assert_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否等于预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(expected_msg)
&gt;           assert body == expected_msg
E           AssertionError

..\common\Assert.py:130: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.personalInfo.test_personalInfo.TestPersonalInfo" file="test_suite\sentryDutyRoom\personalInfo\test_personalInfo.py" line="22" name="test_personalInfoBefore[send_data0-expect0]" time="0.432"></testcase><testcase classname="test_suite.sentryDutyRoom.personalInfo.test_personalInfo.TestPersonalInfo" file="test_suite\sentryDutyRoom\personalInfo\test_personalInfo.py" line="29" name="test_mockCarIn[send_data0-expect0]" time="5.042"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_personalInfo.TestPersonalInfo object at 0x000000000870DF28&gt;
send_data = {&apos;carHandleType&apos;: &apos;收费放行&apos;, &apos;carNum&apos;: &apos;粤Q46520&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501}
expect = {&apos;collectMoney&apos;: &apos;{{ ${mytest.collectMoney} + ${mytest.payVal} }}&apos;, &apos;dealCount&apos;: &apos;{{ ${mytest.dealCount} + 1}}&apos;, &apos;mockCarInMessage&apos;: &apos;欢迎光临&apos;, &apos;mockCarOutMessage&apos;: &apos;缴费&apos;, ...}

    def test_mockCarIn(self, send_data, expect):
        &quot;&quot;&quot;模拟进场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 0, send_data[&quot;inClientID&quot;])

..\test_suite\sentryDutyRoom\personalInfo\test_personalInfo.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x00000000083F0908&gt;
carNum = &apos;粤Q46520&apos;, mockType = 0, ytj_id = 20190507171500, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
            self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
        elif str(mockType) == &apos;0&apos;:
&gt;           self.save(&apos;carIn_jobId&apos;, re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:37: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.personalInfo.test_personalInfo.TestPersonalInfo" file="test_suite\sentryDutyRoom\personalInfo\test_personalInfo.py" line="35" name="test_mockCarOut[send_data0-expect0]" time="5.037"><failure message="KeyError: &apos;job_id&apos;">self = &lt;test_personalInfo.TestPersonalInfo object at 0x000000000C023048&gt;
send_data = {&apos;carHandleType&apos;: &apos;收费放行&apos;, &apos;carNum&apos;: &apos;粤Q46520&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501}
expect = {&apos;collectMoney&apos;: &apos;{{ ${mytest.collectMoney} + ${mytest.payVal} }}&apos;, &apos;dealCount&apos;: &apos;{{ ${mytest.dealCount} + 1}}&apos;, &apos;mockCarInMessage&apos;: &apos;欢迎光临&apos;, &apos;mockCarOutMessage&apos;: &apos;缴费&apos;, ...}

    def test_mockCarOut(self, send_data, expect):
        &quot;&quot;&quot;模拟离场&quot;&quot;&quot;
&gt;       re = cloudparking_service().mockCarInOut(send_data[&quot;carNum&quot;], 1, send_data[&quot;outClientID&quot;])

..\test_suite\sentryDutyRoom\personalInfo\test_personalInfo.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.cloudparking_service.cloudparking_service object at 0x0000000008763748&gt;
carNum = &apos;粤Q46520&apos;, mockType = 1, ytj_id = 20190507171501, confidence = 91
carType = &apos;蓝牌车&apos;

    def mockCarInOut(self,carNum,mockType,ytj_id,confidence = 91,carType = &apos;蓝牌车&apos;):
        self.url = &quot;/mock_car_in_out&quot;
        json_data = {
        &quot;message_id&quot;:SA().get_uuid(),
        &quot;timestamp&quot;:SA().get_time(),
        &quot;biz_content&quot;:{
            &quot;car_plate&quot;:carNum,
            &quot;mock_type&quot;:mockType, # 取消进出类型
            &quot;ytj_id&quot;:ytj_id,
            &quot;confidence&quot;: confidence,
            &quot;job_id&quot;:SA().get_uuid(),
            &quot;car_size&quot;: self.carTypeDict[carType]
            }
        }
        LoginReponse.loginRe = {&quot;status&quot;:1}
        re = self.post(self.mock_api, json=json_data, headers=self.api_headers)
        if str(mockType) == &apos;1&apos;:
&gt;           self.save(&apos;carOut_jobId&apos;,re.json()[&apos;biz_content&apos;][&apos;job_id&apos;])
E           KeyError: &apos;job_id&apos;

..\Api\cloudparking_service.py:35: KeyError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.personalInfo.test_personalInfo.TestPersonalInfo" file="test_suite\sentryDutyRoom\personalInfo\test_personalInfo.py" line="41" name="test_sentryPay[send_data0-expect0]" time="0.507"><failure message="TypeError: &apos;NoneType&apos; object is not subscriptable">self = &lt;test_personalInfo.TestPersonalInfo object at 0x000000000879B0B8&gt;
sentryLogin = &lt;common.Req.Req object at 0x000000000838C048&gt;
send_data = {&apos;carHandleType&apos;: &apos;收费放行&apos;, &apos;carNum&apos;: &apos;粤Q46520&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501}
expect = {&apos;collectMoney&apos;: &apos;{{ ${mytest.collectMoney} + ${mytest.payVal} }}&apos;, &apos;dealCount&apos;: &apos;{{ ${mytest.dealCount} + 1}}&apos;, &apos;mockCarInMessage&apos;: &apos;欢迎光临&apos;, &apos;mockCarOutMessage&apos;: &apos;缴费&apos;, ...}

    def test_sentryPay(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;收费放行&quot;&quot;&quot;
&gt;       re = CarInOutHandle(sentryLogin).carInOutHandle(send_data[&apos;carNum&apos;],send_data[&apos;carHandleType&apos;],&apos;${mytest.carOut_jobId}&apos;)

..\test_suite\sentryDutyRoom\personalInfo\test_personalInfo.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;Api.sentry_service.carInOutHandle.CarInOutHandle object at 0x000000000C050FD0&gt;
carNum = &apos;粤Q46520&apos;, carHandleType = &apos;收费放行&apos;, jobId = &apos;${mytest.carOut_jobId}&apos;

    def carInOutHandle(self,carNum,carHandleType,jobId = &quot;&quot;):
        &quot;&quot;&quot;
        车辆进出场处理（登记放行，收费放行，异常放行）
        :param carNum:
        :param channelName:
        :param carHandleType: &apos;登记放行&apos;,&apos;异常放行&apos;,&apos;登记放行&apos;,&apos;确认放行&apos;
        :param jobId:
        :return:
        &quot;&quot;&quot;
        # channelDict = self.getDictBykey(self.__getDutyChannelStatus().json(), &apos;entrance_name&apos;, channelName)
        type = carHandleType.strip()
        if type == &quot;登记放行&quot;:
            type = &quot;&quot;
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;carNo&apos;, carNum)
        elif type == &quot;收费放行&quot; or &quot;异常放行&quot; or &quot;确认放行&quot;:
            carHandleInfoDict = self.getDictByList(self.__getCarInOutHandleIdList(), &apos;content&apos;, &apos;leaveCarNo&apos;, carNum)
&gt;       self.url = &quot;/ydtp-backend-service/api/messages/{}/go&quot;.format(carHandleInfoDict[&apos;id&apos;])
E       TypeError: &apos;NoneType&apos; object is not subscriptable

..\Api\sentry_service\carInOutHandle.py:36: TypeError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.personalInfo.test_personalInfo.TestPersonalInfo" file="test_suite\sentryDutyRoom\personalInfo\test_personalInfo.py" line="47" name="test_personalInfoAfter[send_data0-expect0]" time="0.563"><failure message="AssertionError">self = &lt;test_personalInfo.TestPersonalInfo object at 0x000000000C050588&gt;
sentryLogin = &lt;common.Req.Req object at 0x000000000C045A90&gt;
send_data = {&apos;carHandleType&apos;: &apos;收费放行&apos;, &apos;carNum&apos;: &apos;粤Q46520&apos;, &apos;inClientID&apos;: 20190507171500, &apos;outClientID&apos;: 20190507171501}
expect = {&apos;collectMoney&apos;: &apos;{{ ${mytest.collectMoney} + ${mytest.payVal} }}&apos;, &apos;dealCount&apos;: &apos;{{ ${mytest.dealCount} + 1}}&apos;, &apos;mockCarInMessage&apos;: &apos;欢迎光临&apos;, &apos;mockCarOutMessage&apos;: &apos;缴费&apos;, ...}

    def test_personalInfoAfter(self, sentryLogin, send_data, expect):
        re = PersonalInfo(sentryLogin).dutyInfo()
        result = re.json()
&gt;       Assertions().assert_in_text(result[&apos;deal_count&apos;], expect[&apos;dealCount&apos;])

..\test_suite\sentryDutyRoom\personalInfo\test_personalInfo.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000C029668&gt;, body = 0
expected_msg = &apos;1&apos;

    def assert_in_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否包含预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(str(expected_msg)).lower()
            text = json.dumps(body, ensure_ascii=False).lower()
            # print(text)
&gt;           assert expected_msg in text
E           AssertionError

..\common\Assert.py:91: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.personalInfo.test_sentryHandOverDuty.TestSentryHandOverDuty" file="test_suite\sentryDutyRoom\personalInfo\test_sentryHandOverDuty.py" line="21" name="test_addToll[send_data0-expect0]" time="7.548"></testcase><testcase classname="test_suite.sentryDutyRoom.personalInfo.test_sentryHandOverDuty.TestSentryHandOverDuty" file="test_suite\sentryDutyRoom\personalInfo\test_sentryHandOverDuty.py" line="29" name="test_bindUserPark[send_data0-expect0]" time="13.679"></testcase><testcase classname="test_suite.sentryDutyRoom.personalInfo.test_sentryHandOverDuty.TestSentryHandOverDuty" file="test_suite\sentryDutyRoom\personalInfo\test_sentryHandOverDuty.py" line="35" name="test_handOverDuty[send_data0-expect0]" time="6.445"><failure message="AssertionError">self = &lt;test_sentryHandOverDuty.TestSentryHandOverDuty object at 0x000000000BB7A860&gt;
sentryLogin = &lt;common.Req.Req object at 0x000000000C045DD8&gt;
send_data = {&apos;handUser&apos;: &apos;test3497&apos;, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, &apos;pwd&apos;: 123456, &apos;role&apos;: &apos;收费员&apos;}
expect = {&apos;handOverDutyStatusCode&apos;: 200, &apos;offdutyStatusCode&apos;: 200, &apos;status&apos;: 1}

    def test_handOverDuty(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;交接班&quot;&quot;&quot;
        re = PersonalInfo(sentryLogin).webHandOverDuty(send_data[&apos;handUser&apos;], send_data[&apos;pwd&apos;])
        result = re.text
&gt;       Assertions().assert_text(result, &apos;&apos;)

..\test_suite\sentryDutyRoom\personalInfo\test_sentryHandOverDuty.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x000000000C0505F8&gt;
body = &apos;{&quot;status&quot;:400,&quot;resultCode&quot;:0,&quot;message&quot;:&quot;接班人没有该停车场权限&quot;,&quot;cause&quot;:null}&apos;
expected_msg = &apos;&apos;

    def assert_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否等于预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(expected_msg)
&gt;           assert body == expected_msg
E           AssertionError

..\common\Assert.py:130: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.personalInfo.test_sentryHandOverDuty.TestSentryHandOverDuty" file="test_suite\sentryDutyRoom\personalInfo\test_sentryHandOverDuty.py" line="42" name="test_offDuty[sentryLogin0-send_data0-expect0]" time="5.927"><failure message="AssertionError">self = &lt;test_sentryHandOverDuty.TestSentryHandOverDuty object at 0x0000000006C7A8D0&gt;
sentryLogin = &lt;common.Req.Req object at 0x0000000007C13BA8&gt;
send_data = {&apos;handUser&apos;: &apos;test3497&apos;, &apos;parkName&apos;: &apos;智泊云接口测试专用停车场&apos;, &apos;pwd&apos;: 123456, &apos;role&apos;: &apos;收费员&apos;}
expect = {&apos;handOverDutyStatusCode&apos;: 200, &apos;offdutyStatusCode&apos;: 200, &apos;status&apos;: 1}

    @pytest.mark.parametrize(&apos;sentryLogin&apos;, [{&apos;user&apos;: &apos;${mytest.handUser}&apos;, &apos;pwd&apos;: &apos;${mytest.pwd}&apos;}],indirect=True)
    def test_offDuty(self, sentryLogin, send_data, expect):
        &quot;&quot;&quot;下班&quot;&quot;&quot;
        re = PersonalInfo(sentryLogin).offduty()
        result = re.text
        Assertions().assert_code(re.status_code, expect[&apos;offdutyStatusCode&apos;])
&gt;       Assertions().assert_text(result, &apos;&apos;)

..\test_suite\sentryDutyRoom\personalInfo\test_sentryHandOverDuty.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;common.Assert.Assertions object at 0x0000000008398D68&gt;
body = &apos;{&quot;status&quot;:400,&quot;resultCode&quot;:0,&quot;message&quot;:&quot;用户没有上班&quot;,&quot;cause&quot;:null}&apos;
expected_msg = &apos;&apos;

    def assert_text(self, body, expected_msg):
        &quot;&quot;&quot;
        验证response body中是否等于预期字符串
        :param body:
        :param expected_msg:
        :return:
        &quot;&quot;&quot;
        try:
            expected_msg = self.__formatExpected(expected_msg)
&gt;           assert body == expected_msg
E           AssertionError

..\common\Assert.py:130: AssertionError</failure></testcase><testcase classname="test_suite.sentryDutyRoom.personalInfo.test_sentryHandOverDuty.TestSentryHandOverDuty" file="test_suite\sentryDutyRoom\personalInfo\test_sentryHandOverDuty.py" line="50" name="test_delToll[send_data0-expect0]" time="8.192"></testcase></testsuite></testsuites>